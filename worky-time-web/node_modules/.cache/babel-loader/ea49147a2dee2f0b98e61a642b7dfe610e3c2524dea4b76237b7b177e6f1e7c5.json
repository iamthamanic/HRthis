{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock data\nconst mockReminderSettings = [{\n  id: '1',\n  managerId: '2',\n  // Anna Admin\n  isEnabled: true,\n  defaultReminders: [14, 7, 2],\n  // 2 weeks, 1 week, 2 days before\n  customMessage: 'Erinnerung: {employeeName} ist vom {startDate} bis {endDate} im Urlaub.',\n  notificationMethod: 'BOTH',\n  autoCreateForNewVacations: true,\n  createdAt: '2024-01-01T00:00:00Z'\n}];\nconst mockReminders = [{\n  id: '1',\n  leaveRequestId: '1',\n  // Max's Christmas vacation\n  userId: '1',\n  reminderType: 'AUTOMATIC',\n  reminderDate: '2024-12-09',\n  // 2 weeks before\n  daysBeforeVacation: 14,\n  isActive: true,\n  isSent: false,\n  message: 'Max Mustermann ist vom 23.12.2024 bis 30.12.2024 im Weihnachtsurlaub.',\n  createdAt: '2024-12-01T10:00:00Z',\n  createdBy: '2'\n}, {\n  id: '2',\n  leaveRequestId: '1',\n  userId: '1',\n  reminderType: 'AUTOMATIC',\n  reminderDate: '2024-12-16',\n  // 1 week before\n  daysBeforeVacation: 7,\n  isActive: true,\n  isSent: false,\n  message: 'Max Mustermann ist vom 23.12.2024 bis 30.12.2024 im Weihnachtsurlaub.',\n  createdAt: '2024-12-01T10:00:00Z',\n  createdBy: '2'\n}, {\n  id: '3',\n  leaveRequestId: '1',\n  userId: '1',\n  reminderType: 'AUTOMATIC',\n  reminderDate: '2024-12-21',\n  // 2 days before\n  daysBeforeVacation: 2,\n  isActive: true,\n  isSent: false,\n  message: 'Max Mustermann ist vom 23.12.2024 bis 30.12.2024 im Weihnachtsurlaub.',\n  createdAt: '2024-12-01T10:00:00Z',\n  createdBy: '2'\n}];\nexport const useRemindersStore = create()(persist((set, get) => ({\n  reminders: mockReminders,\n  reminderSettings: mockReminderSettings,\n  notifications: [],\n  isLoading: false,\n  createReminderForVacation: async (leaveRequest, managerId, customDays) => {\n    set({\n      isLoading: true\n    });\n    try {\n      const settings = get().getReminderSettings(managerId);\n      const reminderDays = customDays || (settings === null || settings === void 0 ? void 0 : settings.defaultReminders) || [7, 2]; // Default fallback\n\n      const vacationStart = new Date(leaveRequest.startDate);\n      const newReminders = [];\n      reminderDays.forEach(days => {\n        const reminderDate = new Date(vacationStart);\n        reminderDate.setDate(vacationStart.getDate() - days);\n\n        // Don't create reminders for past dates\n        if (reminderDate >= new Date()) {\n          var _settings$customMessa, _settings$customMessa2, _settings$customMessa3;\n          const reminder = {\n            id: `${Date.now()}-${days}`,\n            leaveRequestId: leaveRequest.id,\n            userId: leaveRequest.userId,\n            reminderType: 'AUTOMATIC',\n            reminderDate: reminderDate.toISOString().split('T')[0],\n            daysBeforeVacation: days,\n            isActive: true,\n            isSent: false,\n            message: (settings === null || settings === void 0 ? void 0 : (_settings$customMessa = settings.customMessage) === null || _settings$customMessa === void 0 ? void 0 : (_settings$customMessa2 = _settings$customMessa.replace('{employeeName}', 'Mitarbeiter')) === null || _settings$customMessa2 === void 0 ? void 0 : (_settings$customMessa3 = _settings$customMessa2.replace('{startDate}', new Date(leaveRequest.startDate).toLocaleDateString('de-DE'))) === null || _settings$customMessa3 === void 0 ? void 0 : _settings$customMessa3.replace('{endDate}', new Date(leaveRequest.endDate).toLocaleDateString('de-DE'))) || `Urlaub vom ${new Date(leaveRequest.startDate).toLocaleDateString('de-DE')} bis ${new Date(leaveRequest.endDate).toLocaleDateString('de-DE')}`,\n            createdAt: new Date().toISOString(),\n            createdBy: managerId\n          };\n          newReminders.push(reminder);\n        }\n      });\n      set(state => ({\n        reminders: [...state.reminders, ...newReminders],\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  createManualReminder: async (leaveRequestId, reminderDate, message, managerId) => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const reminder = {\n        id: Date.now().toString(),\n        leaveRequestId,\n        userId: '',\n        // Will be filled from leave request\n        reminderType: 'MANUAL',\n        reminderDate,\n        daysBeforeVacation: 0,\n        // Calculated later\n        isActive: true,\n        isSent: false,\n        message,\n        createdAt: new Date().toISOString(),\n        createdBy: managerId\n      };\n      set(state => ({\n        reminders: [...state.reminders, reminder],\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  deleteReminder: reminderId => {\n    set(state => ({\n      reminders: state.reminders.filter(r => r.id !== reminderId)\n    }));\n  },\n  updateReminder: (reminderId, updates) => {\n    set(state => ({\n      reminders: state.reminders.map(r => r.id === reminderId ? {\n        ...r,\n        ...updates\n      } : r)\n    }));\n  },\n  getReminderSettings: managerId => {\n    return get().reminderSettings.find(s => s.managerId === managerId) || null;\n  },\n  updateReminderSettings: async (managerId, settingsUpdate) => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      set(state => {\n        const existingIndex = state.reminderSettings.findIndex(s => s.managerId === managerId);\n        if (existingIndex >= 0) {\n          // Update existing settings\n          const updatedSettings = [...state.reminderSettings];\n          updatedSettings[existingIndex] = {\n            ...updatedSettings[existingIndex],\n            ...settingsUpdate\n          };\n          return {\n            reminderSettings: updatedSettings,\n            isLoading: false\n          };\n        } else {\n          // Create new settings\n          const newSettings = {\n            id: Date.now().toString(),\n            managerId,\n            isEnabled: true,\n            defaultReminders: [14, 7, 2],\n            notificationMethod: 'BOTH',\n            autoCreateForNewVacations: true,\n            createdAt: new Date().toISOString(),\n            ...settingsUpdate\n          };\n          return {\n            reminderSettings: [...state.reminderSettings, newSettings],\n            isLoading: false\n          };\n        }\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  getUpcomingNotifications: managerId => {\n    const today = new Date().toISOString().split('T')[0];\n    const upcomingDays = new Date();\n    upcomingDays.setDate(upcomingDays.getDate() + 7); // Next 7 days\n\n    return get().notifications.filter(n => n.scheduledFor >= today && n.scheduledFor <= upcomingDays.toISOString().split('T')[0] && !n.isRead);\n  },\n  markNotificationAsRead: notificationId => {\n    set(state => ({\n      notifications: state.notifications.map(n => n.id === notificationId ? {\n        ...n,\n        isRead: true\n      } : n)\n    }));\n  },\n  generateNotificationsForToday: () => {\n    const today = new Date().toISOString().split('T')[0];\n    const todayReminders = get().reminders.filter(r => r.reminderDate === today && r.isActive && !r.isSent);\n    const newNotifications = todayReminders.map(reminder => ({\n      id: Date.now().toString() + Math.random(),\n      reminderId: reminder.id,\n      title: `Urlaubserinnerung - ${reminder.daysBeforeVacation} Tag${reminder.daysBeforeVacation !== 1 ? 'e' : ''} vorher`,\n      message: reminder.message,\n      isRead: false,\n      createdAt: new Date().toISOString(),\n      scheduledFor: today,\n      leaveRequestId: reminder.leaveRequestId,\n      employeeName: 'Mitarbeiter',\n      // Would be filled from user data\n      vacationDates: {\n        startDate: '',\n        // Would be filled from leave request\n        endDate: ''\n      }\n    }));\n\n    // Mark reminders as sent\n    set(state => ({\n      notifications: [...state.notifications, ...newNotifications],\n      reminders: state.reminders.map(r => todayReminders.some(tr => tr.id === r.id) ? {\n        ...r,\n        isSent: true\n      } : r)\n    }));\n    return newNotifications;\n  },\n  getRemindersForLeave: leaveRequestId => {\n    return get().reminders.filter(r => r.leaveRequestId === leaveRequestId);\n  },\n  getUpcomingVacationAlerts: (managerId, days = 14) => {\n    const endDate = new Date();\n    endDate.setDate(endDate.getDate() + days);\n    const endDateString = endDate.toISOString().split('T')[0];\n    const today = new Date().toISOString().split('T')[0];\n    return get().notifications.filter(n => n.scheduledFor >= today && n.scheduledFor <= endDateString).sort((a, b) => new Date(a.scheduledFor).getTime() - new Date(b.scheduledFor).getTime());\n  }\n}), {\n  name: 'reminders-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    reminders: state.reminders,\n    reminderSettings: state.reminderSettings,\n    notifications: state.notifications\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockReminderSettings","id","managerId","isEnabled","defaultReminders","customMessage","notificationMethod","autoCreateForNewVacations","createdAt","mockReminders","leaveRequestId","userId","reminderType","reminderDate","daysBeforeVacation","isActive","isSent","message","createdBy","useRemindersStore","set","get","reminders","reminderSettings","notifications","isLoading","createReminderForVacation","leaveRequest","customDays","settings","getReminderSettings","reminderDays","vacationStart","Date","startDate","newReminders","forEach","days","setDate","getDate","_settings$customMessa","_settings$customMessa2","_settings$customMessa3","reminder","now","toISOString","split","replace","toLocaleDateString","endDate","push","state","error","createManualReminder","Promise","resolve","setTimeout","toString","deleteReminder","reminderId","filter","r","updateReminder","updates","map","find","s","updateReminderSettings","settingsUpdate","existingIndex","findIndex","updatedSettings","newSettings","getUpcomingNotifications","today","upcomingDays","n","scheduledFor","isRead","markNotificationAsRead","notificationId","generateNotificationsForToday","todayReminders","newNotifications","Math","random","title","employeeName","vacationDates","some","tr","getRemindersForLeave","getUpcomingVacationAlerts","endDateString","sort","a","b","getTime","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/reminders.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { VacationReminder, ReminderSettings, ReminderNotification } from '../types/reminders';\nimport { LeaveRequest } from '../types';\n\ninterface RemindersState {\n  reminders: VacationReminder[];\n  reminderSettings: ReminderSettings[];\n  notifications: ReminderNotification[];\n  isLoading: boolean;\n  \n  // Reminder management\n  createReminderForVacation: (leaveRequest: LeaveRequest, managerId: string, customDays?: number[]) => Promise<void>;\n  createManualReminder: (leaveRequestId: string, reminderDate: string, message: string, managerId: string) => Promise<void>;\n  deleteReminder: (reminderId: string) => void;\n  updateReminder: (reminderId: string, updates: Partial<VacationReminder>) => void;\n  \n  // Settings management\n  getReminderSettings: (managerId: string) => ReminderSettings | null;\n  updateReminderSettings: (managerId: string, settings: Partial<ReminderSettings>) => Promise<void>;\n  \n  // Notifications\n  getUpcomingNotifications: (managerId: string) => ReminderNotification[];\n  markNotificationAsRead: (notificationId: string) => void;\n  generateNotificationsForToday: () => ReminderNotification[];\n  \n  // Calendar integration\n  getRemindersForLeave: (leaveRequestId: string) => VacationReminder[];\n  getUpcomingVacationAlerts: (managerId: string, days?: number) => ReminderNotification[];\n}\n\n// Mock data\nconst mockReminderSettings: ReminderSettings[] = [\n  {\n    id: '1',\n    managerId: '2', // Anna Admin\n    isEnabled: true,\n    defaultReminders: [14, 7, 2], // 2 weeks, 1 week, 2 days before\n    customMessage: 'Erinnerung: {employeeName} ist vom {startDate} bis {endDate} im Urlaub.',\n    notificationMethod: 'BOTH',\n    autoCreateForNewVacations: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  }\n];\n\nconst mockReminders: VacationReminder[] = [\n  {\n    id: '1',\n    leaveRequestId: '1', // Max's Christmas vacation\n    userId: '1',\n    reminderType: 'AUTOMATIC',\n    reminderDate: '2024-12-09', // 2 weeks before\n    daysBeforeVacation: 14,\n    isActive: true,\n    isSent: false,\n    message: 'Max Mustermann ist vom 23.12.2024 bis 30.12.2024 im Weihnachtsurlaub.',\n    createdAt: '2024-12-01T10:00:00Z',\n    createdBy: '2'\n  },\n  {\n    id: '2',\n    leaveRequestId: '1',\n    userId: '1',\n    reminderType: 'AUTOMATIC',\n    reminderDate: '2024-12-16', // 1 week before\n    daysBeforeVacation: 7,\n    isActive: true,\n    isSent: false,\n    message: 'Max Mustermann ist vom 23.12.2024 bis 30.12.2024 im Weihnachtsurlaub.',\n    createdAt: '2024-12-01T10:00:00Z',\n    createdBy: '2'\n  },\n  {\n    id: '3',\n    leaveRequestId: '1',\n    userId: '1',\n    reminderType: 'AUTOMATIC',\n    reminderDate: '2024-12-21', // 2 days before\n    daysBeforeVacation: 2,\n    isActive: true,\n    isSent: false,\n    message: 'Max Mustermann ist vom 23.12.2024 bis 30.12.2024 im Weihnachtsurlaub.',\n    createdAt: '2024-12-01T10:00:00Z',\n    createdBy: '2'\n  }\n];\n\nexport const useRemindersStore = create<RemindersState>()(\n  persist(\n    (set, get) => ({\n      reminders: mockReminders,\n      reminderSettings: mockReminderSettings,\n      notifications: [],\n      isLoading: false,\n\n      createReminderForVacation: async (leaveRequest: LeaveRequest, managerId: string, customDays?: number[]) => {\n        set({ isLoading: true });\n        \n        try {\n          const settings = get().getReminderSettings(managerId);\n          const reminderDays = customDays || settings?.defaultReminders || [7, 2]; // Default fallback\n          \n          const vacationStart = new Date(leaveRequest.startDate);\n          const newReminders: VacationReminder[] = [];\n          \n          reminderDays.forEach(days => {\n            const reminderDate = new Date(vacationStart);\n            reminderDate.setDate(vacationStart.getDate() - days);\n            \n            // Don't create reminders for past dates\n            if (reminderDate >= new Date()) {\n              const reminder: VacationReminder = {\n                id: `${Date.now()}-${days}`,\n                leaveRequestId: leaveRequest.id,\n                userId: leaveRequest.userId,\n                reminderType: 'AUTOMATIC',\n                reminderDate: reminderDate.toISOString().split('T')[0],\n                daysBeforeVacation: days,\n                isActive: true,\n                isSent: false,\n                message: settings?.customMessage\n                  ?.replace('{employeeName}', 'Mitarbeiter')\n                  ?.replace('{startDate}', new Date(leaveRequest.startDate).toLocaleDateString('de-DE'))\n                  ?.replace('{endDate}', new Date(leaveRequest.endDate).toLocaleDateString('de-DE'))\n                  || `Urlaub vom ${new Date(leaveRequest.startDate).toLocaleDateString('de-DE')} bis ${new Date(leaveRequest.endDate).toLocaleDateString('de-DE')}`,\n                createdAt: new Date().toISOString(),\n                createdBy: managerId\n              };\n              \n              newReminders.push(reminder);\n            }\n          });\n          \n          set(state => ({\n            reminders: [...state.reminders, ...newReminders],\n            isLoading: false\n          }));\n          \n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      createManualReminder: async (leaveRequestId: string, reminderDate: string, message: string, managerId: string) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          const reminder: VacationReminder = {\n            id: Date.now().toString(),\n            leaveRequestId,\n            userId: '', // Will be filled from leave request\n            reminderType: 'MANUAL',\n            reminderDate,\n            daysBeforeVacation: 0, // Calculated later\n            isActive: true,\n            isSent: false,\n            message,\n            createdAt: new Date().toISOString(),\n            createdBy: managerId\n          };\n          \n          set(state => ({\n            reminders: [...state.reminders, reminder],\n            isLoading: false\n          }));\n          \n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      deleteReminder: (reminderId: string) => {\n        set(state => ({\n          reminders: state.reminders.filter(r => r.id !== reminderId)\n        }));\n      },\n\n      updateReminder: (reminderId: string, updates: Partial<VacationReminder>) => {\n        set(state => ({\n          reminders: state.reminders.map(r => \n            r.id === reminderId ? { ...r, ...updates } : r\n          )\n        }));\n      },\n\n      getReminderSettings: (managerId: string) => {\n        return get().reminderSettings.find(s => s.managerId === managerId) || null;\n      },\n\n      updateReminderSettings: async (managerId: string, settingsUpdate: Partial<ReminderSettings>) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          set(state => {\n            const existingIndex = state.reminderSettings.findIndex(s => s.managerId === managerId);\n            \n            if (existingIndex >= 0) {\n              // Update existing settings\n              const updatedSettings = [...state.reminderSettings];\n              updatedSettings[existingIndex] = { ...updatedSettings[existingIndex], ...settingsUpdate };\n              return { reminderSettings: updatedSettings, isLoading: false };\n            } else {\n              // Create new settings\n              const newSettings: ReminderSettings = {\n                id: Date.now().toString(),\n                managerId,\n                isEnabled: true,\n                defaultReminders: [14, 7, 2],\n                notificationMethod: 'BOTH',\n                autoCreateForNewVacations: true,\n                createdAt: new Date().toISOString(),\n                ...settingsUpdate\n              };\n              return { \n                reminderSettings: [...state.reminderSettings, newSettings], \n                isLoading: false \n              };\n            }\n          });\n          \n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      getUpcomingNotifications: (managerId: string) => {\n        const today = new Date().toISOString().split('T')[0];\n        const upcomingDays = new Date();\n        upcomingDays.setDate(upcomingDays.getDate() + 7); // Next 7 days\n        \n        return get().notifications.filter(n => \n          n.scheduledFor >= today && \n          n.scheduledFor <= upcomingDays.toISOString().split('T')[0] &&\n          !n.isRead\n        );\n      },\n\n      markNotificationAsRead: (notificationId: string) => {\n        set(state => ({\n          notifications: state.notifications.map(n => \n            n.id === notificationId ? { ...n, isRead: true } : n\n          )\n        }));\n      },\n\n      generateNotificationsForToday: () => {\n        const today = new Date().toISOString().split('T')[0];\n        const todayReminders = get().reminders.filter(r => \n          r.reminderDate === today && r.isActive && !r.isSent\n        );\n        \n        const newNotifications: ReminderNotification[] = todayReminders.map(reminder => ({\n          id: Date.now().toString() + Math.random(),\n          reminderId: reminder.id,\n          title: `Urlaubserinnerung - ${reminder.daysBeforeVacation} Tag${reminder.daysBeforeVacation !== 1 ? 'e' : ''} vorher`,\n          message: reminder.message,\n          isRead: false,\n          createdAt: new Date().toISOString(),\n          scheduledFor: today,\n          leaveRequestId: reminder.leaveRequestId,\n          employeeName: 'Mitarbeiter', // Would be filled from user data\n          vacationDates: {\n            startDate: '', // Would be filled from leave request\n            endDate: ''\n          }\n        }));\n        \n        // Mark reminders as sent\n        set(state => ({\n          notifications: [...state.notifications, ...newNotifications],\n          reminders: state.reminders.map(r => \n            todayReminders.some(tr => tr.id === r.id) \n              ? { ...r, isSent: true } \n              : r\n          )\n        }));\n        \n        return newNotifications;\n      },\n\n      getRemindersForLeave: (leaveRequestId: string) => {\n        return get().reminders.filter(r => r.leaveRequestId === leaveRequestId);\n      },\n\n      getUpcomingVacationAlerts: (managerId: string, days = 14) => {\n        const endDate = new Date();\n        endDate.setDate(endDate.getDate() + days);\n        const endDateString = endDate.toISOString().split('T')[0];\n        const today = new Date().toISOString().split('T')[0];\n        \n        return get().notifications.filter(n => \n          n.scheduledFor >= today && \n          n.scheduledFor <= endDateString\n        ).sort((a, b) => new Date(a.scheduledFor).getTime() - new Date(b.scheduledFor).getTime());\n      }\n    }),\n    {\n      name: 'reminders-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        reminders: state.reminders,\n        reminderSettings: state.reminderSettings,\n        notifications: state.notifications\n      }),\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}