{"ast":null,"code":"import { getOpenAITextResponse } from './chat-service';\n/**\n * AI Training Content Generator\n * Uses OpenAI GPT-4o to generate training content, lessons, and quizzes\n */\n\nexport const generateTrainingContent = async request => {\n  const prompt = `\nDu bist ein Experte für Unternehmensschulungen und E-Learning. Erstelle eine strukturierte Schulung basierend auf folgenden Vorgaben:\n\n**Schulungsanfrage:**\n- Thema: ${request.topic}\n- Beschreibung: ${request.description}\n- Zielgruppe: ${request.targetAudience}\n- Dauer: ${request.duration} Minuten\n- Schwierigkeitsgrad: ${request.difficulty}\n- Anzahl Lektionen: ${request.lessonCount}\n- Quiz einschließen: ${request.includeQuiz ? 'Ja' : 'Nein'}\n\n**Aufgabe:**\nErstelle eine vollständige Schulung mit folgender Struktur:\n\n1. **Schulungstitel**: Prägnanter, professioneller Titel\n2. **Beschreibung**: Umfassende Beschreibung der Schulung (2-3 Sätze)\n3. **Lektionen**: ${request.lessonCount} Lektionen mit jeweils:\n   - Titel der Lektion\n   - Kurze Beschreibung (1-2 Sätze)\n   - Detaillierter Inhalt (strukturiert mit Überschriften, Aufzählungen, praktischen Beispielen)\n   ${request.includeQuiz ? '- Quiz mit 2-3 Multiple-Choice-Fragen pro Lektion\\n   - Jede Frage mit 4 Antwortmöglichkeiten, korrekter Antwort und Erklärung' : ''}\n\n${request.includeQuiz ? `4. **Abschlussprüfung**: \n   - 2-3 zusammenfassende Fragen über alle Lektionen\n   - Bestehensgrenze: 70%` : ''}\n\n**Wichtige Anforderungen:**\n- Inhalt muss praxisnah und unternehmensrelevant sein\n- Verwende klare, verständliche Sprache\n- Strukturiere den Inhalt logisch und aufbauend\n- Beispiele und Fallstudien einbauen\n- Bei ${request.difficulty === 'BEGINNER' ? 'Anfänger: Grundlagen erklären' : request.difficulty === 'INTERMEDIATE' ? 'Fortgeschritten: Vertiefte Kenntnisse vermitteln' : 'Experte: Spezialisiertes Fachwissen'}\n\n**Antwortformat:**\nAntworte ausschließlich in folgendem JSON-Format:\n\n{\n  \"title\": \"Schulungstitel\",\n  \"description\": \"Schulungsbeschreibung\",\n  \"lessons\": [\n    {\n      \"title\": \"Lektionstitel\",\n      \"description\": \"Lektionsbeschreibung\",\n      \"content\": \"Detaillierter Lektionsinhalt mit Markdown-Formatierung\",\n      ${request.includeQuiz ? `\"quiz\": {\n        \"questions\": [\n          {\n            \"question\": \"Frage?\",\n            \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n            \"correctAnswer\": 0,\n            \"explanation\": \"Erklärung der korrekten Antwort\"\n          }\n        ],\n        \"passingScore\": 80\n      }` : ''}\n    }\n  ]${request.includeQuiz ? `,\n  \"finalQuiz\": {\n    \"questions\": [\n      {\n        \"question\": \"Abschlussfrage?\",\n        \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n        \"correctAnswer\": 0,\n        \"explanation\": \"Erklärung\"\n      }\n    ],\n    \"passingScore\": 70\n  }` : ''}\n}\n\nErstelle jetzt die Schulung:`;\n  try {\n    const aiResponse = await getOpenAITextResponse([{\n      role: 'system',\n      content: 'Du bist ein Experte für Unternehmensschulungen und E-Learning-Content. Erstelle hochwertige, strukturierte Schulungsinhalte in deutscher Sprache.'\n    }, {\n      role: 'user',\n      content: prompt\n    }], {\n      model: 'gpt-4o'\n    });\n    const response = aiResponse.content;\n\n    // Parse the AI response\n    let parsedContent;\n    try {\n      // Extract JSON from response (in case there's additional text)\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      const jsonString = jsonMatch ? jsonMatch[0] : response;\n      parsedContent = JSON.parse(jsonString);\n    } catch (parseError) {\n      // Fallback: create structured content from text response\n      parsedContent = {\n        title: `${request.topic} - Umfassende Schulung`,\n        description: `Eine strukturierte Schulung zu ${request.topic} für ${request.targetAudience}. Diese Schulung vermittelt alle wichtigen Grundlagen und praktischen Anwendungen.`,\n        lessons: Array.from({\n          length: request.lessonCount\n        }, (_, i) => ({\n          title: `Lektion ${i + 1}: ${request.topic} Grundlagen`,\n          description: `In dieser Lektion lernen Sie die wichtigsten Aspekte von ${request.topic} kennen.`,\n          content: `# Lektion ${i + 1}: ${request.topic}\\n\\n${response.substring(0, 500)}...`,\n          quiz: request.includeQuiz ? {\n            questions: [{\n              question: `Was ist das wichtigste Prinzip bei ${request.topic}?`,\n              options: ['Sicherheit und Compliance', 'Effizienz', 'Kostenoptimierung', 'Alle genannten Punkte'],\n              correctAnswer: 3,\n              explanation: `Bei ${request.topic} sind alle Aspekte wichtig, aber besonders die Balance zwischen Sicherheit, Effizienz und Kosten.`\n            }],\n            passingScore: 80\n          } : undefined\n        })),\n        finalQuiz: request.includeQuiz ? {\n          questions: [{\n            question: `Was haben Sie in dieser ${request.topic} Schulung gelernt?`,\n            options: ['Grundlagen und Best Practices', 'Nur theoretisches Wissen', 'Veraltete Methoden', 'Nichts Neues'],\n            correctAnswer: 0,\n            explanation: 'Diese Schulung vermittelt sowohl theoretische Grundlagen als auch praktische Best Practices.'\n          }],\n          passingScore: 70\n        } : undefined\n      };\n    }\n\n    // Validate the generated content\n    if (!parsedContent.title || !parsedContent.description || !parsedContent.lessons) {\n      throw new Error('Invalid AI response structure');\n    }\n    return parsedContent;\n  } catch (error) {\n    console.error('AI Training Generation Error:', error);\n    throw new Error('Fehler bei der KI-Generierung. Bitte versuchen Sie es erneut.');\n  }\n};\n\n/**\n * Generate a training certificate using AI\n */\nexport const generateCertificateText = async (trainingTitle, userName, completionDate, score) => {\n  const prompt = `\nErstelle einen professionellen Zertifikatstext für eine abgeschlossene Unternehmensschulung.\n\n**Details:**\n- Schulung: ${trainingTitle}\n- Teilnehmer: ${userName}\n- Abschlussdatum: ${completionDate}\n- Ergebnis: ${score}%\n\n**Anforderungen:**\n- Professioneller, offizieller Ton\n- Deutsche Sprache\n- Gratulation zur erfolgreichen Teilnahme\n- Bestätigung der erworbenen Kenntnisse\n- Verwende \"WorkyTime GmbH\" als ausstellendes Unternehmen\n\nErstelle einen strukturierten Zertifikatstext:`;\n  try {\n    const aiResponse = await getOpenAITextResponse([{\n      role: 'system',\n      content: 'Du erstellst professionelle Zertifikatstexte für Unternehmensschulungen in deutscher Sprache.'\n    }, {\n      role: 'user',\n      content: prompt\n    }], {\n      model: 'gpt-4o'\n    });\n    return aiResponse.content;\n  } catch (error) {\n    console.error('Certificate Generation Error:', error);\n\n    // Fallback certificate text\n    return `\nZERTIFIKAT\n\nHiermit wird bestätigt, dass\n\n${userName}\n\ndie Schulung \"${trainingTitle}\" erfolgreich abgeschlossen hat.\n\nAbschlussdatum: ${completionDate}\nErgebnis: ${score}%\n\nDiese Schulung vermittelte wichtige Kenntnisse und Fähigkeiten für den beruflichen Alltag.\n\nWorkyTime GmbH\nPersonalabteilung\n    `.trim();\n  }\n};\n\n/**\n * Generate email content for training notifications\n */\nexport const generateTrainingNotificationEmail = async (type, userName, trainingTitle, additionalInfo) => {\n  let promptContext = '';\n  switch (type) {\n    case 'NEW_TRAINING':\n      promptContext = 'eine neue Schulung ist verfügbar';\n      break;\n    case 'REMINDER':\n      promptContext = 'Erinnerung an eine nicht abgeschlossene Schulung';\n      break;\n    case 'DEADLINE_APPROACHING':\n      promptContext = 'die Deadline einer Schulung nähert sich';\n      break;\n    case 'COMPLETED':\n      promptContext = 'Gratulation zur abgeschlossenen Schulung';\n      break;\n    case 'FAILED':\n      promptContext = 'Information über nicht bestandene Schulung';\n      break;\n  }\n  const prompt = `\nErstelle eine professionelle E-Mail für ${promptContext}.\n\n**Details:**\n- Empfänger: ${userName}\n- Schulung: ${trainingTitle}\n- Zusätzliche Info: ${additionalInfo || 'Keine'}\n- Absender: WorkyTime GmbH Personalabteilung\n\n**Anforderungen:**\n- Professioneller aber freundlicher Ton\n- Deutsche Sprache\n- Passende Betreffzeile\n- Strukturierte E-Mail mit klaren Handlungsaufforderungen\n- Link zur WorkyTime App erwähnen\n\nErstelle Betreff und E-Mail-Text:`;\n  try {\n    const aiResponse = await getOpenAITextResponse([{\n      role: 'system',\n      content: 'Du erstellst professionelle E-Mail-Benachrichtigungen für Unternehmensschulungen in deutscher Sprache.'\n    }, {\n      role: 'user',\n      content: prompt\n    }], {\n      model: 'gpt-4o'\n    });\n    const response = aiResponse.content;\n\n    // Extract subject and body from response\n    const lines = response.split('\\n');\n    const subjectLine = lines.find(line => line.toLowerCase().includes('betreff:') || line.toLowerCase().includes('subject:'));\n    const subject = subjectLine ? subjectLine.replace(/betreff:|subject:/i, '').trim() : `WorkyTime: ${trainingTitle}`;\n    const bodyStart = response.indexOf('\\n\\n') > 0 ? response.indexOf('\\n\\n') + 2 : 0;\n    const body = response.substring(bodyStart).trim();\n    return {\n      subject,\n      body\n    };\n  } catch (error) {\n    console.error('Email Generation Error:', error);\n\n    // Fallback email content\n    const fallbackSubjects = {\n      NEW_TRAINING: `Neue Schulung verfügbar: ${trainingTitle}`,\n      REMINDER: `Erinnerung: Schulung \"${trainingTitle}\" noch nicht abgeschlossen`,\n      DEADLINE_APPROACHING: `Deadline nähert sich: ${trainingTitle}`,\n      COMPLETED: `Glückwunsch! Schulung \"${trainingTitle}\" erfolgreich abgeschlossen`,\n      FAILED: `Schulung \"${trainingTitle}\" - Wiederholung erforderlich`\n    };\n    return {\n      subject: fallbackSubjects[type],\n      body: `Hallo ${userName},\\n\\nbezüglich der Schulung \"${trainingTitle}\" gibt es eine wichtige Information.\\n\\nBitte loggen Sie sich in die WorkyTime App ein, um weitere Details zu erfahren.\\n\\nBeste Grüße\\nIhr WorkyTime Team`\n    };\n  }\n};","map":{"version":3,"names":["getOpenAITextResponse","generateTrainingContent","request","prompt","topic","description","targetAudience","duration","difficulty","lessonCount","includeQuiz","aiResponse","role","content","model","response","parsedContent","jsonMatch","match","jsonString","JSON","parse","parseError","title","lessons","Array","from","length","_","i","substring","quiz","questions","question","options","correctAnswer","explanation","passingScore","undefined","finalQuiz","Error","error","console","generateCertificateText","trainingTitle","userName","completionDate","score","trim","generateTrainingNotificationEmail","type","additionalInfo","promptContext","lines","split","subjectLine","find","line","toLowerCase","includes","subject","replace","bodyStart","indexOf","body","fallbackSubjects","NEW_TRAINING","REMINDER","DEADLINE_APPROACHING","COMPLETED","FAILED"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/api/training-ai.ts"],"sourcesContent":["import { getOpenAITextResponse } from './chat-service';\nimport { AIGenerationRequest, AIGeneratedContent } from '../types/training';\n\n/**\n * AI Training Content Generator\n * Uses OpenAI GPT-4o to generate training content, lessons, and quizzes\n */\n\nexport const generateTrainingContent = async (request: AIGenerationRequest): Promise<AIGeneratedContent> => {\n  const prompt = `\nDu bist ein Experte für Unternehmensschulungen und E-Learning. Erstelle eine strukturierte Schulung basierend auf folgenden Vorgaben:\n\n**Schulungsanfrage:**\n- Thema: ${request.topic}\n- Beschreibung: ${request.description}\n- Zielgruppe: ${request.targetAudience}\n- Dauer: ${request.duration} Minuten\n- Schwierigkeitsgrad: ${request.difficulty}\n- Anzahl Lektionen: ${request.lessonCount}\n- Quiz einschließen: ${request.includeQuiz ? 'Ja' : 'Nein'}\n\n**Aufgabe:**\nErstelle eine vollständige Schulung mit folgender Struktur:\n\n1. **Schulungstitel**: Prägnanter, professioneller Titel\n2. **Beschreibung**: Umfassende Beschreibung der Schulung (2-3 Sätze)\n3. **Lektionen**: ${request.lessonCount} Lektionen mit jeweils:\n   - Titel der Lektion\n   - Kurze Beschreibung (1-2 Sätze)\n   - Detaillierter Inhalt (strukturiert mit Überschriften, Aufzählungen, praktischen Beispielen)\n   ${request.includeQuiz ? '- Quiz mit 2-3 Multiple-Choice-Fragen pro Lektion\\n   - Jede Frage mit 4 Antwortmöglichkeiten, korrekter Antwort und Erklärung' : ''}\n\n${request.includeQuiz ? `4. **Abschlussprüfung**: \n   - 2-3 zusammenfassende Fragen über alle Lektionen\n   - Bestehensgrenze: 70%` : ''}\n\n**Wichtige Anforderungen:**\n- Inhalt muss praxisnah und unternehmensrelevant sein\n- Verwende klare, verständliche Sprache\n- Strukturiere den Inhalt logisch und aufbauend\n- Beispiele und Fallstudien einbauen\n- Bei ${request.difficulty === 'BEGINNER' ? 'Anfänger: Grundlagen erklären' : request.difficulty === 'INTERMEDIATE' ? 'Fortgeschritten: Vertiefte Kenntnisse vermitteln' : 'Experte: Spezialisiertes Fachwissen'}\n\n**Antwortformat:**\nAntworte ausschließlich in folgendem JSON-Format:\n\n{\n  \"title\": \"Schulungstitel\",\n  \"description\": \"Schulungsbeschreibung\",\n  \"lessons\": [\n    {\n      \"title\": \"Lektionstitel\",\n      \"description\": \"Lektionsbeschreibung\",\n      \"content\": \"Detaillierter Lektionsinhalt mit Markdown-Formatierung\",\n      ${request.includeQuiz ? `\"quiz\": {\n        \"questions\": [\n          {\n            \"question\": \"Frage?\",\n            \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n            \"correctAnswer\": 0,\n            \"explanation\": \"Erklärung der korrekten Antwort\"\n          }\n        ],\n        \"passingScore\": 80\n      }` : ''}\n    }\n  ]${request.includeQuiz ? `,\n  \"finalQuiz\": {\n    \"questions\": [\n      {\n        \"question\": \"Abschlussfrage?\",\n        \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n        \"correctAnswer\": 0,\n        \"explanation\": \"Erklärung\"\n      }\n    ],\n    \"passingScore\": 70\n  }` : ''}\n}\n\nErstelle jetzt die Schulung:`;\n\n  try {\n    const aiResponse = await getOpenAITextResponse([\n      {\n        role: 'system',\n        content: 'Du bist ein Experte für Unternehmensschulungen und E-Learning-Content. Erstelle hochwertige, strukturierte Schulungsinhalte in deutscher Sprache.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ], { model: 'gpt-4o' });\n    \n    const response = aiResponse.content;\n\n    // Parse the AI response\n    let parsedContent: AIGeneratedContent;\n    \n    try {\n      // Extract JSON from response (in case there's additional text)\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      const jsonString = jsonMatch ? jsonMatch[0] : response;\n      parsedContent = JSON.parse(jsonString);\n    } catch (parseError) {\n      // Fallback: create structured content from text response\n      parsedContent = {\n        title: `${request.topic} - Umfassende Schulung`,\n        description: `Eine strukturierte Schulung zu ${request.topic} für ${request.targetAudience}. Diese Schulung vermittelt alle wichtigen Grundlagen und praktischen Anwendungen.`,\n        lessons: Array.from({ length: request.lessonCount }, (_, i) => ({\n          title: `Lektion ${i + 1}: ${request.topic} Grundlagen`,\n          description: `In dieser Lektion lernen Sie die wichtigsten Aspekte von ${request.topic} kennen.`,\n          content: `# Lektion ${i + 1}: ${request.topic}\\n\\n${response.substring(0, 500)}...`,\n          quiz: request.includeQuiz ? {\n            questions: [\n              {\n                question: `Was ist das wichtigste Prinzip bei ${request.topic}?`,\n                options: [\n                  'Sicherheit und Compliance',\n                  'Effizienz',\n                  'Kostenoptimierung',\n                  'Alle genannten Punkte'\n                ],\n                correctAnswer: 3,\n                explanation: `Bei ${request.topic} sind alle Aspekte wichtig, aber besonders die Balance zwischen Sicherheit, Effizienz und Kosten.`\n              }\n            ],\n            passingScore: 80\n          } : undefined\n        })),\n        finalQuiz: request.includeQuiz ? {\n          questions: [\n            {\n              question: `Was haben Sie in dieser ${request.topic} Schulung gelernt?`,\n              options: [\n                'Grundlagen und Best Practices',\n                'Nur theoretisches Wissen',\n                'Veraltete Methoden',\n                'Nichts Neues'\n              ],\n              correctAnswer: 0,\n              explanation: 'Diese Schulung vermittelt sowohl theoretische Grundlagen als auch praktische Best Practices.'\n            }\n          ],\n          passingScore: 70\n        } : undefined\n      };\n    }\n\n    // Validate the generated content\n    if (!parsedContent.title || !parsedContent.description || !parsedContent.lessons) {\n      throw new Error('Invalid AI response structure');\n    }\n\n    return parsedContent;\n  } catch (error) {\n    console.error('AI Training Generation Error:', error);\n    throw new Error('Fehler bei der KI-Generierung. Bitte versuchen Sie es erneut.');\n  }\n};\n\n/**\n * Generate a training certificate using AI\n */\nexport const generateCertificateText = async (\n  trainingTitle: string, \n  userName: string, \n  completionDate: string,\n  score: number\n): Promise<string> => {\n  const prompt = `\nErstelle einen professionellen Zertifikatstext für eine abgeschlossene Unternehmensschulung.\n\n**Details:**\n- Schulung: ${trainingTitle}\n- Teilnehmer: ${userName}\n- Abschlussdatum: ${completionDate}\n- Ergebnis: ${score}%\n\n**Anforderungen:**\n- Professioneller, offizieller Ton\n- Deutsche Sprache\n- Gratulation zur erfolgreichen Teilnahme\n- Bestätigung der erworbenen Kenntnisse\n- Verwende \"WorkyTime GmbH\" als ausstellendes Unternehmen\n\nErstelle einen strukturierten Zertifikatstext:`;\n\n  try {\n    const aiResponse = await getOpenAITextResponse([\n      {\n        role: 'system',\n        content: 'Du erstellst professionelle Zertifikatstexte für Unternehmensschulungen in deutscher Sprache.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ], { model: 'gpt-4o' });\n\n    return aiResponse.content;\n  } catch (error) {\n    console.error('Certificate Generation Error:', error);\n    \n    // Fallback certificate text\n    return `\nZERTIFIKAT\n\nHiermit wird bestätigt, dass\n\n${userName}\n\ndie Schulung \"${trainingTitle}\" erfolgreich abgeschlossen hat.\n\nAbschlussdatum: ${completionDate}\nErgebnis: ${score}%\n\nDiese Schulung vermittelte wichtige Kenntnisse und Fähigkeiten für den beruflichen Alltag.\n\nWorkyTime GmbH\nPersonalabteilung\n    `.trim();\n  }\n};\n\n/**\n * Generate email content for training notifications\n */\nexport const generateTrainingNotificationEmail = async (\n  type: 'NEW_TRAINING' | 'REMINDER' | 'DEADLINE_APPROACHING' | 'COMPLETED' | 'FAILED',\n  userName: string,\n  trainingTitle: string,\n  additionalInfo?: string\n): Promise<{ subject: string; body: string }> => {\n  let promptContext = '';\n  \n  switch (type) {\n    case 'NEW_TRAINING':\n      promptContext = 'eine neue Schulung ist verfügbar';\n      break;\n    case 'REMINDER':\n      promptContext = 'Erinnerung an eine nicht abgeschlossene Schulung';\n      break;\n    case 'DEADLINE_APPROACHING':\n      promptContext = 'die Deadline einer Schulung nähert sich';\n      break;\n    case 'COMPLETED':\n      promptContext = 'Gratulation zur abgeschlossenen Schulung';\n      break;\n    case 'FAILED':\n      promptContext = 'Information über nicht bestandene Schulung';\n      break;\n  }\n\n  const prompt = `\nErstelle eine professionelle E-Mail für ${promptContext}.\n\n**Details:**\n- Empfänger: ${userName}\n- Schulung: ${trainingTitle}\n- Zusätzliche Info: ${additionalInfo || 'Keine'}\n- Absender: WorkyTime GmbH Personalabteilung\n\n**Anforderungen:**\n- Professioneller aber freundlicher Ton\n- Deutsche Sprache\n- Passende Betreffzeile\n- Strukturierte E-Mail mit klaren Handlungsaufforderungen\n- Link zur WorkyTime App erwähnen\n\nErstelle Betreff und E-Mail-Text:`;\n\n  try {\n    const aiResponse = await getOpenAITextResponse([\n      {\n        role: 'system',\n        content: 'Du erstellst professionelle E-Mail-Benachrichtigungen für Unternehmensschulungen in deutscher Sprache.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ], { model: 'gpt-4o' });\n    \n    const response = aiResponse.content;\n\n    // Extract subject and body from response\n    const lines = response.split('\\n');\n    const subjectLine = lines.find((line: string) => line.toLowerCase().includes('betreff:') || line.toLowerCase().includes('subject:'));\n    const subject = subjectLine ? subjectLine.replace(/betreff:|subject:/i, '').trim() : `WorkyTime: ${trainingTitle}`;\n    \n    const bodyStart = response.indexOf('\\n\\n') > 0 ? response.indexOf('\\n\\n') + 2 : 0;\n    const body = response.substring(bodyStart).trim();\n\n    return { subject, body };\n  } catch (error) {\n    console.error('Email Generation Error:', error);\n    \n    // Fallback email content\n    const fallbackSubjects = {\n      NEW_TRAINING: `Neue Schulung verfügbar: ${trainingTitle}`,\n      REMINDER: `Erinnerung: Schulung \"${trainingTitle}\" noch nicht abgeschlossen`,\n      DEADLINE_APPROACHING: `Deadline nähert sich: ${trainingTitle}`,\n      COMPLETED: `Glückwunsch! Schulung \"${trainingTitle}\" erfolgreich abgeschlossen`,\n      FAILED: `Schulung \"${trainingTitle}\" - Wiederholung erforderlich`\n    };\n\n    return {\n      subject: fallbackSubjects[type],\n      body: `Hallo ${userName},\\n\\nbezüglich der Schulung \"${trainingTitle}\" gibt es eine wichtige Information.\\n\\nBitte loggen Sie sich in die WorkyTime App ein, um weitere Details zu erfahren.\\n\\nBeste Grüße\\nIhr WorkyTime Team`\n    };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}