{"version":3,"file":"static/js/320.5aeeeb10.chunk.js","mappings":"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","sources":["api/openai.ts","api/chat-service.ts","api/training-ai.ts"],"sourcesContent":["/*\nIMPORTANT NOTICE: DO NOT REMOVE\nThis is a custom client for the OpenAI API. You may update this service, but you should not need to.\n\nvalid model names:\ngpt-4.1-2025-04-14\no4-mini-2025-04-16\ngpt-4o-2024-11-20\n*/\nimport OpenAI from \"openai\";\n\nexport const getOpenAIClient = () => {\n  const apiKey = process.env.EXPO_PUBLIC_VIBECODE_OPENAI_API_KEY;\n  if (!apiKey) {\n    console.warn(\"OpenAI API key not found in environment variables\");\n  }\n  return new OpenAI({\n    apiKey: apiKey,\n  });\n};","/*\nIMPORTANT NOTICE: DO NOT REMOVE\n./src/api/chat-service.ts\nIf the user wants to use AI to generate text, answer questions, or analyze images you can use the functions defined in this file to communicate with the OpenAI, Anthropic, and Grok APIs.\n*/\nimport { AIMessage, AIRequestOptions, AIResponse } from \"../types/ai\";\nimport { getAnthropicClient } from \"./anthropic\";\nimport { getOpenAIClient } from \"./openai\";\nimport { getGrokClient } from \"./grok\";\n\n/**\n * Get a text response from Anthropic\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getAnthropicTextResponse = async (\n  messages: AIMessage[],\n  options?: AIRequestOptions,\n): Promise<AIResponse> => {\n  try {\n    const client = getAnthropicClient();\n    const defaultModel = \"claude-3-5-sonnet-20240620\";\n\n    const response = await client.messages.create({\n      model: options?.model || defaultModel,\n      messages: messages.map((msg) => ({\n        role: msg.role === \"assistant\" ? \"assistant\" : \"user\",\n        content: msg.content,\n      })),\n      max_tokens: options?.maxTokens || 2048,\n      temperature: options?.temperature || 0.7,\n    });\n\n    // Handle content blocks from the response\n    const content = response.content.reduce((acc, block) => {\n      if (\"text\" in block) {\n        return acc + block.text;\n      }\n      return acc;\n    }, \"\");\n\n    return {\n      content,\n      usage: {\n        promptTokens: response.usage?.input_tokens || 0,\n        completionTokens: response.usage?.output_tokens || 0,\n        totalTokens: (response.usage?.input_tokens || 0) + (response.usage?.output_tokens || 0),\n      },\n    };\n  } catch (error) {\n    console.error(\"Anthropic API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from Anthropic\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getAnthropicChatResponse = async (prompt: string): Promise<AIResponse> => {\n  return await getAnthropicTextResponse([{ role: \"user\", content: prompt }]);\n};\n\n/**\n * Get a text response from OpenAI\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getOpenAITextResponse = async (messages: AIMessage[], options?: AIRequestOptions): Promise<AIResponse> => {\n  try {\n    const client = getOpenAIClient();\n    const defaultModel = \"gpt-4o\"; //accepts images as well, use this for image analysis\n\n    const response = await client.chat.completions.create({\n      model: options?.model || defaultModel,\n      messages: messages,\n      temperature: options?.temperature ?? 0.7,\n      max_tokens: options?.maxTokens || 2048,\n    });\n\n    return {\n      content: response.choices[0]?.message?.content || \"\",\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      },\n    };\n  } catch (error) {\n    console.error(\"OpenAI API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from OpenAI\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getOpenAIChatResponse = async (prompt: string): Promise<AIResponse> => {\n  return await getOpenAITextResponse([{ role: \"user\", content: prompt }]);\n};\n\n/**\n * Get a text response from Grok\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getGrokTextResponse = async (messages: AIMessage[], options?: AIRequestOptions): Promise<AIResponse> => {\n  try {\n    const client = getGrokClient();\n    const defaultModel = \"grok-3-beta\";\n\n    const response = await client.chat.completions.create({\n      model: options?.model || defaultModel,\n      messages: messages,\n      temperature: options?.temperature ?? 0.7,\n      max_tokens: options?.maxTokens || 2048,\n    });\n\n    return {\n      content: response.choices[0]?.message?.content || \"\",\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      },\n    };\n  } catch (error) {\n    console.error(\"Grok API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from Grok\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getGrokChatResponse = async (prompt: string): Promise<AIResponse> => {\n  return await getGrokTextResponse([{ role: \"user\", content: prompt }]);\n};","import { getOpenAITextResponse } from './chat-service';\nimport { AIGenerationRequest, AIGeneratedContent } from '../types/training';\n\n/**\n * AI Training Content Generator\n * Uses OpenAI GPT-4o to generate training content, lessons, and quizzes\n */\n\nexport const generateTrainingContent = async (request: AIGenerationRequest): Promise<AIGeneratedContent> => {\n  const prompt = `\nDu bist ein Experte für Unternehmensschulungen und E-Learning. Erstelle eine strukturierte Schulung basierend auf folgenden Vorgaben:\n\n**Schulungsanfrage:**\n- Thema: ${request.topic}\n- Beschreibung: ${request.description}\n- Zielgruppe: ${request.targetAudience}\n- Dauer: ${request.duration} Minuten\n- Schwierigkeitsgrad: ${request.difficulty}\n- Anzahl Lektionen: ${request.lessonCount}\n- Quiz einschließen: ${request.includeQuiz ? 'Ja' : 'Nein'}\n\n**Aufgabe:**\nErstelle eine vollständige Schulung mit folgender Struktur:\n\n1. **Schulungstitel**: Prägnanter, professioneller Titel\n2. **Beschreibung**: Umfassende Beschreibung der Schulung (2-3 Sätze)\n3. **Lektionen**: ${request.lessonCount} Lektionen mit jeweils:\n   - Titel der Lektion\n   - Kurze Beschreibung (1-2 Sätze)\n   - Detaillierter Inhalt (strukturiert mit Überschriften, Aufzählungen, praktischen Beispielen)\n   ${request.includeQuiz ? '- Quiz mit 2-3 Multiple-Choice-Fragen pro Lektion\\n   - Jede Frage mit 4 Antwortmöglichkeiten, korrekter Antwort und Erklärung' : ''}\n\n${request.includeQuiz ? `4. **Abschlussprüfung**: \n   - 2-3 zusammenfassende Fragen über alle Lektionen\n   - Bestehensgrenze: 70%` : ''}\n\n**Wichtige Anforderungen:**\n- Inhalt muss praxisnah und unternehmensrelevant sein\n- Verwende klare, verständliche Sprache\n- Strukturiere den Inhalt logisch und aufbauend\n- Beispiele und Fallstudien einbauen\n- Bei ${request.difficulty === 'BEGINNER' ? 'Anfänger: Grundlagen erklären' : request.difficulty === 'INTERMEDIATE' ? 'Fortgeschritten: Vertiefte Kenntnisse vermitteln' : 'Experte: Spezialisiertes Fachwissen'}\n\n**Antwortformat:**\nAntworte ausschließlich in folgendem JSON-Format:\n\n{\n  \"title\": \"Schulungstitel\",\n  \"description\": \"Schulungsbeschreibung\",\n  \"lessons\": [\n    {\n      \"title\": \"Lektionstitel\",\n      \"description\": \"Lektionsbeschreibung\",\n      \"content\": \"Detaillierter Lektionsinhalt mit Markdown-Formatierung\",\n      ${request.includeQuiz ? `\"quiz\": {\n        \"questions\": [\n          {\n            \"question\": \"Frage?\",\n            \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n            \"correctAnswer\": 0,\n            \"explanation\": \"Erklärung der korrekten Antwort\"\n          }\n        ],\n        \"passingScore\": 80\n      }` : ''}\n    }\n  ]${request.includeQuiz ? `,\n  \"finalQuiz\": {\n    \"questions\": [\n      {\n        \"question\": \"Abschlussfrage?\",\n        \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n        \"correctAnswer\": 0,\n        \"explanation\": \"Erklärung\"\n      }\n    ],\n    \"passingScore\": 70\n  }` : ''}\n}\n\nErstelle jetzt die Schulung:`;\n\n  try {\n    const aiResponse = await getOpenAITextResponse([\n      {\n        role: 'system',\n        content: 'Du bist ein Experte für Unternehmensschulungen und E-Learning-Content. Erstelle hochwertige, strukturierte Schulungsinhalte in deutscher Sprache.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ], { model: 'gpt-4o' });\n    \n    const response = aiResponse.content;\n\n    // Parse the AI response\n    let parsedContent: AIGeneratedContent;\n    \n    try {\n      // Extract JSON from response (in case there's additional text)\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      const jsonString = jsonMatch ? jsonMatch[0] : response;\n      parsedContent = JSON.parse(jsonString);\n    } catch (parseError) {\n      // Fallback: create structured content from text response\n      parsedContent = {\n        title: `${request.topic} - Umfassende Schulung`,\n        description: `Eine strukturierte Schulung zu ${request.topic} für ${request.targetAudience}. Diese Schulung vermittelt alle wichtigen Grundlagen und praktischen Anwendungen.`,\n        lessons: Array.from({ length: request.lessonCount }, (_, i) => ({\n          title: `Lektion ${i + 1}: ${request.topic} Grundlagen`,\n          description: `In dieser Lektion lernen Sie die wichtigsten Aspekte von ${request.topic} kennen.`,\n          content: `# Lektion ${i + 1}: ${request.topic}\\n\\n${response.substring(0, 500)}...`,\n          quiz: request.includeQuiz ? {\n            questions: [\n              {\n                question: `Was ist das wichtigste Prinzip bei ${request.topic}?`,\n                options: [\n                  'Sicherheit und Compliance',\n                  'Effizienz',\n                  'Kostenoptimierung',\n                  'Alle genannten Punkte'\n                ],\n                correctAnswer: 3,\n                explanation: `Bei ${request.topic} sind alle Aspekte wichtig, aber besonders die Balance zwischen Sicherheit, Effizienz und Kosten.`\n              }\n            ],\n            passingScore: 80\n          } : undefined\n        })),\n        finalQuiz: request.includeQuiz ? {\n          questions: [\n            {\n              question: `Was haben Sie in dieser ${request.topic} Schulung gelernt?`,\n              options: [\n                'Grundlagen und Best Practices',\n                'Nur theoretisches Wissen',\n                'Veraltete Methoden',\n                'Nichts Neues'\n              ],\n              correctAnswer: 0,\n              explanation: 'Diese Schulung vermittelt sowohl theoretische Grundlagen als auch praktische Best Practices.'\n            }\n          ],\n          passingScore: 70\n        } : undefined\n      };\n    }\n\n    // Validate the generated content\n    if (!parsedContent.title || !parsedContent.description || !parsedContent.lessons) {\n      throw new Error('Invalid AI response structure');\n    }\n\n    return parsedContent;\n  } catch (error) {\n    console.error('AI Training Generation Error:', error);\n    throw new Error('Fehler bei der KI-Generierung. Bitte versuchen Sie es erneut.');\n  }\n};\n\n/**\n * Generate a training certificate using AI\n */\nexport const generateCertificateText = async (\n  trainingTitle: string, \n  userName: string, \n  completionDate: string,\n  score: number\n): Promise<string> => {\n  const prompt = `\nErstelle einen professionellen Zertifikatstext für eine abgeschlossene Unternehmensschulung.\n\n**Details:**\n- Schulung: ${trainingTitle}\n- Teilnehmer: ${userName}\n- Abschlussdatum: ${completionDate}\n- Ergebnis: ${score}%\n\n**Anforderungen:**\n- Professioneller, offizieller Ton\n- Deutsche Sprache\n- Gratulation zur erfolgreichen Teilnahme\n- Bestätigung der erworbenen Kenntnisse\n- Verwende \"WorkyTime GmbH\" als ausstellendes Unternehmen\n\nErstelle einen strukturierten Zertifikatstext:`;\n\n  try {\n    const aiResponse = await getOpenAITextResponse([\n      {\n        role: 'system',\n        content: 'Du erstellst professionelle Zertifikatstexte für Unternehmensschulungen in deutscher Sprache.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ], { model: 'gpt-4o' });\n\n    return aiResponse.content;\n  } catch (error) {\n    console.error('Certificate Generation Error:', error);\n    \n    // Fallback certificate text\n    return `\nZERTIFIKAT\n\nHiermit wird bestätigt, dass\n\n${userName}\n\ndie Schulung \"${trainingTitle}\" erfolgreich abgeschlossen hat.\n\nAbschlussdatum: ${completionDate}\nErgebnis: ${score}%\n\nDiese Schulung vermittelte wichtige Kenntnisse und Fähigkeiten für den beruflichen Alltag.\n\nWorkyTime GmbH\nPersonalabteilung\n    `.trim();\n  }\n};\n\n/**\n * Generate email content for training notifications\n */\nexport const generateTrainingNotificationEmail = async (\n  type: 'NEW_TRAINING' | 'REMINDER' | 'DEADLINE_APPROACHING' | 'COMPLETED' | 'FAILED',\n  userName: string,\n  trainingTitle: string,\n  additionalInfo?: string\n): Promise<{ subject: string; body: string }> => {\n  let promptContext = '';\n  \n  switch (type) {\n    case 'NEW_TRAINING':\n      promptContext = 'eine neue Schulung ist verfügbar';\n      break;\n    case 'REMINDER':\n      promptContext = 'Erinnerung an eine nicht abgeschlossene Schulung';\n      break;\n    case 'DEADLINE_APPROACHING':\n      promptContext = 'die Deadline einer Schulung nähert sich';\n      break;\n    case 'COMPLETED':\n      promptContext = 'Gratulation zur abgeschlossenen Schulung';\n      break;\n    case 'FAILED':\n      promptContext = 'Information über nicht bestandene Schulung';\n      break;\n  }\n\n  const prompt = `\nErstelle eine professionelle E-Mail für ${promptContext}.\n\n**Details:**\n- Empfänger: ${userName}\n- Schulung: ${trainingTitle}\n- Zusätzliche Info: ${additionalInfo || 'Keine'}\n- Absender: WorkyTime GmbH Personalabteilung\n\n**Anforderungen:**\n- Professioneller aber freundlicher Ton\n- Deutsche Sprache\n- Passende Betreffzeile\n- Strukturierte E-Mail mit klaren Handlungsaufforderungen\n- Link zur WorkyTime App erwähnen\n\nErstelle Betreff und E-Mail-Text:`;\n\n  try {\n    const aiResponse = await getOpenAITextResponse([\n      {\n        role: 'system',\n        content: 'Du erstellst professionelle E-Mail-Benachrichtigungen für Unternehmensschulungen in deutscher Sprache.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ], { model: 'gpt-4o' });\n    \n    const response = aiResponse.content;\n\n    // Extract subject and body from response\n    const lines = response.split('\\n');\n    const subjectLine = lines.find((line: string) => line.toLowerCase().includes('betreff:') || line.toLowerCase().includes('subject:'));\n    const subject = subjectLine ? subjectLine.replace(/betreff:|subject:/i, '').trim() : `WorkyTime: ${trainingTitle}`;\n    \n    const bodyStart = response.indexOf('\\n\\n') > 0 ? response.indexOf('\\n\\n') + 2 : 0;\n    const body = response.substring(bodyStart).trim();\n\n    return { subject, body };\n  } catch (error) {\n    console.error('Email Generation Error:', error);\n    \n    // Fallback email content\n    const fallbackSubjects = {\n      NEW_TRAINING: `Neue Schulung verfügbar: ${trainingTitle}`,\n      REMINDER: `Erinnerung: Schulung \"${trainingTitle}\" noch nicht abgeschlossen`,\n      DEADLINE_APPROACHING: `Deadline nähert sich: ${trainingTitle}`,\n      COMPLETED: `Glückwunsch! Schulung \"${trainingTitle}\" erfolgreich abgeschlossen`,\n      FAILED: `Schulung \"${trainingTitle}\" - Wiederholung erforderlich`\n    };\n\n    return {\n      subject: fallbackSubjects[type],\n      body: `Hallo ${userName},\\n\\nbezüglich der Schulung \"${trainingTitle}\" gibt es eine wichtige Information.\\n\\nBitte loggen Sie sich in die WorkyTime App ein, um weitere Details zu erfahren.\\n\\nBeste Grüße\\nIhr WorkyTime Team`\n    };\n  }\n};"],"names":["getOpenAITextResponse","async","messages","options","_options$temperature","_response$choices$","_response$choices$$me","_response$usage5","_response$usage6","_response$usage7","client","getOpenAIClient","apiKey","process","EXPO_PUBLIC_VIBECODE_OPENAI_API_KEY","console","warn","OpenAI","defaultModel","response","chat","completions","create","model","temperature","max_tokens","maxTokens","content","choices","message","usage","promptTokens","prompt_tokens","completionTokens","completion_tokens","totalTokens","total_tokens","error","generateTrainingContent","prompt","concat","request","topic","description","targetAudience","duration","difficulty","lessonCount","includeQuiz","role","parsedContent","jsonMatch","match","jsonString","JSON","parse","parseError","title","lessons","Array","from","length","_","i","substring","quiz","questions","question","correctAnswer","explanation","passingScore","undefined","finalQuiz","Error"],"sourceRoot":""}