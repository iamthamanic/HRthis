{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock data - simulating data from Timerecording.de API\nconst generateMockTimeRecords = userId => {\n  const records = [];\n  const today = new Date();\n\n  // Generate records for the last 30 days\n  for (let i = 29; i >= 0; i--) {\n    const date = new Date(today);\n    date.setDate(date.getDate() - i);\n\n    // Skip weekends\n    if (date.getDay() === 0 || date.getDay() === 6) continue;\n    const timeIn = new Date(date);\n    timeIn.setHours(8 + Math.floor(Math.random() * 2), Math.floor(Math.random() * 60));\n    const timeOut = new Date(timeIn);\n    timeOut.setHours(timeIn.getHours() + 8 + Math.floor(Math.random() * 2), Math.floor(Math.random() * 60));\n    const breakMinutes = 30 + Math.floor(Math.random() * 30);\n    const totalHours = (timeOut.getTime() - timeIn.getTime()) / (1000 * 60 * 60) - breakMinutes / 60;\n    records.push({\n      id: `${userId}-${date.toISOString().split('T')[0]}`,\n      userId,\n      date: date.toISOString().split('T')[0],\n      timeIn: timeIn.toTimeString().split(' ')[0].substring(0, 5),\n      timeOut: timeOut.toTimeString().split(' ')[0].substring(0, 5),\n      breakMinutes,\n      totalHours: Math.round(totalHours * 100) / 100\n    });\n  }\n  return records;\n};\nexport const useTimeRecordsStore = create()(persist((set, get) => ({\n  timeRecords: [],\n  isLoading: false,\n  getTimeRecords: userId => {\n    let records = get().timeRecords.filter(record => record.userId === userId);\n\n    // If no records exist for this user, generate mock data\n    if (records.length === 0) {\n      const mockRecords = generateMockTimeRecords(userId);\n      set(state => ({\n        timeRecords: [...state.timeRecords, ...mockRecords]\n      }));\n      records = mockRecords;\n    }\n    return records.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  },\n  getTimeRecordsForPeriod: (userId, startDate, endDate) => {\n    const allRecords = get().getTimeRecords(userId);\n    return allRecords.filter(record => record.date >= startDate && record.date <= endDate);\n  },\n  getMonthlyStats: (userId, month, year) => {\n    const allRecords = get().getTimeRecords(userId);\n    const monthRecords = allRecords.filter(record => {\n      const recordDate = new Date(record.date);\n      return recordDate.getMonth() === month && recordDate.getFullYear() === year;\n    });\n    const totalHours = monthRecords.reduce((sum, record) => sum + record.totalHours, 0);\n    return {\n      totalHours,\n      totalDays: monthRecords.length\n    };\n  },\n  getWeeklyStats: userId => {\n    const today = new Date();\n    const weekStart = new Date(today);\n    weekStart.setDate(today.getDate() - today.getDay() + 1); // Monday\n    weekStart.setHours(0, 0, 0, 0);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekStart.getDate() + 6); // Sunday\n    weekEnd.setHours(23, 59, 59, 999);\n    const allRecords = get().getTimeRecords(userId);\n    const weekRecords = allRecords.filter(record => {\n      const recordDate = new Date(record.date);\n      return recordDate >= weekStart && recordDate <= weekEnd;\n    });\n    const totalHours = weekRecords.reduce((sum, record) => sum + record.totalHours, 0);\n    return {\n      totalHours,\n      totalDays: weekRecords.length\n    };\n  },\n  setTimeRecords: records => {\n    set({\n      timeRecords: records\n    });\n  }\n}), {\n  name: 'time-records-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    timeRecords: state.timeRecords\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","generateMockTimeRecords","userId","records","today","Date","i","date","setDate","getDate","getDay","timeIn","setHours","Math","floor","random","timeOut","getHours","breakMinutes","totalHours","getTime","push","id","toISOString","split","toTimeString","substring","round","useTimeRecordsStore","set","get","timeRecords","isLoading","getTimeRecords","filter","record","length","mockRecords","state","sort","a","b","getTimeRecordsForPeriod","startDate","endDate","allRecords","getMonthlyStats","month","year","monthRecords","recordDate","getMonth","getFullYear","reduce","sum","totalDays","getWeeklyStats","weekStart","weekEnd","weekRecords","setTimeRecords","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/timeRecords.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { TimeRecord } from '../types';\n\ninterface TimeRecordsState {\n  timeRecords: TimeRecord[];\n  isLoading: boolean;\n  getTimeRecords: (userId: string) => TimeRecord[];\n  getTimeRecordsForPeriod: (userId: string, startDate: string, endDate: string) => TimeRecord[];\n  getMonthlyStats: (userId: string, month: number, year: number) => { totalHours: number; totalDays: number };\n  getWeeklyStats: (userId: string) => { totalHours: number; totalDays: number };\n  setTimeRecords: (records: TimeRecord[]) => void;\n}\n\n// Mock data - simulating data from Timerecording.de API\nconst generateMockTimeRecords = (userId: string): TimeRecord[] => {\n  const records: TimeRecord[] = [];\n  const today = new Date();\n  \n  // Generate records for the last 30 days\n  for (let i = 29; i >= 0; i--) {\n    const date = new Date(today);\n    date.setDate(date.getDate() - i);\n    \n    // Skip weekends\n    if (date.getDay() === 0 || date.getDay() === 6) continue;\n    \n    const timeIn = new Date(date);\n    timeIn.setHours(8 + Math.floor(Math.random() * 2), Math.floor(Math.random() * 60));\n    \n    const timeOut = new Date(timeIn);\n    timeOut.setHours(timeIn.getHours() + 8 + Math.floor(Math.random() * 2), Math.floor(Math.random() * 60));\n    \n    const breakMinutes = 30 + Math.floor(Math.random() * 30);\n    const totalHours = (timeOut.getTime() - timeIn.getTime()) / (1000 * 60 * 60) - (breakMinutes / 60);\n    \n    records.push({\n      id: `${userId}-${date.toISOString().split('T')[0]}`,\n      userId,\n      date: date.toISOString().split('T')[0],\n      timeIn: timeIn.toTimeString().split(' ')[0].substring(0, 5),\n      timeOut: timeOut.toTimeString().split(' ')[0].substring(0, 5),\n      breakMinutes,\n      totalHours: Math.round(totalHours * 100) / 100\n    });\n  }\n  \n  return records;\n};\n\nexport const useTimeRecordsStore = create<TimeRecordsState>()(\n  persist(\n    (set, get) => ({\n      timeRecords: [],\n      isLoading: false,\n\n      getTimeRecords: (userId: string) => {\n        let records = get().timeRecords.filter(record => record.userId === userId);\n        \n        // If no records exist for this user, generate mock data\n        if (records.length === 0) {\n          const mockRecords = generateMockTimeRecords(userId);\n          set(state => ({\n            timeRecords: [...state.timeRecords, ...mockRecords]\n          }));\n          records = mockRecords;\n        }\n        \n        return records.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n      },\n\n      getTimeRecordsForPeriod: (userId: string, startDate: string, endDate: string) => {\n        const allRecords = get().getTimeRecords(userId);\n        return allRecords.filter(record => \n          record.date >= startDate && record.date <= endDate\n        );\n      },\n\n      getMonthlyStats: (userId: string, month: number, year: number) => {\n        const allRecords = get().getTimeRecords(userId);\n        const monthRecords = allRecords.filter(record => {\n          const recordDate = new Date(record.date);\n          return recordDate.getMonth() === month && recordDate.getFullYear() === year;\n        });\n        \n        const totalHours = monthRecords.reduce((sum, record) => sum + record.totalHours, 0);\n        return {\n          totalHours,\n          totalDays: monthRecords.length\n        };\n      },\n\n      getWeeklyStats: (userId: string) => {\n        const today = new Date();\n        const weekStart = new Date(today);\n        weekStart.setDate(today.getDate() - today.getDay() + 1); // Monday\n        weekStart.setHours(0, 0, 0, 0);\n        \n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekStart.getDate() + 6); // Sunday\n        weekEnd.setHours(23, 59, 59, 999);\n        \n        const allRecords = get().getTimeRecords(userId);\n        const weekRecords = allRecords.filter(record => {\n          const recordDate = new Date(record.date);\n          return recordDate >= weekStart && recordDate <= weekEnd;\n        });\n        \n        const totalHours = weekRecords.reduce((sum, record) => sum + record.totalHours, 0);\n        return {\n          totalHours,\n          totalDays: weekRecords.length\n        };\n      },\n\n      setTimeRecords: (records: TimeRecord[]) => {\n        set({ timeRecords: records });\n      }\n    }),\n    {\n      name: 'time-records-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        timeRecords: state.timeRecords \n      }),\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}