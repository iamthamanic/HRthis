{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { TrainingCategory } from '../types/learning';\n\n// Level configuration\nconst LEVEL_CONFIGS = [{\n  level: 1,\n  title: \"Newcomer\",\n  xp: 0\n}, {\n  level: 2,\n  title: \"Beginner\",\n  xp: 50\n}, {\n  level: 3,\n  title: \"Schulungs-Kid\",\n  xp: 150\n}, {\n  level: 4,\n  title: \"Knowledge Seeker\",\n  xp: 300\n}, {\n  level: 5,\n  title: \"Certified Champ\",\n  xp: 500\n}, {\n  level: 6,\n  title: \"Expert Learner\",\n  xp: 750\n}, {\n  level: 7,\n  title: \"Master Student\",\n  xp: 1000\n}, {\n  level: 8,\n  title: \"Team Brain\",\n  xp: 1500\n}, {\n  level: 9,\n  title: \"Wisdom Keeper\",\n  xp: 2000\n}, {\n  level: 10,\n  title: \"Legend\",\n  xp: 3000\n}];\n\n// Mock video content\nconst mockVideos = [{\n  id: 'video1',\n  url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n  title: 'Datenschutz Grundlagen',\n  description: 'Lernen Sie die wichtigsten DSGVO-Richtlinien kennen',\n  duration: 600,\n  category: TrainingCategory.COMPLIANCE,\n  transcription: {\n    id: 'trans1',\n    videoId: 'video1',\n    text: 'Willkommen zur Datenschutz-Schulung...',\n    segments: [{\n      start: 0,\n      end: 5,\n      text: 'Willkommen zur Datenschutz-Schulung.'\n    }, {\n      start: 5,\n      end: 10,\n      text: 'Heute lernen wir die Grundlagen der DSGVO.'\n    }],\n    language: 'de',\n    generatedAt: new Date()\n  }\n}, {\n  id: 'video2',\n  url: 'https://www.youtube.com/watch?v=abc123',\n  title: 'Arbeitssicherheit im BÃ¼ro',\n  description: 'Ergonomie und Sicherheit am Arbeitsplatz',\n  duration: 480,\n  category: TrainingCategory.MANDATORY\n}];\n\n// Mock test questions\nconst mockQuestions = {\n  'video1': [{\n    id: 'q1',\n    type: 'multiple-choice',\n    question: 'Was ist der Hauptzweck der DSGVO?',\n    options: ['Datenschutz fÃ¼r Unternehmen', 'Schutz personenbezogener Daten', 'Verkauf von Daten', 'Datenspeicherung'],\n    correctAnswer: 'Schutz personenbezogener Daten',\n    points: 10,\n    explanation: 'Die DSGVO schÃ¼tzt die personenbezogenen Daten von EU-BÃ¼rgern.'\n  }, {\n    id: 'q2',\n    type: 'multiple-choice',\n    question: 'Wie lange dÃ¼rfen personenbezogene Daten maximal gespeichert werden?',\n    options: ['Unbegrenzt', 'Nur solange notwendig', '10 Jahre', '1 Jahr'],\n    correctAnswer: 'Nur solange notwendig',\n    points: 10\n  }]\n};\n\n// Mock badges\nconst availableBadges = [{\n  id: 'perfect-score',\n  name: 'Perfektionist',\n  description: '100% in einem Test erreicht',\n  icon: 'ðŸŽ¯',\n  earnedAt: new Date(),\n  category: 'achievement',\n  rarity: 'rare'\n}, {\n  id: 'early-bird',\n  name: 'FrÃ¼haufsteher',\n  description: 'Erste Schulung vor 8 Uhr',\n  icon: 'ðŸŒ…',\n  earnedAt: new Date(),\n  category: 'special',\n  rarity: 'common'\n}, {\n  id: 'week-warrior',\n  name: 'Wochenheld',\n  description: '5 Schulungen in einer Woche',\n  icon: 'ðŸ’ª',\n  earnedAt: new Date(),\n  category: 'milestone',\n  rarity: 'epic'\n}];\n\n// Mock avatar accessories\nconst mockAccessories = [{\n  id: 'glasses1',\n  type: 'glasses',\n  name: 'Nerd-Brille',\n  imageUrl: '/avatars/glasses/nerd.png',\n  price: 100\n}, {\n  id: 'hat1',\n  type: 'hat',\n  name: 'Absolventenhut',\n  imageUrl: '/avatars/hats/graduation.png',\n  requiredLevel: 5\n}, {\n  id: 'effect1',\n  type: 'effect',\n  name: 'Goldener Schein',\n  imageUrl: '/avatars/effects/golden-glow.png',\n  price: 500\n}];\n\n// Mock shop items\nconst mockShopItems = [{\n  id: 'shop1',\n  name: 'XP Boost (1 Tag)',\n  description: 'Verdoppelt deine XP fÃ¼r 24 Stunden',\n  type: 'boost',\n  price: 200,\n  imageUrl: '/shop/xp-boost.png',\n  available: true\n}, {\n  id: 'shop2',\n  name: 'LegendÃ¤re Lootbox',\n  description: 'EnthÃ¤lt garantiert ein episches oder legendÃ¤res Item',\n  type: 'special',\n  price: 1000,\n  imageUrl: '/shop/legendary-box.png',\n  available: true,\n  limitedTime: true,\n  expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n}];\nexport const useLearningStore = create()(persist((set, get) => ({\n  videos: mockVideos,\n  currentVideo: null,\n  userProgress: {},\n  testResults: [],\n  userStats: null,\n  userLevel: {\n    level: 1,\n    title: 'Newcomer',\n    xp: 0,\n    nextLevelXp: 50\n  },\n  userAvatar: {\n    id: 'avatar1',\n    userId: 'user1',\n    baseModel: 'default',\n    accessories: [],\n    badges: [],\n    level: 1,\n    title: 'Newcomer'\n  },\n  userBadges: [],\n  userCoins: 0,\n  shopItems: mockShopItems,\n  ownedItems: [],\n  activeEvents: [],\n  testQuestions: mockQuestions,\n  loadVideos: () => {\n    // In production, this would fetch from API\n    set({\n      videos: mockVideos\n    });\n  },\n  selectVideo: videoId => {\n    const video = get().videos.find(v => v.id === videoId);\n    set({\n      currentVideo: video || null\n    });\n  },\n  updateProgress: (videoId, watchedSeconds) => {\n    const progress = get().userProgress;\n    const video = get().videos.find(v => v.id === videoId);\n    if (!video) return;\n    const currentProgress = progress[videoId] || {\n      userId: 'user1',\n      videoId,\n      watchedSeconds: 0,\n      completed: false,\n      lastWatchedAt: new Date()\n    };\n    const newProgress = {\n      ...currentProgress,\n      watchedSeconds,\n      lastWatchedAt: new Date(),\n      completed: watchedSeconds >= video.duration * 0.9 // 90% watched = completed\n    };\n    set({\n      userProgress: {\n        ...progress,\n        [videoId]: newProgress\n      }\n    });\n\n    // Award XP for completion\n    if (newProgress.completed && !currentProgress.completed) {\n      get().addXP(50);\n      get().addCoins(10);\n    }\n  },\n  completeVideo: videoId => {\n    var _get$videos$find;\n    get().updateProgress(videoId, ((_get$videos$find = get().videos.find(v => v.id === videoId)) === null || _get$videos$find === void 0 ? void 0 : _get$videos$find.duration) || 0);\n  },\n  submitTestResult: result => {\n    set(state => ({\n      testResults: [...state.testResults, result]\n    }));\n\n    // Award XP and coins based on score\n    const baseXP = 100;\n    const xpMultiplier = result.score / 100;\n    const earnedXP = Math.floor(baseXP * xpMultiplier);\n    get().addXP(earnedXP);\n    get().addCoins(Math.floor(earnedXP / 5));\n\n    // Check for perfect score badge\n    if (result.score === 100) {\n      get().awardBadge('perfect-score');\n    }\n  },\n  calculateLevel: xp => {\n    let currentLevel = LEVEL_CONFIGS[0];\n    let nextLevel = LEVEL_CONFIGS[1];\n    for (let i = 0; i < LEVEL_CONFIGS.length; i++) {\n      if (xp >= LEVEL_CONFIGS[i].xp) {\n        currentLevel = LEVEL_CONFIGS[i];\n        nextLevel = LEVEL_CONFIGS[i + 1] || currentLevel;\n      }\n    }\n    return {\n      level: currentLevel.level,\n      title: currentLevel.title,\n      xp: xp,\n      nextLevelXp: nextLevel.xp\n    };\n  },\n  addXP: amount => {\n    const currentLevel = get().userLevel;\n    const newXP = ((currentLevel === null || currentLevel === void 0 ? void 0 : currentLevel.xp) || 0) + amount;\n    const newLevel = get().calculateLevel(newXP);\n    set({\n      userLevel: newLevel\n    });\n\n    // Update avatar level\n    set(state => ({\n      userAvatar: state.userAvatar ? {\n        ...state.userAvatar,\n        level: newLevel.level,\n        title: newLevel.title\n      } : null\n    }));\n  },\n  addCoins: amount => {\n    set(state => ({\n      userCoins: state.userCoins + amount\n    }));\n  },\n  awardBadge: badgeId => {\n    const badge = availableBadges.find(b => b.id === badgeId);\n    if (!badge) return;\n    const hasBadge = get().userBadges.some(b => b.id === badgeId);\n    if (!hasBadge) {\n      set(state => ({\n        userBadges: [...state.userBadges, badge]\n      }));\n    }\n  },\n  purchaseItem: itemId => {\n    const item = get().shopItems.find(i => i.id === itemId);\n    if (!item) return false;\n    if (get().userCoins < item.price) return false;\n    set(state => ({\n      userCoins: state.userCoins - item.price,\n      ownedItems: [...state.ownedItems, itemId]\n    }));\n    return true;\n  },\n  equipAccessory: accessoryId => {\n    const accessory = mockAccessories.find(a => a.id === accessoryId);\n    if (!accessory) return;\n    set(state => ({\n      userAvatar: state.userAvatar ? {\n        ...state.userAvatar,\n        accessories: [...state.userAvatar.accessories, accessory]\n      } : null\n    }));\n  },\n  getVideoQuestions: videoId => {\n    return get().testQuestions[videoId] || [];\n  },\n  getUserStatistics: userId => {\n    const progress = Object.values(get().userProgress);\n    const results = get().testResults;\n    const level = get().userLevel;\n    const completedTrainings = progress.filter(p => p.completed).length;\n    const perfectScores = results.filter(r => r.score === 100).length;\n    const totalWatchTime = progress.reduce((acc, p) => acc + p.watchedSeconds, 0);\n    const averageScore = results.length > 0 ? results.reduce((acc, r) => acc + r.score, 0) / results.length : 0;\n    return {\n      userId,\n      totalXP: (level === null || level === void 0 ? void 0 : level.xp) || 0,\n      totalCoins: get().userCoins,\n      completedTrainings,\n      perfectScores,\n      currentStreak: 0,\n      // TODO: Implement streak logic\n      badges: get().userBadges,\n      averageScore,\n      totalWatchTime\n    };\n  }\n}), {\n  name: 'learning-storage'\n}));","map":{"version":3,"names":["create","persist","TrainingCategory","LEVEL_CONFIGS","level","title","xp","mockVideos","id","url","description","duration","category","COMPLIANCE","transcription","videoId","text","segments","start","end","language","generatedAt","Date","MANDATORY","mockQuestions","type","question","options","correctAnswer","points","explanation","availableBadges","name","icon","earnedAt","rarity","mockAccessories","imageUrl","price","requiredLevel","mockShopItems","available","limitedTime","expiresAt","now","useLearningStore","set","get","videos","currentVideo","userProgress","testResults","userStats","userLevel","nextLevelXp","userAvatar","userId","baseModel","accessories","badges","userBadges","userCoins","shopItems","ownedItems","activeEvents","testQuestions","loadVideos","selectVideo","video","find","v","updateProgress","watchedSeconds","progress","currentProgress","completed","lastWatchedAt","newProgress","addXP","addCoins","completeVideo","_get$videos$find","submitTestResult","result","state","baseXP","xpMultiplier","score","earnedXP","Math","floor","awardBadge","calculateLevel","currentLevel","nextLevel","i","length","amount","newXP","newLevel","badgeId","badge","b","hasBadge","some","purchaseItem","itemId","item","equipAccessory","accessoryId","accessory","a","getVideoQuestions","getUserStatistics","Object","values","results","completedTrainings","filter","p","perfectScores","r","totalWatchTime","reduce","acc","averageScore","totalXP","totalCoins","currentStreak"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/learning.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { \n  VideoContent, \n  LearningProgress, \n  TestResult, \n  UserLevel, \n  Avatar, \n  Badge, \n  TrainingStatistics,\n  LevelConfig,\n  TrainingCategory,\n  TestQuestion,\n  AvatarAccessory,\n  ShopItem,\n  LearningEvent\n} from '../types/learning';\n\n// Level configuration\nconst LEVEL_CONFIGS: LevelConfig[] = [\n  { level: 1, title: \"Newcomer\", xp: 0 },\n  { level: 2, title: \"Beginner\", xp: 50 },\n  { level: 3, title: \"Schulungs-Kid\", xp: 150 },\n  { level: 4, title: \"Knowledge Seeker\", xp: 300 },\n  { level: 5, title: \"Certified Champ\", xp: 500 },\n  { level: 6, title: \"Expert Learner\", xp: 750 },\n  { level: 7, title: \"Master Student\", xp: 1000 },\n  { level: 8, title: \"Team Brain\", xp: 1500 },\n  { level: 9, title: \"Wisdom Keeper\", xp: 2000 },\n  { level: 10, title: \"Legend\", xp: 3000 }\n];\n\n// Mock video content\nconst mockVideos: VideoContent[] = [\n  {\n    id: 'video1',\n    url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n    title: 'Datenschutz Grundlagen',\n    description: 'Lernen Sie die wichtigsten DSGVO-Richtlinien kennen',\n    duration: 600,\n    category: TrainingCategory.COMPLIANCE,\n    transcription: {\n      id: 'trans1',\n      videoId: 'video1',\n      text: 'Willkommen zur Datenschutz-Schulung...',\n      segments: [\n        { start: 0, end: 5, text: 'Willkommen zur Datenschutz-Schulung.' },\n        { start: 5, end: 10, text: 'Heute lernen wir die Grundlagen der DSGVO.' }\n      ],\n      language: 'de',\n      generatedAt: new Date()\n    }\n  },\n  {\n    id: 'video2',\n    url: 'https://www.youtube.com/watch?v=abc123',\n    title: 'Arbeitssicherheit im BÃ¼ro',\n    description: 'Ergonomie und Sicherheit am Arbeitsplatz',\n    duration: 480,\n    category: TrainingCategory.MANDATORY\n  }\n];\n\n// Mock test questions\nconst mockQuestions: Record<string, TestQuestion[]> = {\n  'video1': [\n    {\n      id: 'q1',\n      type: 'multiple-choice',\n      question: 'Was ist der Hauptzweck der DSGVO?',\n      options: [\n        'Datenschutz fÃ¼r Unternehmen',\n        'Schutz personenbezogener Daten',\n        'Verkauf von Daten',\n        'Datenspeicherung'\n      ],\n      correctAnswer: 'Schutz personenbezogener Daten',\n      points: 10,\n      explanation: 'Die DSGVO schÃ¼tzt die personenbezogenen Daten von EU-BÃ¼rgern.'\n    },\n    {\n      id: 'q2',\n      type: 'multiple-choice',\n      question: 'Wie lange dÃ¼rfen personenbezogene Daten maximal gespeichert werden?',\n      options: [\n        'Unbegrenzt',\n        'Nur solange notwendig',\n        '10 Jahre',\n        '1 Jahr'\n      ],\n      correctAnswer: 'Nur solange notwendig',\n      points: 10\n    }\n  ]\n};\n\n// Mock badges\nconst availableBadges: Badge[] = [\n  {\n    id: 'perfect-score',\n    name: 'Perfektionist',\n    description: '100% in einem Test erreicht',\n    icon: 'ðŸŽ¯',\n    earnedAt: new Date(),\n    category: 'achievement',\n    rarity: 'rare'\n  },\n  {\n    id: 'early-bird',\n    name: 'FrÃ¼haufsteher',\n    description: 'Erste Schulung vor 8 Uhr',\n    icon: 'ðŸŒ…',\n    earnedAt: new Date(),\n    category: 'special',\n    rarity: 'common'\n  },\n  {\n    id: 'week-warrior',\n    name: 'Wochenheld',\n    description: '5 Schulungen in einer Woche',\n    icon: 'ðŸ’ª',\n    earnedAt: new Date(),\n    category: 'milestone',\n    rarity: 'epic'\n  }\n];\n\n// Mock avatar accessories\nconst mockAccessories: AvatarAccessory[] = [\n  {\n    id: 'glasses1',\n    type: 'glasses',\n    name: 'Nerd-Brille',\n    imageUrl: '/avatars/glasses/nerd.png',\n    price: 100\n  },\n  {\n    id: 'hat1',\n    type: 'hat',\n    name: 'Absolventenhut',\n    imageUrl: '/avatars/hats/graduation.png',\n    requiredLevel: 5\n  },\n  {\n    id: 'effect1',\n    type: 'effect',\n    name: 'Goldener Schein',\n    imageUrl: '/avatars/effects/golden-glow.png',\n    price: 500\n  }\n];\n\n// Mock shop items\nconst mockShopItems: ShopItem[] = [\n  {\n    id: 'shop1',\n    name: 'XP Boost (1 Tag)',\n    description: 'Verdoppelt deine XP fÃ¼r 24 Stunden',\n    type: 'boost',\n    price: 200,\n    imageUrl: '/shop/xp-boost.png',\n    available: true\n  },\n  {\n    id: 'shop2',\n    name: 'LegendÃ¤re Lootbox',\n    description: 'EnthÃ¤lt garantiert ein episches oder legendÃ¤res Item',\n    type: 'special',\n    price: 1000,\n    imageUrl: '/shop/legendary-box.png',\n    available: true,\n    limitedTime: true,\n    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n  }\n];\n\ninterface LearningState {\n  // Video content\n  videos: VideoContent[];\n  currentVideo: VideoContent | null;\n  \n  // User progress\n  userProgress: Record<string, LearningProgress>;\n  testResults: TestResult[];\n  \n  // Gamification\n  userStats: TrainingStatistics | null;\n  userLevel: UserLevel | null;\n  userAvatar: Avatar | null;\n  userBadges: Badge[];\n  userCoins: number;\n  \n  // Shop & Items\n  shopItems: ShopItem[];\n  ownedItems: string[];\n  \n  // Events\n  activeEvents: LearningEvent[];\n  \n  // Questions\n  testQuestions: Record<string, TestQuestion[]>;\n  \n  // Actions\n  loadVideos: () => void;\n  selectVideo: (videoId: string) => void;\n  updateProgress: (videoId: string, watchedSeconds: number) => void;\n  completeVideo: (videoId: string) => void;\n  submitTestResult: (result: TestResult) => void;\n  calculateLevel: (xp: number) => UserLevel;\n  addXP: (amount: number) => void;\n  addCoins: (amount: number) => void;\n  awardBadge: (badgeId: string) => void;\n  purchaseItem: (itemId: string) => boolean;\n  equipAccessory: (accessoryId: string) => void;\n  getVideoQuestions: (videoId: string) => TestQuestion[];\n  getUserStatistics: (userId: string) => TrainingStatistics;\n}\n\nexport const useLearningStore = create<LearningState>()(\n  persist(\n    (set, get) => ({\n      videos: mockVideos,\n      currentVideo: null,\n      userProgress: {},\n      testResults: [],\n      userStats: null,\n      userLevel: { level: 1, title: 'Newcomer', xp: 0, nextLevelXp: 50 },\n      userAvatar: {\n        id: 'avatar1',\n        userId: 'user1',\n        baseModel: 'default',\n        accessories: [],\n        badges: [],\n        level: 1,\n        title: 'Newcomer'\n      },\n      userBadges: [],\n      userCoins: 0,\n      shopItems: mockShopItems,\n      ownedItems: [],\n      activeEvents: [],\n      testQuestions: mockQuestions,\n\n      loadVideos: () => {\n        // In production, this would fetch from API\n        set({ videos: mockVideos });\n      },\n\n      selectVideo: (videoId: string) => {\n        const video = get().videos.find(v => v.id === videoId);\n        set({ currentVideo: video || null });\n      },\n\n      updateProgress: (videoId: string, watchedSeconds: number) => {\n        const progress = get().userProgress;\n        const video = get().videos.find(v => v.id === videoId);\n        \n        if (!video) return;\n\n        const currentProgress = progress[videoId] || {\n          userId: 'user1',\n          videoId,\n          watchedSeconds: 0,\n          completed: false,\n          lastWatchedAt: new Date()\n        };\n\n        const newProgress = {\n          ...currentProgress,\n          watchedSeconds,\n          lastWatchedAt: new Date(),\n          completed: watchedSeconds >= video.duration * 0.9 // 90% watched = completed\n        };\n\n        set({\n          userProgress: {\n            ...progress,\n            [videoId]: newProgress\n          }\n        });\n\n        // Award XP for completion\n        if (newProgress.completed && !currentProgress.completed) {\n          get().addXP(50);\n          get().addCoins(10);\n        }\n      },\n\n      completeVideo: (videoId: string) => {\n        get().updateProgress(videoId, get().videos.find(v => v.id === videoId)?.duration || 0);\n      },\n\n      submitTestResult: (result: TestResult) => {\n        set(state => ({\n          testResults: [...state.testResults, result]\n        }));\n\n        // Award XP and coins based on score\n        const baseXP = 100;\n        const xpMultiplier = result.score / 100;\n        const earnedXP = Math.floor(baseXP * xpMultiplier);\n        \n        get().addXP(earnedXP);\n        get().addCoins(Math.floor(earnedXP / 5));\n\n        // Check for perfect score badge\n        if (result.score === 100) {\n          get().awardBadge('perfect-score');\n        }\n      },\n\n      calculateLevel: (xp: number) => {\n        let currentLevel = LEVEL_CONFIGS[0];\n        let nextLevel = LEVEL_CONFIGS[1];\n\n        for (let i = 0; i < LEVEL_CONFIGS.length; i++) {\n          if (xp >= LEVEL_CONFIGS[i].xp) {\n            currentLevel = LEVEL_CONFIGS[i];\n            nextLevel = LEVEL_CONFIGS[i + 1] || currentLevel;\n          }\n        }\n\n        return {\n          level: currentLevel.level,\n          title: currentLevel.title,\n          xp: xp,\n          nextLevelXp: nextLevel.xp\n        };\n      },\n\n      addXP: (amount: number) => {\n        const currentLevel = get().userLevel;\n        const newXP = (currentLevel?.xp || 0) + amount;\n        const newLevel = get().calculateLevel(newXP);\n\n        set({\n          userLevel: newLevel\n        });\n\n        // Update avatar level\n        set(state => ({\n          userAvatar: state.userAvatar ? {\n            ...state.userAvatar,\n            level: newLevel.level,\n            title: newLevel.title\n          } : null\n        }));\n      },\n\n      addCoins: (amount: number) => {\n        set(state => ({\n          userCoins: state.userCoins + amount\n        }));\n      },\n\n      awardBadge: (badgeId: string) => {\n        const badge = availableBadges.find(b => b.id === badgeId);\n        if (!badge) return;\n\n        const hasBadge = get().userBadges.some(b => b.id === badgeId);\n        if (!hasBadge) {\n          set(state => ({\n            userBadges: [...state.userBadges, badge]\n          }));\n        }\n      },\n\n      purchaseItem: (itemId: string) => {\n        const item = get().shopItems.find(i => i.id === itemId);\n        if (!item) return false;\n\n        if (get().userCoins < item.price) return false;\n\n        set(state => ({\n          userCoins: state.userCoins - item.price,\n          ownedItems: [...state.ownedItems, itemId]\n        }));\n\n        return true;\n      },\n\n      equipAccessory: (accessoryId: string) => {\n        const accessory = mockAccessories.find(a => a.id === accessoryId);\n        if (!accessory) return;\n\n        set(state => ({\n          userAvatar: state.userAvatar ? {\n            ...state.userAvatar,\n            accessories: [...state.userAvatar.accessories, accessory]\n          } : null\n        }));\n      },\n\n      getVideoQuestions: (videoId: string) => {\n        return get().testQuestions[videoId] || [];\n      },\n\n      getUserStatistics: (userId: string) => {\n        const progress = Object.values(get().userProgress);\n        const results = get().testResults;\n        const level = get().userLevel;\n\n        const completedTrainings = progress.filter(p => p.completed).length;\n        const perfectScores = results.filter(r => r.score === 100).length;\n        const totalWatchTime = progress.reduce((acc, p) => acc + p.watchedSeconds, 0);\n        const averageScore = results.length > 0 \n          ? results.reduce((acc, r) => acc + r.score, 0) / results.length \n          : 0;\n\n        return {\n          userId,\n          totalXP: level?.xp || 0,\n          totalCoins: get().userCoins,\n          completedTrainings,\n          perfectScores,\n          currentStreak: 0, // TODO: Implement streak logic\n          badges: get().userBadges,\n          averageScore,\n          totalWatchTime\n        };\n      }\n    }),\n    {\n      name: 'learning-storage'\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}