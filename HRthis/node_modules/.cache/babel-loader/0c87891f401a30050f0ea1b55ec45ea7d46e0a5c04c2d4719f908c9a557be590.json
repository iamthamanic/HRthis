{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock team data\nconst mockTeams = [{\n  id: 'team1',\n  name: 'Entwicklung',\n  description: 'Software Development Team',\n  organizationId: 'org1',\n  leadIds: ['2'],\n  // Anna Admin is lead\n  memberIds: ['1', '2'],\n  // Max and Anna\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z'\n}, {\n  id: 'team2',\n  name: 'Marketing',\n  description: 'Marketing and Design Team',\n  organizationId: 'org1',\n  leadIds: ['2'],\n  // Anna Admin is lead\n  memberIds: ['2', '3'],\n  // Anna and Tom\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z'\n}, {\n  id: 'team3',\n  name: 'Quality Assurance',\n  description: 'Testing and QA Team',\n  organizationId: 'org1',\n  leadIds: ['2'],\n  // Anna Admin is lead\n  memberIds: ['2', '4'],\n  // Anna and Test User\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z'\n}];\nexport const useTeamsStore = create()(persist((set, get) => ({\n  teams: mockTeams,\n  isLoading: false,\n  error: null,\n  getAllTeams: () => {\n    return get().teams;\n  },\n  getTeamById: teamId => {\n    return get().teams.find(team => team.id === teamId);\n  },\n  getTeamsByUserId: userId => {\n    return get().teams.filter(team => team.memberIds.includes(userId));\n  },\n  getTeamsLedByUser: userId => {\n    return get().teams.filter(team => team.leadIds.includes(userId));\n  },\n  createTeam: async teamData => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const newTeam = {\n        ...teamData,\n        id: `team${Date.now()}`,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      set(state => ({\n        teams: [...state.teams, newTeam],\n        isLoading: false\n      }));\n      return newTeam;\n    } catch (error) {\n      set({\n        isLoading: false,\n        error: 'Failed to create team'\n      });\n      throw error;\n    }\n  },\n  updateTeam: async (teamId, updates) => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      set(state => ({\n        teams: state.teams.map(team => team.id === teamId ? {\n          ...team,\n          ...updates,\n          updatedAt: new Date().toISOString()\n        } : team),\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false,\n        error: 'Failed to update team'\n      });\n      throw error;\n    }\n  },\n  deleteTeam: async teamId => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      set(state => ({\n        teams: state.teams.filter(team => team.id !== teamId),\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false,\n        error: 'Failed to delete team'\n      });\n      throw error;\n    }\n  },\n  addMemberToTeam: async (teamId, userId) => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      set(state => ({\n        teams: state.teams.map(team => team.id === teamId && !team.memberIds.includes(userId) ? {\n          ...team,\n          memberIds: [...team.memberIds, userId],\n          updatedAt: new Date().toISOString()\n        } : team),\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false,\n        error: 'Failed to add member to team'\n      });\n      throw error;\n    }\n  },\n  removeMemberFromTeam: async (teamId, userId) => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      set(state => ({\n        teams: state.teams.map(team => team.id === teamId ? {\n          ...team,\n          memberIds: team.memberIds.filter(id => id !== userId),\n          leadIds: team.leadIds.filter(id => id !== userId),\n          // Remove from leads too\n          updatedAt: new Date().toISOString()\n        } : team),\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false,\n        error: 'Failed to remove member from team'\n      });\n      throw error;\n    }\n  },\n  setTeamLead: async (teamId, userId, isLead) => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      set(state => ({\n        teams: state.teams.map(team => {\n          if (team.id !== teamId) return team;\n          let newLeadIds = [...team.leadIds];\n          let newMemberIds = [...team.memberIds];\n          if (isLead) {\n            // Add as lead and ensure they're a member\n            if (!newLeadIds.includes(userId)) {\n              newLeadIds.push(userId);\n            }\n            if (!newMemberIds.includes(userId)) {\n              newMemberIds.push(userId);\n            }\n          } else {\n            // Remove from leads\n            newLeadIds = newLeadIds.filter(id => id !== userId);\n          }\n          return {\n            ...team,\n            leadIds: newLeadIds,\n            memberIds: newMemberIds,\n            updatedAt: new Date().toISOString()\n          };\n        }),\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false,\n        error: 'Failed to update team lead'\n      });\n      throw error;\n    }\n  },\n  getTeamMembers: (teamId, allUsers) => {\n    const team = get().getTeamById(teamId);\n    if (!team) return [];\n    return allUsers.filter(user => team.memberIds.includes(user.id));\n  },\n  getTeamLeads: (teamId, allUsers) => {\n    const team = get().getTeamById(teamId);\n    if (!team) return [];\n    return allUsers.filter(user => team.leadIds.includes(user.id));\n  }\n}), {\n  name: 'teams-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    teams: state.teams\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockTeams","id","name","description","organizationId","leadIds","memberIds","createdAt","updatedAt","useTeamsStore","set","get","teams","isLoading","error","getAllTeams","getTeamById","teamId","find","team","getTeamsByUserId","userId","filter","includes","getTeamsLedByUser","createTeam","teamData","Promise","resolve","setTimeout","newTeam","Date","now","toISOString","state","updateTeam","updates","map","deleteTeam","addMemberToTeam","removeMemberFromTeam","setTeamLead","isLead","newLeadIds","newMemberIds","push","getTeamMembers","allUsers","user","getTeamLeads","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/teams.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { Team, User } from '../types';\n\ninterface TeamsState {\n  teams: Team[];\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  getAllTeams: () => Team[];\n  getTeamById: (teamId: string) => Team | undefined;\n  getTeamsByUserId: (userId: string) => Team[];\n  getTeamsLedByUser: (userId: string) => Team[];\n  createTeam: (teamData: Omit<Team, 'id' | 'createdAt' | 'updatedAt'>) => Promise<Team>;\n  updateTeam: (teamId: string, updates: Partial<Team>) => Promise<void>;\n  deleteTeam: (teamId: string) => Promise<void>;\n  addMemberToTeam: (teamId: string, userId: string) => Promise<void>;\n  removeMemberFromTeam: (teamId: string, userId: string) => Promise<void>;\n  setTeamLead: (teamId: string, userId: string, isLead: boolean) => Promise<void>;\n  getTeamMembers: (teamId: string, allUsers: User[]) => User[];\n  getTeamLeads: (teamId: string, allUsers: User[]) => User[];\n}\n\n// Mock team data\nconst mockTeams: Team[] = [\n  {\n    id: 'team1',\n    name: 'Entwicklung',\n    description: 'Software Development Team',\n    organizationId: 'org1',\n    leadIds: ['2'], // Anna Admin is lead\n    memberIds: ['1', '2'], // Max and Anna\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'team2',\n    name: 'Marketing',\n    description: 'Marketing and Design Team',\n    organizationId: 'org1',\n    leadIds: ['2'], // Anna Admin is lead\n    memberIds: ['2', '3'], // Anna and Tom\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'team3',\n    name: 'Quality Assurance',\n    description: 'Testing and QA Team',\n    organizationId: 'org1',\n    leadIds: ['2'], // Anna Admin is lead\n    memberIds: ['2', '4'], // Anna and Test User\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z'\n  }\n];\n\nexport const useTeamsStore = create<TeamsState>()(\n  persist(\n    (set, get) => ({\n      teams: mockTeams,\n      isLoading: false,\n      error: null,\n\n      getAllTeams: () => {\n        return get().teams;\n      },\n\n      getTeamById: (teamId: string) => {\n        return get().teams.find(team => team.id === teamId);\n      },\n\n      getTeamsByUserId: (userId: string) => {\n        return get().teams.filter(team => team.memberIds.includes(userId));\n      },\n\n      getTeamsLedByUser: (userId: string) => {\n        return get().teams.filter(team => team.leadIds.includes(userId));\n      },\n\n      createTeam: async (teamData) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          const newTeam: Team = {\n            ...teamData,\n            id: `team${Date.now()}`,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          };\n          \n          set(state => ({\n            teams: [...state.teams, newTeam],\n            isLoading: false\n          }));\n          \n          return newTeam;\n        } catch (error) {\n          set({ isLoading: false, error: 'Failed to create team' });\n          throw error;\n        }\n      },\n\n      updateTeam: async (teamId: string, updates) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          set(state => ({\n            teams: state.teams.map(team =>\n              team.id === teamId\n                ? { ...team, ...updates, updatedAt: new Date().toISOString() }\n                : team\n            ),\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false, error: 'Failed to update team' });\n          throw error;\n        }\n      },\n\n      deleteTeam: async (teamId: string) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          set(state => ({\n            teams: state.teams.filter(team => team.id !== teamId),\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false, error: 'Failed to delete team' });\n          throw error;\n        }\n      },\n\n      addMemberToTeam: async (teamId: string, userId: string) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          set(state => ({\n            teams: state.teams.map(team =>\n              team.id === teamId && !team.memberIds.includes(userId)\n                ? { \n                    ...team, \n                    memberIds: [...team.memberIds, userId],\n                    updatedAt: new Date().toISOString()\n                  }\n                : team\n            ),\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false, error: 'Failed to add member to team' });\n          throw error;\n        }\n      },\n\n      removeMemberFromTeam: async (teamId: string, userId: string) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          set(state => ({\n            teams: state.teams.map(team =>\n              team.id === teamId\n                ? { \n                    ...team, \n                    memberIds: team.memberIds.filter(id => id !== userId),\n                    leadIds: team.leadIds.filter(id => id !== userId), // Remove from leads too\n                    updatedAt: new Date().toISOString()\n                  }\n                : team\n            ),\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false, error: 'Failed to remove member from team' });\n          throw error;\n        }\n      },\n\n      setTeamLead: async (teamId: string, userId: string, isLead: boolean) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          set(state => ({\n            teams: state.teams.map(team => {\n              if (team.id !== teamId) return team;\n              \n              let newLeadIds = [...team.leadIds];\n              let newMemberIds = [...team.memberIds];\n              \n              if (isLead) {\n                // Add as lead and ensure they're a member\n                if (!newLeadIds.includes(userId)) {\n                  newLeadIds.push(userId);\n                }\n                if (!newMemberIds.includes(userId)) {\n                  newMemberIds.push(userId);\n                }\n              } else {\n                // Remove from leads\n                newLeadIds = newLeadIds.filter(id => id !== userId);\n              }\n              \n              return {\n                ...team,\n                leadIds: newLeadIds,\n                memberIds: newMemberIds,\n                updatedAt: new Date().toISOString()\n              };\n            }),\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false, error: 'Failed to update team lead' });\n          throw error;\n        }\n      },\n\n      getTeamMembers: (teamId: string, allUsers: User[]) => {\n        const team = get().getTeamById(teamId);\n        if (!team) return [];\n        \n        return allUsers.filter(user => team.memberIds.includes(user.id));\n      },\n\n      getTeamLeads: (teamId: string, allUsers: User[]) => {\n        const team = get().getTeamById(teamId);\n        if (!team) return [];\n        \n        return allUsers.filter(user => team.leadIds.includes(user.id));\n      }\n    }),\n    {\n      name: 'teams-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ teams: state.teams }),\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}