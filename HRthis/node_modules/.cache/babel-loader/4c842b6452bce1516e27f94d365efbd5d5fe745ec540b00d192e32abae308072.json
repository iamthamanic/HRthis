{"ast":null,"code":"// Types for the enhanced learning module\n\nexport let TrainingCategory = /*#__PURE__*/function (TrainingCategory) {\n  TrainingCategory[\"MANDATORY\"] = \"mandatory\";\n  TrainingCategory[\"DEPARTMENT\"] = \"department\";\n  TrainingCategory[\"BONUS\"] = \"bonus\";\n  TrainingCategory[\"COMPLIANCE\"] = \"compliance\";\n  TrainingCategory[\"SKILLS\"] = \"skills\";\n  TrainingCategory[\"ONBOARDING\"] = \"onboarding\";\n  return TrainingCategory;\n}({});","map":{"version":3,"names":["TrainingCategory"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/types/learning.ts"],"sourcesContent":["// Types for the enhanced learning module\n\nexport interface VideoContent {\n  id: string;\n  url: string;\n  title: string;\n  description: string;\n  duration: number; // in seconds\n  thumbnail?: string;\n  transcription?: Transcription;\n  category: TrainingCategory;\n}\n\nexport interface Transcription {\n  id: string;\n  videoId: string;\n  text: string;\n  segments: TranscriptionSegment[];\n  language: string;\n  generatedAt: Date;\n}\n\nexport interface TranscriptionSegment {\n  start: number; // timestamp in seconds\n  end: number;\n  text: string;\n  confidence?: number;\n}\n\nexport interface LearningProgress {\n  userId: string;\n  videoId: string;\n  watchedSeconds: number;\n  completed: boolean;\n  lastWatchedAt: Date;\n  testResults?: TestResult[];\n}\n\nexport interface TestQuestion {\n  id: string;\n  type: 'multiple-choice' | 'drag-drop' | 'image-selection' | 'sorting';\n  question: string;\n  options?: string[];\n  correctAnswer: string | string[];\n  points: number;\n  explanation?: string;\n  mediaUrl?: string;\n}\n\nexport interface TestResult {\n  id: string;\n  userId: string;\n  trainingId: string;\n  score: number; // percentage\n  passed: boolean;\n  completedAt: Date;\n  answers: TestAnswer[];\n  earnedXP: number;\n  earnedCoins: number;\n}\n\nexport interface TestAnswer {\n  questionId: string;\n  userAnswer: string | string[];\n  correct: boolean;\n  timeSpent: number; // seconds\n}\n\nexport interface UserLevel {\n  level: number;\n  title: string;\n  xp: number;\n  nextLevelXp: number;\n  icon?: string;\n}\n\nexport interface LevelConfig {\n  level: number;\n  title: string;\n  xp: number;\n  rewards?: Reward[];\n}\n\nexport interface Reward {\n  type: 'coins' | 'badge' | 'avatar-item' | 'title';\n  value: string | number;\n  description: string;\n  icon?: string;\n}\n\nexport interface Avatar {\n  id: string;\n  userId: string;\n  baseModel: string;\n  accessories: AvatarAccessory[];\n  badges: Badge[];\n  level: number;\n  title: string;\n}\n\nexport interface AvatarAccessory {\n  id: string;\n  type: 'hat' | 'glasses' | 'clothing' | 'background' | 'effect';\n  name: string;\n  imageUrl: string;\n  requiredLevel?: number;\n  price?: number;\n}\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  earnedAt: Date;\n  category: 'achievement' | 'special' | 'milestone';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n}\n\nexport interface LearningEvent {\n  id: string;\n  name: string;\n  description: string;\n  startDate: Date;\n  endDate: Date;\n  targetCoins: number;\n  rewards: Reward[];\n  participants: EventParticipant[];\n}\n\nexport interface EventParticipant {\n  userId: string;\n  progress: number; // coins earned for this event\n  claimed: boolean;\n}\n\nexport interface ShopItem {\n  id: string;\n  name: string;\n  description: string;\n  type: 'avatar-item' | 'boost' | 'special';\n  price: number;\n  imageUrl: string;\n  available: boolean;\n  limitedTime?: boolean;\n  expiresAt?: Date;\n}\n\nexport interface LootboxAnimation {\n  id: string;\n  type: 'coins' | 'xp' | 'badge' | 'item';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  reward: Reward;\n  animation: 'spin' | 'burst' | 'reveal';\n}\n\nexport interface TrainingStatistics {\n  userId: string;\n  totalXP: number;\n  totalCoins: number;\n  completedTrainings: number;\n  perfectScores: number;\n  currentStreak: number;\n  badges: Badge[];\n  averageScore: number;\n  totalWatchTime: number; // seconds\n}\n\nexport interface TeamRanking {\n  teamId: string;\n  teamName: string;\n  totalXP: number;\n  averageLevel: number;\n  completedTrainings: number;\n  members: TeamMember[];\n}\n\nexport interface TeamMember {\n  userId: string;\n  name: string;\n  avatar: Avatar;\n  level: number;\n  xp: number;\n  contributionPercentage: number;\n}\n\nexport enum TrainingCategory {\n  MANDATORY = 'mandatory',\n  DEPARTMENT = 'department',\n  BONUS = 'bonus',\n  COMPLIANCE = 'compliance',\n  SKILLS = 'skills',\n  ONBOARDING = 'onboarding'\n}\n\nexport interface Certificate {\n  id: string;\n  userId: string;\n  trainingId: string;\n  issuedAt: Date;\n  score: number;\n  certificateUrl?: string;\n  validUntil?: Date;\n}"],"mappings":"AAAA;;AA0LA,WAAYA,gBAAgB,0BAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}