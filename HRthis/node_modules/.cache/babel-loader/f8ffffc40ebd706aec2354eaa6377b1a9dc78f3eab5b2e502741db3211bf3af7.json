{"ast":null,"code":"import _objectSpread from\"/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{create}from'zustand';import{persist,createJSONStorage}from'zustand/middleware';// Mock data\nconst mockLeaveRequests=[{id:'1',userId:'1',startDate:'2024-12-23',endDate:'2024-12-30',comment:'Weihnachtsurlaub',status:'APPROVED',type:'VACATION',createdAt:'2024-12-01T10:00:00Z'},{id:'2',userId:'1',startDate:'2024-11-15',endDate:'2024-11-15',comment:'Arzttermin',status:'PENDING',type:'SICK',createdAt:'2024-11-15T08:00:00Z'}];const mockVacationBalance={userId:'1',totalDays:30,usedDays:8,remainingDays:22,year:2024};export const useLeavesStore=create()(persist((set,get)=>({leaveRequests:mockLeaveRequests,vacationBalance:mockVacationBalance,isLoading:false,submitLeaveRequest:async request=>{set({isLoading:true});try{// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,500));const newRequest=_objectSpread(_objectSpread({},request),{},{id:Date.now().toString(),createdAt:new Date().toISOString()});set(state=>({leaveRequests:[...state.leaveRequests,newRequest],isLoading:false}));}catch(error){set({isLoading:false});throw error;}},getLeaveRequests:userId=>{return get().leaveRequests.filter(request=>request.userId===userId);},getVacationBalance:userId=>{const balance=get().vacationBalance;return(balance===null||balance===void 0?void 0:balance.userId)===userId?balance:null;},setVacationBalance:balance=>{set({vacationBalance:balance});},approveLeaveRequest:requestId=>{set(state=>({leaveRequests:state.leaveRequests.map(request=>request.id===requestId?_objectSpread(_objectSpread({},request),{},{status:'APPROVED'}):request)}));// Trigger automatic reminder creation for vacation requests\nconst approvedRequest=get().leaveRequests.find(r=>r.id===requestId);if(approvedRequest&&approvedRequest.type==='VACATION'){// This would integrate with the reminders store\n// For now, this is handled in the UI layer\n}},rejectLeaveRequest:requestId=>{set(state=>({leaveRequests:state.leaveRequests.map(request=>request.id===requestId?_objectSpread(_objectSpread({},request),{},{status:'REJECTED'}):request)}));}}),{name:'leaves-storage',storage:createJSONStorage(()=>localStorage),partialize:state=>({leaveRequests:state.leaveRequests,vacationBalance:state.vacationBalance})}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockLeaveRequests","id","userId","startDate","endDate","comment","status","type","createdAt","mockVacationBalance","totalDays","usedDays","remainingDays","year","useLeavesStore","set","get","leaveRequests","vacationBalance","isLoading","submitLeaveRequest","request","Promise","resolve","setTimeout","newRequest","_objectSpread","Date","now","toString","toISOString","state","error","getLeaveRequests","filter","getVacationBalance","balance","setVacationBalance","approveLeaveRequest","requestId","map","approvedRequest","find","r","rejectLeaveRequest","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/leaves.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { LeaveRequest, VacationBalance } from '../types';\n\ninterface LeavesState {\n  leaveRequests: LeaveRequest[];\n  vacationBalance: VacationBalance | null;\n  isLoading: boolean;\n  submitLeaveRequest: (request: Omit<LeaveRequest, 'id' | 'createdAt'>) => Promise<void>;\n  getLeaveRequests: (userId: string) => LeaveRequest[];\n  getVacationBalance: (userId: string) => VacationBalance | null;\n  setVacationBalance: (balance: VacationBalance) => void;\n  approveLeaveRequest: (requestId: string) => void;\n  rejectLeaveRequest: (requestId: string) => void;\n}\n\n// Mock data\nconst mockLeaveRequests: LeaveRequest[] = [\n  {\n    id: '1',\n    userId: '1',\n    startDate: '2024-12-23',\n    endDate: '2024-12-30',\n    comment: 'Weihnachtsurlaub',\n    status: 'APPROVED',\n    type: 'VACATION',\n    createdAt: '2024-12-01T10:00:00Z'\n  },\n  {\n    id: '2',\n    userId: '1',\n    startDate: '2024-11-15',\n    endDate: '2024-11-15',\n    comment: 'Arzttermin',\n    status: 'PENDING',\n    type: 'SICK',\n    createdAt: '2024-11-15T08:00:00Z'\n  }\n];\n\nconst mockVacationBalance: VacationBalance = {\n  userId: '1',\n  totalDays: 30,\n  usedDays: 8,\n  remainingDays: 22,\n  year: 2024\n};\n\nexport const useLeavesStore = create<LeavesState>()(\n  persist(\n    (set, get) => ({\n      leaveRequests: mockLeaveRequests,\n      vacationBalance: mockVacationBalance,\n      isLoading: false,\n\n      submitLeaveRequest: async (request) => {\n        set({ isLoading: true });\n        \n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          const newRequest: LeaveRequest = {\n            ...request,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString()\n          };\n          \n          set(state => ({\n            leaveRequests: [...state.leaveRequests, newRequest],\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      getLeaveRequests: (userId: string) => {\n        return get().leaveRequests.filter(request => request.userId === userId);\n      },\n\n      getVacationBalance: (userId: string) => {\n        const balance = get().vacationBalance;\n        return balance?.userId === userId ? balance : null;\n      },\n\n      setVacationBalance: (balance: VacationBalance) => {\n        set({ vacationBalance: balance });\n      },\n\n      approveLeaveRequest: (requestId: string) => {\n        set(state => ({\n          leaveRequests: state.leaveRequests.map(request =>\n            request.id === requestId\n              ? { ...request, status: 'APPROVED' as const }\n              : request\n          )\n        }));\n        \n        // Trigger automatic reminder creation for vacation requests\n        const approvedRequest = get().leaveRequests.find(r => r.id === requestId);\n        if (approvedRequest && approvedRequest.type === 'VACATION') {\n          // This would integrate with the reminders store\n          // For now, this is handled in the UI layer\n        }\n      },\n\n      rejectLeaveRequest: (requestId: string) => {\n        set(state => ({\n          leaveRequests: state.leaveRequests.map(request =>\n            request.id === requestId\n              ? { ...request, status: 'REJECTED' as const }\n              : request\n          )\n        }));\n      }\n    }),\n    {\n      name: 'leaves-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        leaveRequests: state.leaveRequests,\n        vacationBalance: state.vacationBalance \n      }),\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}