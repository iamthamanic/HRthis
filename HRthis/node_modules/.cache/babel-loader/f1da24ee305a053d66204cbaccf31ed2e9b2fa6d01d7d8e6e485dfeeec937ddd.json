{"ast":null,"code":"import{create}from'zustand';import{persist,createJSONStorage}from'zustand/middleware';// Mock data - simulating data from Timerecording.de API\nconst generateMockTimeRecords=userId=>{const records=[];const today=new Date();// Generate records for the last 30 days\nfor(let i=29;i>=0;i--){const date=new Date(today);date.setDate(date.getDate()-i);// Skip weekends\nif(date.getDay()===0||date.getDay()===6)continue;const timeIn=new Date(date);timeIn.setHours(8+Math.floor(Math.random()*2),Math.floor(Math.random()*60));const timeOut=new Date(timeIn);timeOut.setHours(timeIn.getHours()+8+Math.floor(Math.random()*2),Math.floor(Math.random()*60));const breakMinutes=30+Math.floor(Math.random()*30);const totalHours=(timeOut.getTime()-timeIn.getTime())/(1000*60*60)-breakMinutes/60;records.push({id:\"\".concat(userId,\"-\").concat(date.toISOString().split('T')[0]),userId,date:date.toISOString().split('T')[0],timeIn:timeIn.toTimeString().split(' ')[0].substring(0,5),timeOut:timeOut.toTimeString().split(' ')[0].substring(0,5),breakMinutes,totalHours:Math.round(totalHours*100)/100});}return records;};export const useTimeRecordsStore=create()(persist((set,get)=>({timeRecords:[],isLoading:false,getTimeRecords:userId=>{let records=get().timeRecords.filter(record=>record.userId===userId);// If no records exist for this user, generate mock data\nif(records.length===0){const mockRecords=generateMockTimeRecords(userId);set(state=>({timeRecords:[...state.timeRecords,...mockRecords]}));records=mockRecords;}return records.sort((a,b)=>new Date(b.date).getTime()-new Date(a.date).getTime());},getTimeRecordsForPeriod:(userId,startDate,endDate)=>{const allRecords=get().getTimeRecords(userId);return allRecords.filter(record=>record.date>=startDate&&record.date<=endDate);},setTimeRecords:records=>{set({timeRecords:records});}}),{name:'time-records-storage',storage:createJSONStorage(()=>localStorage),partialize:state=>({timeRecords:state.timeRecords})}));","map":{"version":3,"names":["create","persist","createJSONStorage","generateMockTimeRecords","userId","records","today","Date","i","date","setDate","getDate","getDay","timeIn","setHours","Math","floor","random","timeOut","getHours","breakMinutes","totalHours","getTime","push","id","concat","toISOString","split","toTimeString","substring","round","useTimeRecordsStore","set","get","timeRecords","isLoading","getTimeRecords","filter","record","length","mockRecords","state","sort","a","b","getTimeRecordsForPeriod","startDate","endDate","allRecords","setTimeRecords","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/timeRecords.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { TimeRecord } from '../types';\n\ninterface TimeRecordsState {\n  timeRecords: TimeRecord[];\n  isLoading: boolean;\n  getTimeRecords: (userId: string) => TimeRecord[];\n  getTimeRecordsForPeriod: (userId: string, startDate: string, endDate: string) => TimeRecord[];\n  setTimeRecords: (records: TimeRecord[]) => void;\n}\n\n// Mock data - simulating data from Timerecording.de API\nconst generateMockTimeRecords = (userId: string): TimeRecord[] => {\n  const records: TimeRecord[] = [];\n  const today = new Date();\n  \n  // Generate records for the last 30 days\n  for (let i = 29; i >= 0; i--) {\n    const date = new Date(today);\n    date.setDate(date.getDate() - i);\n    \n    // Skip weekends\n    if (date.getDay() === 0 || date.getDay() === 6) continue;\n    \n    const timeIn = new Date(date);\n    timeIn.setHours(8 + Math.floor(Math.random() * 2), Math.floor(Math.random() * 60));\n    \n    const timeOut = new Date(timeIn);\n    timeOut.setHours(timeIn.getHours() + 8 + Math.floor(Math.random() * 2), Math.floor(Math.random() * 60));\n    \n    const breakMinutes = 30 + Math.floor(Math.random() * 30);\n    const totalHours = (timeOut.getTime() - timeIn.getTime()) / (1000 * 60 * 60) - (breakMinutes / 60);\n    \n    records.push({\n      id: `${userId}-${date.toISOString().split('T')[0]}`,\n      userId,\n      date: date.toISOString().split('T')[0],\n      timeIn: timeIn.toTimeString().split(' ')[0].substring(0, 5),\n      timeOut: timeOut.toTimeString().split(' ')[0].substring(0, 5),\n      breakMinutes,\n      totalHours: Math.round(totalHours * 100) / 100\n    });\n  }\n  \n  return records;\n};\n\nexport const useTimeRecordsStore = create<TimeRecordsState>()(\n  persist(\n    (set, get) => ({\n      timeRecords: [],\n      isLoading: false,\n\n      getTimeRecords: (userId: string) => {\n        let records = get().timeRecords.filter(record => record.userId === userId);\n        \n        // If no records exist for this user, generate mock data\n        if (records.length === 0) {\n          const mockRecords = generateMockTimeRecords(userId);\n          set(state => ({\n            timeRecords: [...state.timeRecords, ...mockRecords]\n          }));\n          records = mockRecords;\n        }\n        \n        return records.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n      },\n\n      getTimeRecordsForPeriod: (userId: string, startDate: string, endDate: string) => {\n        const allRecords = get().getTimeRecords(userId);\n        return allRecords.filter(record => \n          record.date >= startDate && record.date <= endDate\n        );\n      },\n\n      setTimeRecords: (records: TimeRecord[]) => {\n        set({ timeRecords: records });\n      }\n    }),\n    {\n      name: 'time-records-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        timeRecords: state.timeRecords \n      }),\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}