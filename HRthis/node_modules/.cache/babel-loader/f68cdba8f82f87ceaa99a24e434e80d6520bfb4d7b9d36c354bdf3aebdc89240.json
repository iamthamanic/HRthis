{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock data\nconst mockTrainings = [{\n  id: '1',\n  title: 'Datenschutz und DSGVO Grundlagen',\n  description: 'Pflichtschulung zu Datenschutz-Grundlagen und DSGVO-Compliance für alle Mitarbeiter',\n  targetAudience: 'ALL',\n  startDate: '2024-01-01',\n  endDate: '2024-12-31',\n  isActive: true,\n  isMandatory: true,\n  createdBy: '2',\n  createdAt: '2024-01-01T10:00:00Z',\n  estimatedDuration: 45,\n  category: 'COMPLIANCE'\n}, {\n  id: '2',\n  title: 'Onboarding Programm',\n  description: 'Umfassendes Einführungsprogramm für neue Mitarbeiter',\n  targetAudience: 'SPECIFIC_USERS',\n  targetUserIds: ['1'],\n  startDate: '2024-12-01',\n  isActive: true,\n  isMandatory: true,\n  createdBy: '2',\n  createdAt: '2024-11-15T14:00:00Z',\n  estimatedDuration: 120,\n  category: 'ONBOARDING'\n}, {\n  id: '3',\n  title: 'Microsoft Office 365 Schulung',\n  description: 'Erweiterte Funktionen von Office 365 für effizienteres Arbeiten',\n  targetAudience: 'DEPARTMENT',\n  targetDepartments: ['IT', 'Administration'],\n  startDate: '2024-11-01',\n  endDate: '2025-01-31',\n  isActive: true,\n  isMandatory: false,\n  createdBy: '2',\n  createdAt: '2024-10-15T09:00:00Z',\n  estimatedDuration: 90,\n  category: 'SKILLS'\n}];\nconst mockLessons = [{\n  id: '1',\n  trainingId: '1',\n  title: 'Was ist Datenschutz?',\n  description: 'Grundlagen des Datenschutzes und warum er wichtig ist',\n  order: 1,\n  content: [{\n    id: '1',\n    type: 'TEXT',\n    title: 'Einführung',\n    content: 'Datenschutz betrifft uns alle und ist ein Grundrecht...',\n    order: 1\n  }],\n  quiz: {\n    id: 'quiz1',\n    lessonId: '1',\n    questions: [{\n      id: 'q1',\n      question: 'Was bedeutet DSGVO?',\n      options: ['Datenschutz-Grundverordnung', 'Deutsche Sicherheits-Grundverordnung', 'Digitale Schutz-Grundverordnung', 'Daten-Sicherheits-Grundverordnung'],\n      correctAnswer: 0,\n      explanation: 'DSGVO steht für Datenschutz-Grundverordnung, die europäische Verordnung zum Schutz personenbezogener Daten.'\n    }],\n    passingScore: 80,\n    maxAttempts: 3\n  },\n  isRequired: true\n}, {\n  id: '2',\n  trainingId: '2',\n  title: 'Willkommen bei WorkyTime',\n  description: 'Erste Schritte und Orientierung im Unternehmen',\n  order: 1,\n  content: [{\n    id: '2',\n    type: 'TEXT',\n    title: 'Unternehmenswerte',\n    content: 'Willkommen bei WorkyTime! Unsere Werte sind...',\n    order: 1\n  }],\n  isRequired: true\n}];\nconst mockProgress = [{\n  id: '1',\n  userId: '1',\n  trainingId: '1',\n  status: 'IN_PROGRESS',\n  currentLessonId: '1',\n  completedLessons: [],\n  startedAt: '2024-12-15T10:00:00Z',\n  lastActivityAt: '2024-12-15T10:30:00Z'\n}, {\n  id: '2',\n  userId: '1',\n  trainingId: '2',\n  status: 'NOT_STARTED',\n  completedLessons: []\n}];\nexport const useTrainingStore = create()(persist((set, get) => ({\n  trainings: mockTrainings,\n  lessons: mockLessons,\n  progress: mockProgress,\n  attempts: [],\n  certificates: [],\n  isLoading: false,\n  createTraining: async trainingData => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const newTraining = {\n        ...trainingData,\n        id: Date.now().toString(),\n        createdAt: new Date().toISOString()\n      };\n      set(state => ({\n        trainings: [...state.trainings, newTraining],\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  updateTraining: (id, updates) => {\n    set(state => ({\n      trainings: state.trainings.map(training => training.id === id ? {\n        ...training,\n        ...updates\n      } : training)\n    }));\n  },\n  deleteTraining: id => {\n    set(state => ({\n      trainings: state.trainings.filter(training => training.id !== id),\n      lessons: state.lessons.filter(lesson => lesson.trainingId !== id),\n      progress: state.progress.filter(progress => progress.trainingId !== id)\n    }));\n  },\n  getTrainingById: id => {\n    return get().trainings.find(training => training.id === id);\n  },\n  getTrainingsForUser: userId => {\n    const {\n      trainings\n    } = get();\n    return trainings.filter(training => {\n      var _training$targetUserI;\n      if (!training.isActive) return false;\n      switch (training.targetAudience) {\n        case 'ALL':\n          return true;\n        case 'SPECIFIC_USERS':\n          return ((_training$targetUserI = training.targetUserIds) === null || _training$targetUserI === void 0 ? void 0 : _training$targetUserI.includes(userId)) || false;\n        case 'DEPARTMENT':\n          // In real app, would check user's department\n          return true;\n        default:\n          return false;\n      }\n    });\n  },\n  addLesson: lessonData => {\n    const newLesson = {\n      ...lessonData,\n      id: Date.now().toString()\n    };\n    set(state => ({\n      lessons: [...state.lessons, newLesson]\n    }));\n  },\n  updateLesson: (id, updates) => {\n    set(state => ({\n      lessons: state.lessons.map(lesson => lesson.id === id ? {\n        ...lesson,\n        ...updates\n      } : lesson)\n    }));\n  },\n  deleteLesson: id => {\n    set(state => ({\n      lessons: state.lessons.filter(lesson => lesson.id !== id)\n    }));\n  },\n  getLessonsForTraining: trainingId => {\n    return get().lessons.filter(lesson => lesson.trainingId === trainingId).sort((a, b) => a.order - b.order);\n  },\n  getUserProgress: (userId, trainingId) => {\n    return get().progress.find(p => p.userId === userId && p.trainingId === trainingId);\n  },\n  updateProgress: (userId, trainingId, updates) => {\n    set(state => ({\n      progress: state.progress.map(progress => progress.userId === userId && progress.trainingId === trainingId ? {\n        ...progress,\n        ...updates,\n        lastActivityAt: new Date().toISOString()\n      } : progress)\n    }));\n  },\n  startTraining: (userId, trainingId) => {\n    const existingProgress = get().getUserProgress(userId, trainingId);\n    if (!existingProgress) {\n      const newProgress = {\n        id: Date.now().toString(),\n        userId,\n        trainingId,\n        status: 'IN_PROGRESS',\n        completedLessons: [],\n        startedAt: new Date().toISOString(),\n        lastActivityAt: new Date().toISOString()\n      };\n      set(state => ({\n        progress: [...state.progress, newProgress]\n      }));\n    } else {\n      get().updateProgress(userId, trainingId, {\n        status: 'IN_PROGRESS'\n      });\n    }\n  },\n  completeLesson: (userId, trainingId, lessonId) => {\n    const progress = get().getUserProgress(userId, trainingId);\n    if (!progress) return;\n    const completedLessons = [...progress.completedLessons];\n    if (!completedLessons.includes(lessonId)) {\n      completedLessons.push(lessonId);\n    }\n    get().updateProgress(userId, trainingId, {\n      completedLessons,\n      currentLessonId: lessonId\n    });\n  },\n  completeTraining: (userId, trainingId, finalScore) => {\n    get().updateProgress(userId, trainingId, {\n      status: finalScore >= 70 ? 'COMPLETED' : 'FAILED',\n      finalScore,\n      completedAt: new Date().toISOString()\n    });\n  },\n  submitQuizAttempt: attemptData => {\n    const newAttempt = {\n      ...attemptData,\n      id: Date.now().toString()\n    };\n    set(state => ({\n      attempts: [...state.attempts, newAttempt]\n    }));\n  },\n  getUserAttempts: (userId, quizId) => {\n    return get().attempts.filter(attempt => attempt.userId === userId && attempt.quizId === quizId).sort((a, b) => b.attemptNumber - a.attemptNumber);\n  },\n  generateTrainingContent: async request => {\n    set({\n      isLoading: true\n    });\n    try {\n      // Import AI service dynamically to avoid circular dependencies\n      const {\n        generateTrainingContent\n      } = await import('../api/training-ai');\n      const generatedContent = await generateTrainingContent(request);\n      set({\n        isLoading: false\n      });\n      return generatedContent;\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  getTeamProgress: userIds => {\n    return get().progress.filter(progress => userIds.includes(progress.userId));\n  },\n  getTrainingStatistics: trainingId => {\n    const {\n      progress\n    } = get();\n    const trainingProgress = progress.filter(p => p.trainingId === trainingId);\n    const completed = trainingProgress.filter(p => p.status === 'COMPLETED').length;\n    const inProgress = trainingProgress.filter(p => p.status === 'IN_PROGRESS').length;\n    const failed = trainingProgress.filter(p => p.status === 'FAILED').length;\n    const notStarted = trainingProgress.filter(p => p.status === 'NOT_STARTED').length;\n    const scoresSum = trainingProgress.filter(p => p.finalScore !== undefined).reduce((sum, p) => sum + (p.finalScore || 0), 0);\n    const scoresCount = trainingProgress.filter(p => p.finalScore !== undefined).length;\n    return {\n      totalUsers: trainingProgress.length,\n      completed,\n      inProgress,\n      notStarted: notStarted + failed,\n      // Count failed as not started for simplicity\n      averageScore: scoresCount > 0 ? scoresSum / scoresCount : 0\n    };\n  }\n}), {\n  name: 'training-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    trainings: state.trainings,\n    lessons: state.lessons,\n    progress: state.progress,\n    attempts: state.attempts,\n    certificates: state.certificates\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockTrainings","id","title","description","targetAudience","startDate","endDate","isActive","isMandatory","createdBy","createdAt","estimatedDuration","category","targetUserIds","targetDepartments","mockLessons","trainingId","order","content","type","quiz","lessonId","questions","question","options","correctAnswer","explanation","passingScore","maxAttempts","isRequired","mockProgress","userId","status","currentLessonId","completedLessons","startedAt","lastActivityAt","useTrainingStore","set","get","trainings","lessons","progress","attempts","certificates","isLoading","createTraining","trainingData","Promise","resolve","setTimeout","newTraining","Date","now","toString","toISOString","state","error","updateTraining","updates","map","training","deleteTraining","filter","lesson","getTrainingById","find","getTrainingsForUser","_training$targetUserI","includes","addLesson","lessonData","newLesson","updateLesson","deleteLesson","getLessonsForTraining","sort","a","b","getUserProgress","p","updateProgress","startTraining","existingProgress","newProgress","completeLesson","push","completeTraining","finalScore","completedAt","submitQuizAttempt","attemptData","newAttempt","getUserAttempts","quizId","attempt","attemptNumber","generateTrainingContent","request","generatedContent","getTeamProgress","userIds","getTrainingStatistics","trainingProgress","completed","length","inProgress","failed","notStarted","scoresSum","undefined","reduce","sum","scoresCount","totalUsers","averageScore","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/training.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { \n  Training, \n  TrainingLesson, \n  TrainingProgress, \n  TrainingAttempt, \n  TrainingCertificate,\n  AIGenerationRequest,\n  AIGeneratedContent\n} from '../types/training';\n\ninterface TrainingState {\n  trainings: Training[];\n  lessons: TrainingLesson[];\n  progress: TrainingProgress[];\n  attempts: TrainingAttempt[];\n  certificates: TrainingCertificate[];\n  isLoading: boolean;\n  \n  // Training Management\n  createTraining: (training: Omit<Training, 'id' | 'createdAt'>) => Promise<void>;\n  updateTraining: (id: string, updates: Partial<Training>) => void;\n  deleteTraining: (id: string) => void;\n  getTrainingById: (id: string) => Training | undefined;\n  getTrainingsForUser: (userId: string) => Training[];\n  \n  // Lesson Management\n  addLesson: (lesson: Omit<TrainingLesson, 'id'>) => void;\n  updateLesson: (id: string, updates: Partial<TrainingLesson>) => void;\n  deleteLesson: (id: string) => void;\n  getLessonsForTraining: (trainingId: string) => TrainingLesson[];\n  \n  // Progress Tracking\n  getUserProgress: (userId: string, trainingId: string) => TrainingProgress | undefined;\n  updateProgress: (userId: string, trainingId: string, updates: Partial<TrainingProgress>) => void;\n  startTraining: (userId: string, trainingId: string) => void;\n  completeLesson: (userId: string, trainingId: string, lessonId: string) => void;\n  completeTraining: (userId: string, trainingId: string, finalScore: number) => void;\n  \n  // Quiz Management\n  submitQuizAttempt: (attempt: Omit<TrainingAttempt, 'id'>) => void;\n  getUserAttempts: (userId: string, quizId: string) => TrainingAttempt[];\n  \n  // AI Generation\n  generateTrainingContent: (request: AIGenerationRequest) => Promise<AIGeneratedContent>;\n  \n  // Manager Functions\n  getTeamProgress: (userIds: string[]) => TrainingProgress[];\n  getTrainingStatistics: (trainingId: string) => {\n    totalUsers: number;\n    completed: number;\n    inProgress: number;\n    notStarted: number;\n    averageScore: number;\n  };\n}\n\n// Mock data\nconst mockTrainings: Training[] = [\n  {\n    id: '1',\n    title: 'Datenschutz und DSGVO Grundlagen',\n    description: 'Pflichtschulung zu Datenschutz-Grundlagen und DSGVO-Compliance für alle Mitarbeiter',\n    targetAudience: 'ALL',\n    startDate: '2024-01-01',\n    endDate: '2024-12-31',\n    isActive: true,\n    isMandatory: true,\n    createdBy: '2',\n    createdAt: '2024-01-01T10:00:00Z',\n    estimatedDuration: 45,\n    category: 'COMPLIANCE'\n  },\n  {\n    id: '2',\n    title: 'Onboarding Programm',\n    description: 'Umfassendes Einführungsprogramm für neue Mitarbeiter',\n    targetAudience: 'SPECIFIC_USERS',\n    targetUserIds: ['1'],\n    startDate: '2024-12-01',\n    isActive: true,\n    isMandatory: true,\n    createdBy: '2',\n    createdAt: '2024-11-15T14:00:00Z',\n    estimatedDuration: 120,\n    category: 'ONBOARDING'\n  },\n  {\n    id: '3',\n    title: 'Microsoft Office 365 Schulung',\n    description: 'Erweiterte Funktionen von Office 365 für effizienteres Arbeiten',\n    targetAudience: 'DEPARTMENT',\n    targetDepartments: ['IT', 'Administration'],\n    startDate: '2024-11-01',\n    endDate: '2025-01-31',\n    isActive: true,\n    isMandatory: false,\n    createdBy: '2',\n    createdAt: '2024-10-15T09:00:00Z',\n    estimatedDuration: 90,\n    category: 'SKILLS'\n  }\n];\n\nconst mockLessons: TrainingLesson[] = [\n  {\n    id: '1',\n    trainingId: '1',\n    title: 'Was ist Datenschutz?',\n    description: 'Grundlagen des Datenschutzes und warum er wichtig ist',\n    order: 1,\n    content: [\n      {\n        id: '1',\n        type: 'TEXT',\n        title: 'Einführung',\n        content: 'Datenschutz betrifft uns alle und ist ein Grundrecht...',\n        order: 1\n      }\n    ],\n    quiz: {\n      id: 'quiz1',\n      lessonId: '1',\n      questions: [\n        {\n          id: 'q1',\n          question: 'Was bedeutet DSGVO?',\n          options: [\n            'Datenschutz-Grundverordnung',\n            'Deutsche Sicherheits-Grundverordnung',\n            'Digitale Schutz-Grundverordnung',\n            'Daten-Sicherheits-Grundverordnung'\n          ],\n          correctAnswer: 0,\n          explanation: 'DSGVO steht für Datenschutz-Grundverordnung, die europäische Verordnung zum Schutz personenbezogener Daten.'\n        }\n      ],\n      passingScore: 80,\n      maxAttempts: 3\n    },\n    isRequired: true\n  },\n  {\n    id: '2',\n    trainingId: '2',\n    title: 'Willkommen bei WorkyTime',\n    description: 'Erste Schritte und Orientierung im Unternehmen',\n    order: 1,\n    content: [\n      {\n        id: '2',\n        type: 'TEXT',\n        title: 'Unternehmenswerte',\n        content: 'Willkommen bei WorkyTime! Unsere Werte sind...',\n        order: 1\n      }\n    ],\n    isRequired: true\n  }\n];\n\nconst mockProgress: TrainingProgress[] = [\n  {\n    id: '1',\n    userId: '1',\n    trainingId: '1',\n    status: 'IN_PROGRESS',\n    currentLessonId: '1',\n    completedLessons: [],\n    startedAt: '2024-12-15T10:00:00Z',\n    lastActivityAt: '2024-12-15T10:30:00Z'\n  },\n  {\n    id: '2',\n    userId: '1',\n    trainingId: '2',\n    status: 'NOT_STARTED',\n    completedLessons: []\n  }\n];\n\nexport const useTrainingStore = create<TrainingState>()(\n  persist(\n    (set, get) => ({\n      trainings: mockTrainings,\n      lessons: mockLessons,\n      progress: mockProgress,\n      attempts: [],\n      certificates: [],\n      isLoading: false,\n\n      createTraining: async (trainingData) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          const newTraining: Training = {\n            ...trainingData,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString()\n          };\n          \n          set(state => ({\n            trainings: [...state.trainings, newTraining],\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      updateTraining: (id: string, updates: Partial<Training>) => {\n        set(state => ({\n          trainings: state.trainings.map(training =>\n            training.id === id ? { ...training, ...updates } : training\n          )\n        }));\n      },\n\n      deleteTraining: (id: string) => {\n        set(state => ({\n          trainings: state.trainings.filter(training => training.id !== id),\n          lessons: state.lessons.filter(lesson => lesson.trainingId !== id),\n          progress: state.progress.filter(progress => progress.trainingId !== id)\n        }));\n      },\n\n      getTrainingById: (id: string) => {\n        return get().trainings.find(training => training.id === id);\n      },\n\n      getTrainingsForUser: (userId: string) => {\n        const { trainings } = get();\n        return trainings.filter(training => {\n          if (!training.isActive) return false;\n          \n          switch (training.targetAudience) {\n            case 'ALL':\n              return true;\n            case 'SPECIFIC_USERS':\n              return training.targetUserIds?.includes(userId) || false;\n            case 'DEPARTMENT':\n              // In real app, would check user's department\n              return true;\n            default:\n              return false;\n          }\n        });\n      },\n\n      addLesson: (lessonData) => {\n        const newLesson: TrainingLesson = {\n          ...lessonData,\n          id: Date.now().toString()\n        };\n        \n        set(state => ({\n          lessons: [...state.lessons, newLesson]\n        }));\n      },\n\n      updateLesson: (id: string, updates: Partial<TrainingLesson>) => {\n        set(state => ({\n          lessons: state.lessons.map(lesson =>\n            lesson.id === id ? { ...lesson, ...updates } : lesson\n          )\n        }));\n      },\n\n      deleteLesson: (id: string) => {\n        set(state => ({\n          lessons: state.lessons.filter(lesson => lesson.id !== id)\n        }));\n      },\n\n      getLessonsForTraining: (trainingId: string) => {\n        return get().lessons\n          .filter(lesson => lesson.trainingId === trainingId)\n          .sort((a, b) => a.order - b.order);\n      },\n\n      getUserProgress: (userId: string, trainingId: string) => {\n        return get().progress.find(p => p.userId === userId && p.trainingId === trainingId);\n      },\n\n      updateProgress: (userId: string, trainingId: string, updates: Partial<TrainingProgress>) => {\n        set(state => ({\n          progress: state.progress.map(progress =>\n            progress.userId === userId && progress.trainingId === trainingId\n              ? { ...progress, ...updates, lastActivityAt: new Date().toISOString() }\n              : progress\n          )\n        }));\n      },\n\n      startTraining: (userId: string, trainingId: string) => {\n        const existingProgress = get().getUserProgress(userId, trainingId);\n        \n        if (!existingProgress) {\n          const newProgress: TrainingProgress = {\n            id: Date.now().toString(),\n            userId,\n            trainingId,\n            status: 'IN_PROGRESS',\n            completedLessons: [],\n            startedAt: new Date().toISOString(),\n            lastActivityAt: new Date().toISOString()\n          };\n          \n          set(state => ({\n            progress: [...state.progress, newProgress]\n          }));\n        } else {\n          get().updateProgress(userId, trainingId, { status: 'IN_PROGRESS' });\n        }\n      },\n\n      completeLesson: (userId: string, trainingId: string, lessonId: string) => {\n        const progress = get().getUserProgress(userId, trainingId);\n        if (!progress) return;\n        \n        const completedLessons = [...progress.completedLessons];\n        if (!completedLessons.includes(lessonId)) {\n          completedLessons.push(lessonId);\n        }\n        \n        get().updateProgress(userId, trainingId, {\n          completedLessons,\n          currentLessonId: lessonId\n        });\n      },\n\n      completeTraining: (userId: string, trainingId: string, finalScore: number) => {\n        get().updateProgress(userId, trainingId, {\n          status: finalScore >= 70 ? 'COMPLETED' : 'FAILED',\n          finalScore,\n          completedAt: new Date().toISOString()\n        });\n      },\n\n      submitQuizAttempt: (attemptData) => {\n        const newAttempt: TrainingAttempt = {\n          ...attemptData,\n          id: Date.now().toString()\n        };\n        \n        set(state => ({\n          attempts: [...state.attempts, newAttempt]\n        }));\n      },\n\n      getUserAttempts: (userId: string, quizId: string) => {\n        return get().attempts.filter(attempt => \n          attempt.userId === userId && attempt.quizId === quizId\n        ).sort((a, b) => b.attemptNumber - a.attemptNumber);\n      },\n\n      generateTrainingContent: async (request: AIGenerationRequest) => {\n        set({ isLoading: true });\n        \n        try {\n          // Import AI service dynamically to avoid circular dependencies\n          const { generateTrainingContent } = await import('../api/training-ai');\n          const generatedContent = await generateTrainingContent(request);\n          \n          set({ isLoading: false });\n          return generatedContent;\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      getTeamProgress: (userIds: string[]) => {\n        return get().progress.filter(progress => userIds.includes(progress.userId));\n      },\n\n      getTrainingStatistics: (trainingId: string) => {\n        const { progress } = get();\n        const trainingProgress = progress.filter(p => p.trainingId === trainingId);\n        \n        const completed = trainingProgress.filter(p => p.status === 'COMPLETED').length;\n        const inProgress = trainingProgress.filter(p => p.status === 'IN_PROGRESS').length;\n        const failed = trainingProgress.filter(p => p.status === 'FAILED').length;\n        const notStarted = trainingProgress.filter(p => p.status === 'NOT_STARTED').length;\n        \n        const scoresSum = trainingProgress\n          .filter(p => p.finalScore !== undefined)\n          .reduce((sum, p) => sum + (p.finalScore || 0), 0);\n        const scoresCount = trainingProgress.filter(p => p.finalScore !== undefined).length;\n        \n        return {\n          totalUsers: trainingProgress.length,\n          completed,\n          inProgress,\n          notStarted: notStarted + failed, // Count failed as not started for simplicity\n          averageScore: scoresCount > 0 ? scoresSum / scoresCount : 0\n        };\n      }\n    }),\n    {\n      name: 'training-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        trainings: state.trainings,\n        lessons: state.lessons,\n        progress: state.progress,\n        attempts: state.attempts,\n        certificates: state.certificates\n      }),\n    }\n  )\n);"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;AAyD/D;AACA,MAAMC,aAAyB,GAAG,CAChC;EACEC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,kCAAkC;EACzCC,WAAW,EAAE,qFAAqF;EAClGC,cAAc,EAAE,KAAK;EACrBC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,IAAI;EACjBC,SAAS,EAAE,GAAG;EACdC,SAAS,EAAE,sBAAsB;EACjCC,iBAAiB,EAAE,EAAE;EACrBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEX,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,qBAAqB;EAC5BC,WAAW,EAAE,sDAAsD;EACnEC,cAAc,EAAE,gBAAgB;EAChCS,aAAa,EAAE,CAAC,GAAG,CAAC;EACpBR,SAAS,EAAE,YAAY;EACvBE,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,IAAI;EACjBC,SAAS,EAAE,GAAG;EACdC,SAAS,EAAE,sBAAsB;EACjCC,iBAAiB,EAAE,GAAG;EACtBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEX,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,+BAA+B;EACtCC,WAAW,EAAE,iEAAiE;EAC9EC,cAAc,EAAE,YAAY;EAC5BU,iBAAiB,EAAE,CAAC,IAAI,EAAE,gBAAgB,CAAC;EAC3CT,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAE,GAAG;EACdC,SAAS,EAAE,sBAAsB;EACjCC,iBAAiB,EAAE,EAAE;EACrBC,QAAQ,EAAE;AACZ,CAAC,CACF;AAED,MAAMG,WAA6B,GAAG,CACpC;EACEd,EAAE,EAAE,GAAG;EACPe,UAAU,EAAE,GAAG;EACfd,KAAK,EAAE,sBAAsB;EAC7BC,WAAW,EAAE,uDAAuD;EACpEc,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE,CACP;IACEjB,EAAE,EAAE,GAAG;IACPkB,IAAI,EAAE,MAAM;IACZjB,KAAK,EAAE,YAAY;IACnBgB,OAAO,EAAE,yDAAyD;IAClED,KAAK,EAAE;EACT,CAAC,CACF;EACDG,IAAI,EAAE;IACJnB,EAAE,EAAE,OAAO;IACXoB,QAAQ,EAAE,GAAG;IACbC,SAAS,EAAE,CACT;MACErB,EAAE,EAAE,IAAI;MACRsB,QAAQ,EAAE,qBAAqB;MAC/BC,OAAO,EAAE,CACP,6BAA6B,EAC7B,sCAAsC,EACtC,iCAAiC,EACjC,mCAAmC,CACpC;MACDC,aAAa,EAAE,CAAC;MAChBC,WAAW,EAAE;IACf,CAAC,CACF;IACDC,YAAY,EAAE,EAAE;IAChBC,WAAW,EAAE;EACf,CAAC;EACDC,UAAU,EAAE;AACd,CAAC,EACD;EACE5B,EAAE,EAAE,GAAG;EACPe,UAAU,EAAE,GAAG;EACfd,KAAK,EAAE,0BAA0B;EACjCC,WAAW,EAAE,gDAAgD;EAC7Dc,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE,CACP;IACEjB,EAAE,EAAE,GAAG;IACPkB,IAAI,EAAE,MAAM;IACZjB,KAAK,EAAE,mBAAmB;IAC1BgB,OAAO,EAAE,gDAAgD;IACzDD,KAAK,EAAE;EACT,CAAC,CACF;EACDY,UAAU,EAAE;AACd,CAAC,CACF;AAED,MAAMC,YAAgC,GAAG,CACvC;EACE7B,EAAE,EAAE,GAAG;EACP8B,MAAM,EAAE,GAAG;EACXf,UAAU,EAAE,GAAG;EACfgB,MAAM,EAAE,aAAa;EACrBC,eAAe,EAAE,GAAG;EACpBC,gBAAgB,EAAE,EAAE;EACpBC,SAAS,EAAE,sBAAsB;EACjCC,cAAc,EAAE;AAClB,CAAC,EACD;EACEnC,EAAE,EAAE,GAAG;EACP8B,MAAM,EAAE,GAAG;EACXf,UAAU,EAAE,GAAG;EACfgB,MAAM,EAAE,aAAa;EACrBE,gBAAgB,EAAE;AACpB,CAAC,CACF;AAED,OAAO,MAAMG,gBAAgB,GAAGxC,MAAM,CAAgB,CAAC,CACrDC,OAAO,CACL,CAACwC,GAAG,EAAEC,GAAG,MAAM;EACbC,SAAS,EAAExC,aAAa;EACxByC,OAAO,EAAE1B,WAAW;EACpB2B,QAAQ,EAAEZ,YAAY;EACtBa,QAAQ,EAAE,EAAE;EACZC,YAAY,EAAE,EAAE;EAChBC,SAAS,EAAE,KAAK;EAEhBC,cAAc,EAAE,MAAOC,YAAY,IAAK;IACtCT,GAAG,CAAC;MAAEO,SAAS,EAAE;IAAK,CAAC,CAAC;IAExB,IAAI;MACF,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MAEvD,MAAME,WAAqB,GAAG;QAC5B,GAAGJ,YAAY;QACf9C,EAAE,EAAEmD,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzB5C,SAAS,EAAE,IAAI0C,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MACpC,CAAC;MAEDjB,GAAG,CAACkB,KAAK,KAAK;QACZhB,SAAS,EAAE,CAAC,GAAGgB,KAAK,CAAChB,SAAS,EAAEW,WAAW,CAAC;QAC5CN,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdnB,GAAG,CAAC;QAAEO,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMY,KAAK;IACb;EACF,CAAC;EAEDC,cAAc,EAAEA,CAACzD,EAAU,EAAE0D,OAA0B,KAAK;IAC1DrB,GAAG,CAACkB,KAAK,KAAK;MACZhB,SAAS,EAAEgB,KAAK,CAAChB,SAAS,CAACoB,GAAG,CAACC,QAAQ,IACrCA,QAAQ,CAAC5D,EAAE,KAAKA,EAAE,GAAG;QAAE,GAAG4D,QAAQ;QAAE,GAAGF;MAAQ,CAAC,GAAGE,QACrD;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDC,cAAc,EAAG7D,EAAU,IAAK;IAC9BqC,GAAG,CAACkB,KAAK,KAAK;MACZhB,SAAS,EAAEgB,KAAK,CAAChB,SAAS,CAACuB,MAAM,CAACF,QAAQ,IAAIA,QAAQ,CAAC5D,EAAE,KAAKA,EAAE,CAAC;MACjEwC,OAAO,EAAEe,KAAK,CAACf,OAAO,CAACsB,MAAM,CAACC,MAAM,IAAIA,MAAM,CAAChD,UAAU,KAAKf,EAAE,CAAC;MACjEyC,QAAQ,EAAEc,KAAK,CAACd,QAAQ,CAACqB,MAAM,CAACrB,QAAQ,IAAIA,QAAQ,CAAC1B,UAAU,KAAKf,EAAE;IACxE,CAAC,CAAC,CAAC;EACL,CAAC;EAEDgE,eAAe,EAAGhE,EAAU,IAAK;IAC/B,OAAOsC,GAAG,CAAC,CAAC,CAACC,SAAS,CAAC0B,IAAI,CAACL,QAAQ,IAAIA,QAAQ,CAAC5D,EAAE,KAAKA,EAAE,CAAC;EAC7D,CAAC;EAEDkE,mBAAmB,EAAGpC,MAAc,IAAK;IACvC,MAAM;MAAES;IAAU,CAAC,GAAGD,GAAG,CAAC,CAAC;IAC3B,OAAOC,SAAS,CAACuB,MAAM,CAACF,QAAQ,IAAI;MAAA,IAAAO,qBAAA;MAClC,IAAI,CAACP,QAAQ,CAACtD,QAAQ,EAAE,OAAO,KAAK;MAEpC,QAAQsD,QAAQ,CAACzD,cAAc;QAC7B,KAAK,KAAK;UACR,OAAO,IAAI;QACb,KAAK,gBAAgB;UACnB,OAAO,EAAAgE,qBAAA,GAAAP,QAAQ,CAAChD,aAAa,cAAAuD,qBAAA,uBAAtBA,qBAAA,CAAwBC,QAAQ,CAACtC,MAAM,CAAC,KAAI,KAAK;QAC1D,KAAK,YAAY;UACf;UACA,OAAO,IAAI;QACb;UACE,OAAO,KAAK;MAChB;IACF,CAAC,CAAC;EACJ,CAAC;EAEDuC,SAAS,EAAGC,UAAU,IAAK;IACzB,MAAMC,SAAyB,GAAG;MAChC,GAAGD,UAAU;MACbtE,EAAE,EAAEmD,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC;IAC1B,CAAC;IAEDhB,GAAG,CAACkB,KAAK,KAAK;MACZf,OAAO,EAAE,CAAC,GAAGe,KAAK,CAACf,OAAO,EAAE+B,SAAS;IACvC,CAAC,CAAC,CAAC;EACL,CAAC;EAEDC,YAAY,EAAEA,CAACxE,EAAU,EAAE0D,OAAgC,KAAK;IAC9DrB,GAAG,CAACkB,KAAK,KAAK;MACZf,OAAO,EAAEe,KAAK,CAACf,OAAO,CAACmB,GAAG,CAACI,MAAM,IAC/BA,MAAM,CAAC/D,EAAE,KAAKA,EAAE,GAAG;QAAE,GAAG+D,MAAM;QAAE,GAAGL;MAAQ,CAAC,GAAGK,MACjD;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDU,YAAY,EAAGzE,EAAU,IAAK;IAC5BqC,GAAG,CAACkB,KAAK,KAAK;MACZf,OAAO,EAAEe,KAAK,CAACf,OAAO,CAACsB,MAAM,CAACC,MAAM,IAAIA,MAAM,CAAC/D,EAAE,KAAKA,EAAE;IAC1D,CAAC,CAAC,CAAC;EACL,CAAC;EAED0E,qBAAqB,EAAG3D,UAAkB,IAAK;IAC7C,OAAOuB,GAAG,CAAC,CAAC,CAACE,OAAO,CACjBsB,MAAM,CAACC,MAAM,IAAIA,MAAM,CAAChD,UAAU,KAAKA,UAAU,CAAC,CAClD4D,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC5D,KAAK,GAAG6D,CAAC,CAAC7D,KAAK,CAAC;EACtC,CAAC;EAED8D,eAAe,EAAEA,CAAChD,MAAc,EAAEf,UAAkB,KAAK;IACvD,OAAOuB,GAAG,CAAC,CAAC,CAACG,QAAQ,CAACwB,IAAI,CAACc,CAAC,IAAIA,CAAC,CAACjD,MAAM,KAAKA,MAAM,IAAIiD,CAAC,CAAChE,UAAU,KAAKA,UAAU,CAAC;EACrF,CAAC;EAEDiE,cAAc,EAAEA,CAAClD,MAAc,EAAEf,UAAkB,EAAE2C,OAAkC,KAAK;IAC1FrB,GAAG,CAACkB,KAAK,KAAK;MACZd,QAAQ,EAAEc,KAAK,CAACd,QAAQ,CAACkB,GAAG,CAAClB,QAAQ,IACnCA,QAAQ,CAACX,MAAM,KAAKA,MAAM,IAAIW,QAAQ,CAAC1B,UAAU,KAAKA,UAAU,GAC5D;QAAE,GAAG0B,QAAQ;QAAE,GAAGiB,OAAO;QAAEvB,cAAc,EAAE,IAAIgB,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MAAE,CAAC,GACrEb,QACN;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDwC,aAAa,EAAEA,CAACnD,MAAc,EAAEf,UAAkB,KAAK;IACrD,MAAMmE,gBAAgB,GAAG5C,GAAG,CAAC,CAAC,CAACwC,eAAe,CAAChD,MAAM,EAAEf,UAAU,CAAC;IAElE,IAAI,CAACmE,gBAAgB,EAAE;MACrB,MAAMC,WAA6B,GAAG;QACpCnF,EAAE,EAAEmD,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzBvB,MAAM;QACNf,UAAU;QACVgB,MAAM,EAAE,aAAa;QACrBE,gBAAgB,EAAE,EAAE;QACpBC,SAAS,EAAE,IAAIiB,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;QACnCnB,cAAc,EAAE,IAAIgB,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MACzC,CAAC;MAEDjB,GAAG,CAACkB,KAAK,KAAK;QACZd,QAAQ,EAAE,CAAC,GAAGc,KAAK,CAACd,QAAQ,EAAE0C,WAAW;MAC3C,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACL7C,GAAG,CAAC,CAAC,CAAC0C,cAAc,CAAClD,MAAM,EAAEf,UAAU,EAAE;QAAEgB,MAAM,EAAE;MAAc,CAAC,CAAC;IACrE;EACF,CAAC;EAEDqD,cAAc,EAAEA,CAACtD,MAAc,EAAEf,UAAkB,EAAEK,QAAgB,KAAK;IACxE,MAAMqB,QAAQ,GAAGH,GAAG,CAAC,CAAC,CAACwC,eAAe,CAAChD,MAAM,EAAEf,UAAU,CAAC;IAC1D,IAAI,CAAC0B,QAAQ,EAAE;IAEf,MAAMR,gBAAgB,GAAG,CAAC,GAAGQ,QAAQ,CAACR,gBAAgB,CAAC;IACvD,IAAI,CAACA,gBAAgB,CAACmC,QAAQ,CAAChD,QAAQ,CAAC,EAAE;MACxCa,gBAAgB,CAACoD,IAAI,CAACjE,QAAQ,CAAC;IACjC;IAEAkB,GAAG,CAAC,CAAC,CAAC0C,cAAc,CAAClD,MAAM,EAAEf,UAAU,EAAE;MACvCkB,gBAAgB;MAChBD,eAAe,EAAEZ;IACnB,CAAC,CAAC;EACJ,CAAC;EAEDkE,gBAAgB,EAAEA,CAACxD,MAAc,EAAEf,UAAkB,EAAEwE,UAAkB,KAAK;IAC5EjD,GAAG,CAAC,CAAC,CAAC0C,cAAc,CAAClD,MAAM,EAAEf,UAAU,EAAE;MACvCgB,MAAM,EAAEwD,UAAU,IAAI,EAAE,GAAG,WAAW,GAAG,QAAQ;MACjDA,UAAU;MACVC,WAAW,EAAE,IAAIrC,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;IACtC,CAAC,CAAC;EACJ,CAAC;EAEDmC,iBAAiB,EAAGC,WAAW,IAAK;IAClC,MAAMC,UAA2B,GAAG;MAClC,GAAGD,WAAW;MACd1F,EAAE,EAAEmD,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC;IAC1B,CAAC;IAEDhB,GAAG,CAACkB,KAAK,KAAK;MACZb,QAAQ,EAAE,CAAC,GAAGa,KAAK,CAACb,QAAQ,EAAEiD,UAAU;IAC1C,CAAC,CAAC,CAAC;EACL,CAAC;EAEDC,eAAe,EAAEA,CAAC9D,MAAc,EAAE+D,MAAc,KAAK;IACnD,OAAOvD,GAAG,CAAC,CAAC,CAACI,QAAQ,CAACoB,MAAM,CAACgC,OAAO,IAClCA,OAAO,CAAChE,MAAM,KAAKA,MAAM,IAAIgE,OAAO,CAACD,MAAM,KAAKA,MAClD,CAAC,CAAClB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACkB,aAAa,GAAGnB,CAAC,CAACmB,aAAa,CAAC;EACrD,CAAC;EAEDC,uBAAuB,EAAE,MAAOC,OAA4B,IAAK;IAC/D5D,GAAG,CAAC;MAAEO,SAAS,EAAE;IAAK,CAAC,CAAC;IAExB,IAAI;MACF;MACA,MAAM;QAAEoD;MAAwB,CAAC,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC;MACtE,MAAME,gBAAgB,GAAG,MAAMF,uBAAuB,CAACC,OAAO,CAAC;MAE/D5D,GAAG,CAAC;QAAEO,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,OAAOsD,gBAAgB;IACzB,CAAC,CAAC,OAAO1C,KAAK,EAAE;MACdnB,GAAG,CAAC;QAAEO,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMY,KAAK;IACb;EACF,CAAC;EAED2C,eAAe,EAAGC,OAAiB,IAAK;IACtC,OAAO9D,GAAG,CAAC,CAAC,CAACG,QAAQ,CAACqB,MAAM,CAACrB,QAAQ,IAAI2D,OAAO,CAAChC,QAAQ,CAAC3B,QAAQ,CAACX,MAAM,CAAC,CAAC;EAC7E,CAAC;EAEDuE,qBAAqB,EAAGtF,UAAkB,IAAK;IAC7C,MAAM;MAAE0B;IAAS,CAAC,GAAGH,GAAG,CAAC,CAAC;IAC1B,MAAMgE,gBAAgB,GAAG7D,QAAQ,CAACqB,MAAM,CAACiB,CAAC,IAAIA,CAAC,CAAChE,UAAU,KAAKA,UAAU,CAAC;IAE1E,MAAMwF,SAAS,GAAGD,gBAAgB,CAACxC,MAAM,CAACiB,CAAC,IAAIA,CAAC,CAAChD,MAAM,KAAK,WAAW,CAAC,CAACyE,MAAM;IAC/E,MAAMC,UAAU,GAAGH,gBAAgB,CAACxC,MAAM,CAACiB,CAAC,IAAIA,CAAC,CAAChD,MAAM,KAAK,aAAa,CAAC,CAACyE,MAAM;IAClF,MAAME,MAAM,GAAGJ,gBAAgB,CAACxC,MAAM,CAACiB,CAAC,IAAIA,CAAC,CAAChD,MAAM,KAAK,QAAQ,CAAC,CAACyE,MAAM;IACzE,MAAMG,UAAU,GAAGL,gBAAgB,CAACxC,MAAM,CAACiB,CAAC,IAAIA,CAAC,CAAChD,MAAM,KAAK,aAAa,CAAC,CAACyE,MAAM;IAElF,MAAMI,SAAS,GAAGN,gBAAgB,CAC/BxC,MAAM,CAACiB,CAAC,IAAIA,CAAC,CAACQ,UAAU,KAAKsB,SAAS,CAAC,CACvCC,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,IAAIhC,CAAC,CAACQ,UAAU,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IACnD,MAAMyB,WAAW,GAAGV,gBAAgB,CAACxC,MAAM,CAACiB,CAAC,IAAIA,CAAC,CAACQ,UAAU,KAAKsB,SAAS,CAAC,CAACL,MAAM;IAEnF,OAAO;MACLS,UAAU,EAAEX,gBAAgB,CAACE,MAAM;MACnCD,SAAS;MACTE,UAAU;MACVE,UAAU,EAAEA,UAAU,GAAGD,MAAM;MAAE;MACjCQ,YAAY,EAAEF,WAAW,GAAG,CAAC,GAAGJ,SAAS,GAAGI,WAAW,GAAG;IAC5D,CAAC;EACH;AACF,CAAC,CAAC,EACF;EACEG,IAAI,EAAE,kBAAkB;EACxBC,OAAO,EAAEtH,iBAAiB,CAAC,MAAMuH,YAAY,CAAC;EAC9CC,UAAU,EAAG/D,KAAK,KAAM;IACtBhB,SAAS,EAAEgB,KAAK,CAAChB,SAAS;IAC1BC,OAAO,EAAEe,KAAK,CAACf,OAAO;IACtBC,QAAQ,EAAEc,KAAK,CAACd,QAAQ;IACxBC,QAAQ,EAAEa,KAAK,CAACb,QAAQ;IACxBC,YAAY,EAAEY,KAAK,CAACZ;EACtB,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}