{"ast":null,"code":"/*\nIMPORTANT NOTICE: DO NOT REMOVE\n./src/api/chat-service.ts\nIf the user wants to use AI to generate text, answer questions, or analyze images you can use the functions defined in this file to communicate with the OpenAI, Anthropic, and Grok APIs.\n*/\n\nimport { getAnthropicClient } from \"./anthropic\";\nimport { getOpenAIClient } from \"./openai\";\nimport { getGrokClient } from \"./grok\";\n\n/**\n * Get a text response from Anthropic\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getAnthropicTextResponse = async (messages, options) => {\n  try {\n    var _response$usage, _response$usage2, _response$usage3, _response$usage4;\n    const client = getAnthropicClient();\n    const defaultModel = \"claude-3-5-sonnet-20240620\";\n    const response = await client.messages.create({\n      model: (options === null || options === void 0 ? void 0 : options.model) || defaultModel,\n      messages: messages.map(msg => ({\n        role: msg.role === \"assistant\" ? \"assistant\" : \"user\",\n        content: msg.content\n      })),\n      max_tokens: (options === null || options === void 0 ? void 0 : options.maxTokens) || 2048,\n      temperature: (options === null || options === void 0 ? void 0 : options.temperature) || 0.7\n    });\n\n    // Handle content blocks from the response\n    const content = response.content.reduce((acc, block) => {\n      if (\"text\" in block) {\n        return acc + block.text;\n      }\n      return acc;\n    }, \"\");\n    return {\n      content,\n      usage: {\n        promptTokens: ((_response$usage = response.usage) === null || _response$usage === void 0 ? void 0 : _response$usage.input_tokens) || 0,\n        completionTokens: ((_response$usage2 = response.usage) === null || _response$usage2 === void 0 ? void 0 : _response$usage2.output_tokens) || 0,\n        totalTokens: (((_response$usage3 = response.usage) === null || _response$usage3 === void 0 ? void 0 : _response$usage3.input_tokens) || 0) + (((_response$usage4 = response.usage) === null || _response$usage4 === void 0 ? void 0 : _response$usage4.output_tokens) || 0)\n      }\n    };\n  } catch (error) {\n    console.error(\"Anthropic API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from Anthropic\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getAnthropicChatResponse = async prompt => {\n  return await getAnthropicTextResponse([{\n    role: \"user\",\n    content: prompt\n  }]);\n};\n\n/**\n * Get a text response from OpenAI\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getOpenAITextResponse = async (messages, options) => {\n  try {\n    var _options$temperature, _response$choices$, _response$choices$$me, _response$usage5, _response$usage6, _response$usage7;\n    const client = getOpenAIClient();\n    const defaultModel = \"gpt-4o\"; //accepts images as well, use this for image analysis\n\n    const response = await client.chat.completions.create({\n      model: (options === null || options === void 0 ? void 0 : options.model) || defaultModel,\n      messages: messages,\n      temperature: (_options$temperature = options === null || options === void 0 ? void 0 : options.temperature) !== null && _options$temperature !== void 0 ? _options$temperature : 0.7,\n      max_tokens: (options === null || options === void 0 ? void 0 : options.maxTokens) || 2048\n    });\n    return {\n      content: ((_response$choices$ = response.choices[0]) === null || _response$choices$ === void 0 ? void 0 : (_response$choices$$me = _response$choices$.message) === null || _response$choices$$me === void 0 ? void 0 : _response$choices$$me.content) || \"\",\n      usage: {\n        promptTokens: ((_response$usage5 = response.usage) === null || _response$usage5 === void 0 ? void 0 : _response$usage5.prompt_tokens) || 0,\n        completionTokens: ((_response$usage6 = response.usage) === null || _response$usage6 === void 0 ? void 0 : _response$usage6.completion_tokens) || 0,\n        totalTokens: ((_response$usage7 = response.usage) === null || _response$usage7 === void 0 ? void 0 : _response$usage7.total_tokens) || 0\n      }\n    };\n  } catch (error) {\n    console.error(\"OpenAI API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from OpenAI\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getOpenAIChatResponse = async prompt => {\n  return await getOpenAITextResponse([{\n    role: \"user\",\n    content: prompt\n  }]);\n};\n\n/**\n * Get a text response from Grok\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getGrokTextResponse = async (messages, options) => {\n  try {\n    var _options$temperature2, _response$choices$2, _response$choices$2$m, _response$usage8, _response$usage9, _response$usage0;\n    const client = getGrokClient();\n    const defaultModel = \"grok-3-beta\";\n    const response = await client.chat.completions.create({\n      model: (options === null || options === void 0 ? void 0 : options.model) || defaultModel,\n      messages: messages,\n      temperature: (_options$temperature2 = options === null || options === void 0 ? void 0 : options.temperature) !== null && _options$temperature2 !== void 0 ? _options$temperature2 : 0.7,\n      max_tokens: (options === null || options === void 0 ? void 0 : options.maxTokens) || 2048\n    });\n    return {\n      content: ((_response$choices$2 = response.choices[0]) === null || _response$choices$2 === void 0 ? void 0 : (_response$choices$2$m = _response$choices$2.message) === null || _response$choices$2$m === void 0 ? void 0 : _response$choices$2$m.content) || \"\",\n      usage: {\n        promptTokens: ((_response$usage8 = response.usage) === null || _response$usage8 === void 0 ? void 0 : _response$usage8.prompt_tokens) || 0,\n        completionTokens: ((_response$usage9 = response.usage) === null || _response$usage9 === void 0 ? void 0 : _response$usage9.completion_tokens) || 0,\n        totalTokens: ((_response$usage0 = response.usage) === null || _response$usage0 === void 0 ? void 0 : _response$usage0.total_tokens) || 0\n      }\n    };\n  } catch (error) {\n    console.error(\"Grok API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from Grok\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getGrokChatResponse = async prompt => {\n  return await getGrokTextResponse([{\n    role: \"user\",\n    content: prompt\n  }]);\n};","map":{"version":3,"names":["getAnthropicClient","getOpenAIClient","getGrokClient","getAnthropicTextResponse","messages","options","_response$usage","_response$usage2","_response$usage3","_response$usage4","client","defaultModel","response","create","model","map","msg","role","content","max_tokens","maxTokens","temperature","reduce","acc","block","text","usage","promptTokens","input_tokens","completionTokens","output_tokens","totalTokens","error","console","getAnthropicChatResponse","prompt","getOpenAITextResponse","_options$temperature","_response$choices$","_response$choices$$me","_response$usage5","_response$usage6","_response$usage7","chat","completions","choices","message","prompt_tokens","completion_tokens","total_tokens","getOpenAIChatResponse","getGrokTextResponse","_options$temperature2","_response$choices$2","_response$choices$2$m","_response$usage8","_response$usage9","_response$usage0","getGrokChatResponse"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/api/chat-service.ts"],"sourcesContent":["/*\nIMPORTANT NOTICE: DO NOT REMOVE\n./src/api/chat-service.ts\nIf the user wants to use AI to generate text, answer questions, or analyze images you can use the functions defined in this file to communicate with the OpenAI, Anthropic, and Grok APIs.\n*/\nimport { AIMessage, AIRequestOptions, AIResponse } from \"../types/ai\";\nimport { getAnthropicClient } from \"./anthropic\";\nimport { getOpenAIClient } from \"./openai\";\nimport { getGrokClient } from \"./grok\";\n\n/**\n * Get a text response from Anthropic\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getAnthropicTextResponse = async (\n  messages: AIMessage[],\n  options?: AIRequestOptions,\n): Promise<AIResponse> => {\n  try {\n    const client = getAnthropicClient();\n    const defaultModel = \"claude-3-5-sonnet-20240620\";\n\n    const response = await client.messages.create({\n      model: options?.model || defaultModel,\n      messages: messages.map((msg) => ({\n        role: msg.role === \"assistant\" ? \"assistant\" : \"user\",\n        content: msg.content,\n      })),\n      max_tokens: options?.maxTokens || 2048,\n      temperature: options?.temperature || 0.7,\n    });\n\n    // Handle content blocks from the response\n    const content = response.content.reduce((acc, block) => {\n      if (\"text\" in block) {\n        return acc + block.text;\n      }\n      return acc;\n    }, \"\");\n\n    return {\n      content,\n      usage: {\n        promptTokens: response.usage?.input_tokens || 0,\n        completionTokens: response.usage?.output_tokens || 0,\n        totalTokens: (response.usage?.input_tokens || 0) + (response.usage?.output_tokens || 0),\n      },\n    };\n  } catch (error) {\n    console.error(\"Anthropic API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from Anthropic\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getAnthropicChatResponse = async (prompt: string): Promise<AIResponse> => {\n  return await getAnthropicTextResponse([{ role: \"user\", content: prompt }]);\n};\n\n/**\n * Get a text response from OpenAI\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getOpenAITextResponse = async (messages: AIMessage[], options?: AIRequestOptions): Promise<AIResponse> => {\n  try {\n    const client = getOpenAIClient();\n    const defaultModel = \"gpt-4o\"; //accepts images as well, use this for image analysis\n\n    const response = await client.chat.completions.create({\n      model: options?.model || defaultModel,\n      messages: messages,\n      temperature: options?.temperature ?? 0.7,\n      max_tokens: options?.maxTokens || 2048,\n    });\n\n    return {\n      content: response.choices[0]?.message?.content || \"\",\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      },\n    };\n  } catch (error) {\n    console.error(\"OpenAI API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from OpenAI\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getOpenAIChatResponse = async (prompt: string): Promise<AIResponse> => {\n  return await getOpenAITextResponse([{ role: \"user\", content: prompt }]);\n};\n\n/**\n * Get a text response from Grok\n * @param messages - The messages to send to the AI\n * @param options - The options for the request\n * @returns The response from the AI\n */\nexport const getGrokTextResponse = async (messages: AIMessage[], options?: AIRequestOptions): Promise<AIResponse> => {\n  try {\n    const client = getGrokClient();\n    const defaultModel = \"grok-3-beta\";\n\n    const response = await client.chat.completions.create({\n      model: options?.model || defaultModel,\n      messages: messages,\n      temperature: options?.temperature ?? 0.7,\n      max_tokens: options?.maxTokens || 2048,\n    });\n\n    return {\n      content: response.choices[0]?.message?.content || \"\",\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      },\n    };\n  } catch (error) {\n    console.error(\"Grok API Error:\", error);\n    throw error;\n  }\n};\n\n/**\n * Get a simple chat response from Grok\n * @param prompt - The prompt to send to the AI\n * @returns The response from the AI\n */\nexport const getGrokChatResponse = async (prompt: string): Promise<AIResponse> => {\n  return await getGrokTextResponse([{ role: \"user\", content: prompt }]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}