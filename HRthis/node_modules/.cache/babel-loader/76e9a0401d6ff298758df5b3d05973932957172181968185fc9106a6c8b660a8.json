{"ast":null,"code":"import{create}from'zustand';import{persist,createJSONStorage}from'zustand/middleware';// Mock authentication data\nconst mockUsers=[{id:'1',email:'max.mustermann@workytime.de',name:'Max Mustermann',role:'EMPLOYEE',organizationId:'org1'},{id:'2',email:'anna.admin@workytime.de',name:'Anna Admin',role:'ADMIN',organizationId:'org1'}];const mockOrganizations=[{id:'org1',name:'WorkyTime GmbH',slug:'workytime-gmbh'}];export const useAuthStore=create()(persist((set,get)=>({user:null,organization:null,isAuthenticated:false,isLoading:false,login:async(email,password)=>{set({isLoading:true});try{// Simulate API call delay\nawait new Promise(resolve=>setTimeout(resolve,1000));// Mock authentication - in real app, this would be API call\nconst user=mockUsers.find(u=>u.email===email);if(!user||password!=='password'){throw new Error('Ungültige Anmeldedaten');}const organization=mockOrganizations.find(org=>org.id===user.organizationId);set({user,organization,isAuthenticated:true,isLoading:false});}catch(error){set({isLoading:false});throw error;}},logout:()=>{set({user:null,organization:null,isAuthenticated:false});},setUser:user=>{set({user});},setOrganization:organization=>{set({organization});}}),{name:'auth-storage',storage:createJSONStorage(()=>localStorage),partialize:state=>({user:state.user,organization:state.organization,isAuthenticated:state.isAuthenticated})}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockUsers","id","email","name","role","organizationId","mockOrganizations","slug","useAuthStore","set","get","user","organization","isAuthenticated","isLoading","login","password","Promise","resolve","setTimeout","find","u","Error","org","error","logout","setUser","setOrganization","storage","localStorage","partialize","state"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/auth.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { User, Organization } from '../types';\n\ninterface AuthState {\n  user: User | null;\n  organization: Organization | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  setUser: (user: User) => void;\n  setOrganization: (org: Organization) => void;\n}\n\n// Mock authentication data\nconst mockUsers: User[] = [\n  {\n    id: '1',\n    email: 'max.mustermann@workytime.de',\n    name: 'Max Mustermann',\n    role: 'EMPLOYEE',\n    organizationId: 'org1'\n  },\n  {\n    id: '2',\n    email: 'anna.admin@workytime.de',\n    name: 'Anna Admin',\n    role: 'ADMIN',\n    organizationId: 'org1'\n  }\n];\n\nconst mockOrganizations: Organization[] = [\n  {\n    id: 'org1',\n    name: 'WorkyTime GmbH',\n    slug: 'workytime-gmbh'\n  }\n];\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      organization: null,\n      isAuthenticated: false,\n      isLoading: false,\n\n      login: async (email: string, password: string) => {\n        set({ isLoading: true });\n        \n        try {\n          // Simulate API call delay\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Mock authentication - in real app, this would be API call\n          const user = mockUsers.find(u => u.email === email);\n          \n          if (!user || password !== 'password') {\n            throw new Error('Ungültige Anmeldedaten');\n          }\n          \n          const organization = mockOrganizations.find(org => org.id === user.organizationId);\n          \n          set({ \n            user, \n            organization, \n            isAuthenticated: true, \n            isLoading: false \n          });\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      logout: () => {\n        set({ \n          user: null, \n          organization: null, \n          isAuthenticated: false \n        });\n      },\n\n      setUser: (user: User) => {\n        set({ user });\n      },\n\n      setOrganization: (organization: Organization) => {\n        set({ organization });\n      }\n    }),\n    {\n      name: 'auth-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        user: state.user, \n        organization: state.organization,\n        isAuthenticated: state.isAuthenticated \n      }),\n    }\n  )\n);"],"mappings":"AAAA,OAASA,MAAM,KAAQ,SAAS,CAChC,OAASC,OAAO,CAAEC,iBAAiB,KAAQ,oBAAoB,CAc/D;AACA,KAAM,CAAAC,SAAiB,CAAG,CACxB,CACEC,EAAE,CAAE,GAAG,CACPC,KAAK,CAAE,6BAA6B,CACpCC,IAAI,CAAE,gBAAgB,CACtBC,IAAI,CAAE,UAAU,CAChBC,cAAc,CAAE,MAClB,CAAC,CACD,CACEJ,EAAE,CAAE,GAAG,CACPC,KAAK,CAAE,yBAAyB,CAChCC,IAAI,CAAE,YAAY,CAClBC,IAAI,CAAE,OAAO,CACbC,cAAc,CAAE,MAClB,CAAC,CACF,CAED,KAAM,CAAAC,iBAAiC,CAAG,CACxC,CACEL,EAAE,CAAE,MAAM,CACVE,IAAI,CAAE,gBAAgB,CACtBI,IAAI,CAAE,gBACR,CAAC,CACF,CAED,MAAO,MAAM,CAAAC,YAAY,CAAGX,MAAM,CAAY,CAAC,CAC7CC,OAAO,CACL,CAACW,GAAG,CAAEC,GAAG,IAAM,CACbC,IAAI,CAAE,IAAI,CACVC,YAAY,CAAE,IAAI,CAClBC,eAAe,CAAE,KAAK,CACtBC,SAAS,CAAE,KAAK,CAEhBC,KAAK,CAAE,KAAAA,CAAOb,KAAa,CAAEc,QAAgB,GAAK,CAChDP,GAAG,CAAC,CAAEK,SAAS,CAAE,IAAK,CAAC,CAAC,CAExB,GAAI,CACF;AACA,KAAM,IAAI,CAAAG,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD;AACA,KAAM,CAAAP,IAAI,CAAGX,SAAS,CAACoB,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACnB,KAAK,GAAKA,KAAK,CAAC,CAEnD,GAAI,CAACS,IAAI,EAAIK,QAAQ,GAAK,UAAU,CAAE,CACpC,KAAM,IAAI,CAAAM,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA,KAAM,CAAAV,YAAY,CAAGN,iBAAiB,CAACc,IAAI,CAACG,GAAG,EAAIA,GAAG,CAACtB,EAAE,GAAKU,IAAI,CAACN,cAAc,CAAC,CAElFI,GAAG,CAAC,CACFE,IAAI,CACJC,YAAY,CACZC,eAAe,CAAE,IAAI,CACrBC,SAAS,CAAE,KACb,CAAC,CAAC,CACJ,CAAE,MAAOU,KAAK,CAAE,CACdf,GAAG,CAAC,CAAEK,SAAS,CAAE,KAAM,CAAC,CAAC,CACzB,KAAM,CAAAU,KAAK,CACb,CACF,CAAC,CAEDC,MAAM,CAAEA,CAAA,GAAM,CACZhB,GAAG,CAAC,CACFE,IAAI,CAAE,IAAI,CACVC,YAAY,CAAE,IAAI,CAClBC,eAAe,CAAE,KACnB,CAAC,CAAC,CACJ,CAAC,CAEDa,OAAO,CAAGf,IAAU,EAAK,CACvBF,GAAG,CAAC,CAAEE,IAAK,CAAC,CAAC,CACf,CAAC,CAEDgB,eAAe,CAAGf,YAA0B,EAAK,CAC/CH,GAAG,CAAC,CAAEG,YAAa,CAAC,CAAC,CACvB,CACF,CAAC,CAAC,CACF,CACET,IAAI,CAAE,cAAc,CACpByB,OAAO,CAAE7B,iBAAiB,CAAC,IAAM8B,YAAY,CAAC,CAC9CC,UAAU,CAAGC,KAAK,GAAM,CACtBpB,IAAI,CAAEoB,KAAK,CAACpB,IAAI,CAChBC,YAAY,CAAEmB,KAAK,CAACnB,YAAY,CAChCC,eAAe,CAAEkB,KAAK,CAAClB,eACzB,CAAC,CACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}