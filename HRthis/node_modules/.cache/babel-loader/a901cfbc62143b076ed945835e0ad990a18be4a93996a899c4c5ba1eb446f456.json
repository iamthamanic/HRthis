{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock authentication data\nconst mockUsers = [{\n  id: '1',\n  email: 'max.mustermann@workytime.de',\n  name: 'Max Mustermann',\n  role: 'EMPLOYEE',\n  organizationId: 'org1'\n}, {\n  id: '2',\n  email: 'anna.admin@workytime.de',\n  name: 'Anna Admin',\n  role: 'ADMIN',\n  organizationId: 'org1'\n}];\nconst mockOrganizations = [{\n  id: 'org1',\n  name: 'WorkyTime GmbH',\n  slug: 'workytime-gmbh'\n}];\nexport const useAuthStore = create()(persist((set, get) => ({\n  user: null,\n  organization: null,\n  isAuthenticated: false,\n  isLoading: false,\n  login: async (email, password) => {\n    set({\n      isLoading: true\n    });\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock authentication - in real app, this would be API call\n      const user = mockUsers.find(u => u.email === email);\n      if (!user || password !== 'password') {\n        throw new Error('Ungültige Anmeldedaten');\n      }\n      const organization = mockOrganizations.find(org => org.id === user.organizationId);\n      set({\n        user,\n        organization,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  logout: () => {\n    set({\n      user: null,\n      organization: null,\n      isAuthenticated: false\n    });\n  },\n  setUser: user => {\n    set({\n      user\n    });\n  },\n  setOrganization: organization => {\n    set({\n      organization\n    });\n  }\n}), {\n  name: 'auth-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    user: state.user,\n    organization: state.organization,\n    isAuthenticated: state.isAuthenticated\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockUsers","id","email","name","role","organizationId","mockOrganizations","slug","useAuthStore","set","get","user","organization","isAuthenticated","isLoading","login","password","Promise","resolve","setTimeout","find","u","Error","org","error","logout","setUser","setOrganization","storage","localStorage","partialize","state"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/auth.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { User, Organization } from '../types';\n\ninterface AuthState {\n  user: User | null;\n  organization: Organization | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  setUser: (user: User) => void;\n  setOrganization: (org: Organization) => void;\n}\n\n// Mock authentication data\nconst mockUsers: User[] = [\n  {\n    id: '1',\n    email: 'max.mustermann@workytime.de',\n    name: 'Max Mustermann',\n    role: 'EMPLOYEE',\n    organizationId: 'org1'\n  },\n  {\n    id: '2',\n    email: 'anna.admin@workytime.de',\n    name: 'Anna Admin',\n    role: 'ADMIN',\n    organizationId: 'org1'\n  }\n];\n\nconst mockOrganizations: Organization[] = [\n  {\n    id: 'org1',\n    name: 'WorkyTime GmbH',\n    slug: 'workytime-gmbh'\n  }\n];\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      organization: null,\n      isAuthenticated: false,\n      isLoading: false,\n\n      login: async (email: string, password: string) => {\n        set({ isLoading: true });\n        \n        try {\n          // Simulate API call delay\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Mock authentication - in real app, this would be API call\n          const user = mockUsers.find(u => u.email === email);\n          \n          if (!user || password !== 'password') {\n            throw new Error('Ungültige Anmeldedaten');\n          }\n          \n          const organization = mockOrganizations.find(org => org.id === user.organizationId);\n          \n          set({ \n            user, \n            organization, \n            isAuthenticated: true, \n            isLoading: false \n          });\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      logout: () => {\n        set({ \n          user: null, \n          organization: null, \n          isAuthenticated: false \n        });\n      },\n\n      setUser: (user: User) => {\n        set({ user });\n      },\n\n      setOrganization: (organization: Organization) => {\n        set({ organization });\n      }\n    }),\n    {\n      name: 'auth-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        user: state.user, \n        organization: state.organization,\n        isAuthenticated: state.isAuthenticated \n      }),\n    }\n  )\n);"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;AAc/D;AACA,MAAMC,SAAiB,GAAG,CACxB;EACEC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,6BAA6B;EACpCC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,UAAU;EAChBC,cAAc,EAAE;AAClB,CAAC,EACD;EACEJ,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,yBAAyB;EAChCC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,OAAO;EACbC,cAAc,EAAE;AAClB,CAAC,CACF;AAED,MAAMC,iBAAiC,GAAG,CACxC;EACEL,EAAE,EAAE,MAAM;EACVE,IAAI,EAAE,gBAAgB;EACtBI,IAAI,EAAE;AACR,CAAC,CACF;AAED,OAAO,MAAMC,YAAY,GAAGX,MAAM,CAAY,CAAC,CAC7CC,OAAO,CACL,CAACW,GAAG,EAAEC,GAAG,MAAM;EACbC,IAAI,EAAE,IAAI;EACVC,YAAY,EAAE,IAAI;EAClBC,eAAe,EAAE,KAAK;EACtBC,SAAS,EAAE,KAAK;EAEhBC,KAAK,EAAE,MAAAA,CAAOb,KAAa,EAAEc,QAAgB,KAAK;IAChDP,GAAG,CAAC;MAAEK,SAAS,EAAE;IAAK,CAAC,CAAC;IAExB,IAAI;MACF;MACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,MAAMP,IAAI,GAAGX,SAAS,CAACoB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACnB,KAAK,KAAKA,KAAK,CAAC;MAEnD,IAAI,CAACS,IAAI,IAAIK,QAAQ,KAAK,UAAU,EAAE;QACpC,MAAM,IAAIM,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAEA,MAAMV,YAAY,GAAGN,iBAAiB,CAACc,IAAI,CAACG,GAAG,IAAIA,GAAG,CAACtB,EAAE,KAAKU,IAAI,CAACN,cAAc,CAAC;MAElFI,GAAG,CAAC;QACFE,IAAI;QACJC,YAAY;QACZC,eAAe,EAAE,IAAI;QACrBC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdf,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMU,KAAK;IACb;EACF,CAAC;EAEDC,MAAM,EAAEA,CAAA,KAAM;IACZhB,GAAG,CAAC;MACFE,IAAI,EAAE,IAAI;MACVC,YAAY,EAAE,IAAI;MAClBC,eAAe,EAAE;IACnB,CAAC,CAAC;EACJ,CAAC;EAEDa,OAAO,EAAGf,IAAU,IAAK;IACvBF,GAAG,CAAC;MAAEE;IAAK,CAAC,CAAC;EACf,CAAC;EAEDgB,eAAe,EAAGf,YAA0B,IAAK;IAC/CH,GAAG,CAAC;MAAEG;IAAa,CAAC,CAAC;EACvB;AACF,CAAC,CAAC,EACF;EACET,IAAI,EAAE,cAAc;EACpByB,OAAO,EAAE7B,iBAAiB,CAAC,MAAM8B,YAAY,CAAC;EAC9CC,UAAU,EAAGC,KAAK,KAAM;IACtBpB,IAAI,EAAEoB,KAAK,CAACpB,IAAI;IAChBC,YAAY,EAAEmB,KAAK,CAACnB,YAAY;IAChCC,eAAe,EAAEkB,KAAK,CAAClB;EACzB,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}