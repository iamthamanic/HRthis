{"ast":null,"code":"import _objectSpread from\"/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{create}from'zustand';import{persist,createJSONStorage}from'zustand/middleware';// Mock data\nconst mockTrainings=[{id:'1',title:'Datenschutz und DSGVO Grundlagen',description:'Pflichtschulung zu Datenschutz-Grundlagen und DSGVO-Compliance für alle Mitarbeiter',targetAudience:'ALL',startDate:'2024-01-01',endDate:'2024-12-31',isActive:true,isMandatory:true,createdBy:'2',createdAt:'2024-01-01T10:00:00Z',estimatedDuration:45,category:'COMPLIANCE'},{id:'2',title:'Onboarding Programm',description:'Umfassendes Einführungsprogramm für neue Mitarbeiter',targetAudience:'SPECIFIC_USERS',targetUserIds:['1'],startDate:'2024-12-01',isActive:true,isMandatory:true,createdBy:'2',createdAt:'2024-11-15T14:00:00Z',estimatedDuration:120,category:'ONBOARDING'},{id:'3',title:'Microsoft Office 365 Schulung',description:'Erweiterte Funktionen von Office 365 für effizienteres Arbeiten',targetAudience:'DEPARTMENT',targetDepartments:['IT','Administration'],startDate:'2024-11-01',endDate:'2025-01-31',isActive:true,isMandatory:false,createdBy:'2',createdAt:'2024-10-15T09:00:00Z',estimatedDuration:90,category:'SKILLS'}];const mockLessons=[{id:'1',trainingId:'1',title:'Was ist Datenschutz?',description:'Grundlagen des Datenschutzes und warum er wichtig ist',order:1,content:[{id:'1',type:'TEXT',title:'Einführung',content:'Datenschutz betrifft uns alle und ist ein Grundrecht...',order:1}],quiz:{id:'quiz1',lessonId:'1',questions:[{id:'q1',question:'Was bedeutet DSGVO?',options:['Datenschutz-Grundverordnung','Deutsche Sicherheits-Grundverordnung','Digitale Schutz-Grundverordnung','Daten-Sicherheits-Grundverordnung'],correctAnswer:0,explanation:'DSGVO steht für Datenschutz-Grundverordnung, die europäische Verordnung zum Schutz personenbezogener Daten.'}],passingScore:80,maxAttempts:3},isRequired:true},{id:'2',trainingId:'2',title:'Willkommen bei WorkyTime',description:'Erste Schritte und Orientierung im Unternehmen',order:1,content:[{id:'2',type:'TEXT',title:'Unternehmenswerte',content:'Willkommen bei WorkyTime! Unsere Werte sind...',order:1}],isRequired:true}];const mockProgress=[{id:'1',userId:'1',trainingId:'1',status:'IN_PROGRESS',currentLessonId:'1',completedLessons:[],startedAt:'2024-12-15T10:00:00Z',lastActivityAt:'2024-12-15T10:30:00Z'},{id:'2',userId:'1',trainingId:'2',status:'NOT_STARTED',completedLessons:[]}];export const useTrainingStore=create()(persist((set,get)=>({trainings:mockTrainings,lessons:mockLessons,progress:mockProgress,attempts:[],certificates:[],isLoading:false,createTraining:async trainingData=>{set({isLoading:true});try{await new Promise(resolve=>setTimeout(resolve,1000));const newTraining=_objectSpread(_objectSpread({},trainingData),{},{id:Date.now().toString(),createdAt:new Date().toISOString()});set(state=>({trainings:[...state.trainings,newTraining],isLoading:false}));}catch(error){set({isLoading:false});throw error;}},updateTraining:(id,updates)=>{set(state=>({trainings:state.trainings.map(training=>training.id===id?_objectSpread(_objectSpread({},training),updates):training)}));},deleteTraining:id=>{set(state=>({trainings:state.trainings.filter(training=>training.id!==id),lessons:state.lessons.filter(lesson=>lesson.trainingId!==id),progress:state.progress.filter(progress=>progress.trainingId!==id)}));},getTrainingById:id=>{return get().trainings.find(training=>training.id===id);},getTrainingsForUser:userId=>{const{trainings}=get();return trainings.filter(training=>{var _training$targetUserI;if(!training.isActive)return false;switch(training.targetAudience){case'ALL':return true;case'SPECIFIC_USERS':return((_training$targetUserI=training.targetUserIds)===null||_training$targetUserI===void 0?void 0:_training$targetUserI.includes(userId))||false;case'DEPARTMENT':// In real app, would check user's department\nreturn true;default:return false;}});},addLesson:lessonData=>{const newLesson=_objectSpread(_objectSpread({},lessonData),{},{id:Date.now().toString()});set(state=>({lessons:[...state.lessons,newLesson]}));},updateLesson:(id,updates)=>{set(state=>({lessons:state.lessons.map(lesson=>lesson.id===id?_objectSpread(_objectSpread({},lesson),updates):lesson)}));},deleteLesson:id=>{set(state=>({lessons:state.lessons.filter(lesson=>lesson.id!==id)}));},getLessonsForTraining:trainingId=>{return get().lessons.filter(lesson=>lesson.trainingId===trainingId).sort((a,b)=>a.order-b.order);},getUserProgress:(userId,trainingId)=>{return get().progress.find(p=>p.userId===userId&&p.trainingId===trainingId);},updateProgress:(userId,trainingId,updates)=>{set(state=>({progress:state.progress.map(progress=>progress.userId===userId&&progress.trainingId===trainingId?_objectSpread(_objectSpread(_objectSpread({},progress),updates),{},{lastActivityAt:new Date().toISOString()}):progress)}));},startTraining:(userId,trainingId)=>{const existingProgress=get().getUserProgress(userId,trainingId);if(!existingProgress){const newProgress={id:Date.now().toString(),userId,trainingId,status:'IN_PROGRESS',completedLessons:[],startedAt:new Date().toISOString(),lastActivityAt:new Date().toISOString()};set(state=>({progress:[...state.progress,newProgress]}));}else{get().updateProgress(userId,trainingId,{status:'IN_PROGRESS'});}},completeLesson:(userId,trainingId,lessonId)=>{const progress=get().getUserProgress(userId,trainingId);if(!progress)return;const completedLessons=[...progress.completedLessons];if(!completedLessons.includes(lessonId)){completedLessons.push(lessonId);}get().updateProgress(userId,trainingId,{completedLessons,currentLessonId:lessonId});},completeTraining:(userId,trainingId,finalScore)=>{get().updateProgress(userId,trainingId,{status:finalScore>=70?'COMPLETED':'FAILED',finalScore,completedAt:new Date().toISOString()});},submitQuizAttempt:attemptData=>{const newAttempt=_objectSpread(_objectSpread({},attemptData),{},{id:Date.now().toString()});set(state=>({attempts:[...state.attempts,newAttempt]}));},getUserAttempts:(userId,quizId)=>{return get().attempts.filter(attempt=>attempt.userId===userId&&attempt.quizId===quizId).sort((a,b)=>b.attemptNumber-a.attemptNumber);},generateTrainingContent:async request=>{set({isLoading:true});try{// Import AI service dynamically to avoid circular dependencies\nconst{generateTrainingContent}=await import('../api/training-ai');const generatedContent=await generateTrainingContent(request);set({isLoading:false});return generatedContent;}catch(error){set({isLoading:false});throw error;}},getTeamProgress:userIds=>{return get().progress.filter(progress=>userIds.includes(progress.userId));},getTrainingStatistics:trainingId=>{const{progress}=get();const trainingProgress=progress.filter(p=>p.trainingId===trainingId);const completed=trainingProgress.filter(p=>p.status==='COMPLETED').length;const inProgress=trainingProgress.filter(p=>p.status==='IN_PROGRESS').length;const failed=trainingProgress.filter(p=>p.status==='FAILED').length;const notStarted=trainingProgress.filter(p=>p.status==='NOT_STARTED').length;const scoresSum=trainingProgress.filter(p=>p.finalScore!==undefined).reduce((sum,p)=>sum+(p.finalScore||0),0);const scoresCount=trainingProgress.filter(p=>p.finalScore!==undefined).length;return{totalUsers:trainingProgress.length,completed,inProgress,notStarted:notStarted+failed,// Count failed as not started for simplicity\naverageScore:scoresCount>0?scoresSum/scoresCount:0};}}),{name:'training-storage',storage:createJSONStorage(()=>localStorage),partialize:state=>({trainings:state.trainings,lessons:state.lessons,progress:state.progress,attempts:state.attempts,certificates:state.certificates})}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockTrainings","id","title","description","targetAudience","startDate","endDate","isActive","isMandatory","createdBy","createdAt","estimatedDuration","category","targetUserIds","targetDepartments","mockLessons","trainingId","order","content","type","quiz","lessonId","questions","question","options","correctAnswer","explanation","passingScore","maxAttempts","isRequired","mockProgress","userId","status","currentLessonId","completedLessons","startedAt","lastActivityAt","useTrainingStore","set","get","trainings","lessons","progress","attempts","certificates","isLoading","createTraining","trainingData","Promise","resolve","setTimeout","newTraining","_objectSpread","Date","now","toString","toISOString","state","error","updateTraining","updates","map","training","deleteTraining","filter","lesson","getTrainingById","find","getTrainingsForUser","_training$targetUserI","includes","addLesson","lessonData","newLesson","updateLesson","deleteLesson","getLessonsForTraining","sort","a","b","getUserProgress","p","updateProgress","startTraining","existingProgress","newProgress","completeLesson","push","completeTraining","finalScore","completedAt","submitQuizAttempt","attemptData","newAttempt","getUserAttempts","quizId","attempt","attemptNumber","generateTrainingContent","request","generatedContent","getTeamProgress","userIds","getTrainingStatistics","trainingProgress","completed","length","inProgress","failed","notStarted","scoresSum","undefined","reduce","sum","scoresCount","totalUsers","averageScore","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/training.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { \n  Training, \n  TrainingLesson, \n  TrainingProgress, \n  TrainingAttempt, \n  TrainingCertificate,\n  AIGenerationRequest,\n  AIGeneratedContent\n} from '../types/training';\n\ninterface TrainingState {\n  trainings: Training[];\n  lessons: TrainingLesson[];\n  progress: TrainingProgress[];\n  attempts: TrainingAttempt[];\n  certificates: TrainingCertificate[];\n  isLoading: boolean;\n  \n  // Training Management\n  createTraining: (training: Omit<Training, 'id' | 'createdAt'>) => Promise<void>;\n  updateTraining: (id: string, updates: Partial<Training>) => void;\n  deleteTraining: (id: string) => void;\n  getTrainingById: (id: string) => Training | undefined;\n  getTrainingsForUser: (userId: string) => Training[];\n  \n  // Lesson Management\n  addLesson: (lesson: Omit<TrainingLesson, 'id'>) => void;\n  updateLesson: (id: string, updates: Partial<TrainingLesson>) => void;\n  deleteLesson: (id: string) => void;\n  getLessonsForTraining: (trainingId: string) => TrainingLesson[];\n  \n  // Progress Tracking\n  getUserProgress: (userId: string, trainingId: string) => TrainingProgress | undefined;\n  updateProgress: (userId: string, trainingId: string, updates: Partial<TrainingProgress>) => void;\n  startTraining: (userId: string, trainingId: string) => void;\n  completeLesson: (userId: string, trainingId: string, lessonId: string) => void;\n  completeTraining: (userId: string, trainingId: string, finalScore: number) => void;\n  \n  // Quiz Management\n  submitQuizAttempt: (attempt: Omit<TrainingAttempt, 'id'>) => void;\n  getUserAttempts: (userId: string, quizId: string) => TrainingAttempt[];\n  \n  // AI Generation\n  generateTrainingContent: (request: AIGenerationRequest) => Promise<AIGeneratedContent>;\n  \n  // Manager Functions\n  getTeamProgress: (userIds: string[]) => TrainingProgress[];\n  getTrainingStatistics: (trainingId: string) => {\n    totalUsers: number;\n    completed: number;\n    inProgress: number;\n    notStarted: number;\n    averageScore: number;\n  };\n}\n\n// Mock data\nconst mockTrainings: Training[] = [\n  {\n    id: '1',\n    title: 'Datenschutz und DSGVO Grundlagen',\n    description: 'Pflichtschulung zu Datenschutz-Grundlagen und DSGVO-Compliance für alle Mitarbeiter',\n    targetAudience: 'ALL',\n    startDate: '2024-01-01',\n    endDate: '2024-12-31',\n    isActive: true,\n    isMandatory: true,\n    createdBy: '2',\n    createdAt: '2024-01-01T10:00:00Z',\n    estimatedDuration: 45,\n    category: 'COMPLIANCE'\n  },\n  {\n    id: '2',\n    title: 'Onboarding Programm',\n    description: 'Umfassendes Einführungsprogramm für neue Mitarbeiter',\n    targetAudience: 'SPECIFIC_USERS',\n    targetUserIds: ['1'],\n    startDate: '2024-12-01',\n    isActive: true,\n    isMandatory: true,\n    createdBy: '2',\n    createdAt: '2024-11-15T14:00:00Z',\n    estimatedDuration: 120,\n    category: 'ONBOARDING'\n  },\n  {\n    id: '3',\n    title: 'Microsoft Office 365 Schulung',\n    description: 'Erweiterte Funktionen von Office 365 für effizienteres Arbeiten',\n    targetAudience: 'DEPARTMENT',\n    targetDepartments: ['IT', 'Administration'],\n    startDate: '2024-11-01',\n    endDate: '2025-01-31',\n    isActive: true,\n    isMandatory: false,\n    createdBy: '2',\n    createdAt: '2024-10-15T09:00:00Z',\n    estimatedDuration: 90,\n    category: 'SKILLS'\n  }\n];\n\nconst mockLessons: TrainingLesson[] = [\n  {\n    id: '1',\n    trainingId: '1',\n    title: 'Was ist Datenschutz?',\n    description: 'Grundlagen des Datenschutzes und warum er wichtig ist',\n    order: 1,\n    content: [\n      {\n        id: '1',\n        type: 'TEXT',\n        title: 'Einführung',\n        content: 'Datenschutz betrifft uns alle und ist ein Grundrecht...',\n        order: 1\n      }\n    ],\n    quiz: {\n      id: 'quiz1',\n      lessonId: '1',\n      questions: [\n        {\n          id: 'q1',\n          question: 'Was bedeutet DSGVO?',\n          options: [\n            'Datenschutz-Grundverordnung',\n            'Deutsche Sicherheits-Grundverordnung',\n            'Digitale Schutz-Grundverordnung',\n            'Daten-Sicherheits-Grundverordnung'\n          ],\n          correctAnswer: 0,\n          explanation: 'DSGVO steht für Datenschutz-Grundverordnung, die europäische Verordnung zum Schutz personenbezogener Daten.'\n        }\n      ],\n      passingScore: 80,\n      maxAttempts: 3\n    },\n    isRequired: true\n  },\n  {\n    id: '2',\n    trainingId: '2',\n    title: 'Willkommen bei WorkyTime',\n    description: 'Erste Schritte und Orientierung im Unternehmen',\n    order: 1,\n    content: [\n      {\n        id: '2',\n        type: 'TEXT',\n        title: 'Unternehmenswerte',\n        content: 'Willkommen bei WorkyTime! Unsere Werte sind...',\n        order: 1\n      }\n    ],\n    isRequired: true\n  }\n];\n\nconst mockProgress: TrainingProgress[] = [\n  {\n    id: '1',\n    userId: '1',\n    trainingId: '1',\n    status: 'IN_PROGRESS',\n    currentLessonId: '1',\n    completedLessons: [],\n    startedAt: '2024-12-15T10:00:00Z',\n    lastActivityAt: '2024-12-15T10:30:00Z'\n  },\n  {\n    id: '2',\n    userId: '1',\n    trainingId: '2',\n    status: 'NOT_STARTED',\n    completedLessons: []\n  }\n];\n\nexport const useTrainingStore = create<TrainingState>()(\n  persist(\n    (set, get) => ({\n      trainings: mockTrainings,\n      lessons: mockLessons,\n      progress: mockProgress,\n      attempts: [],\n      certificates: [],\n      isLoading: false,\n\n      createTraining: async (trainingData) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          const newTraining: Training = {\n            ...trainingData,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString()\n          };\n          \n          set(state => ({\n            trainings: [...state.trainings, newTraining],\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      updateTraining: (id: string, updates: Partial<Training>) => {\n        set(state => ({\n          trainings: state.trainings.map(training =>\n            training.id === id ? { ...training, ...updates } : training\n          )\n        }));\n      },\n\n      deleteTraining: (id: string) => {\n        set(state => ({\n          trainings: state.trainings.filter(training => training.id !== id),\n          lessons: state.lessons.filter(lesson => lesson.trainingId !== id),\n          progress: state.progress.filter(progress => progress.trainingId !== id)\n        }));\n      },\n\n      getTrainingById: (id: string) => {\n        return get().trainings.find(training => training.id === id);\n      },\n\n      getTrainingsForUser: (userId: string) => {\n        const { trainings } = get();\n        return trainings.filter(training => {\n          if (!training.isActive) return false;\n          \n          switch (training.targetAudience) {\n            case 'ALL':\n              return true;\n            case 'SPECIFIC_USERS':\n              return training.targetUserIds?.includes(userId) || false;\n            case 'DEPARTMENT':\n              // In real app, would check user's department\n              return true;\n            default:\n              return false;\n          }\n        });\n      },\n\n      addLesson: (lessonData) => {\n        const newLesson: TrainingLesson = {\n          ...lessonData,\n          id: Date.now().toString()\n        };\n        \n        set(state => ({\n          lessons: [...state.lessons, newLesson]\n        }));\n      },\n\n      updateLesson: (id: string, updates: Partial<TrainingLesson>) => {\n        set(state => ({\n          lessons: state.lessons.map(lesson =>\n            lesson.id === id ? { ...lesson, ...updates } : lesson\n          )\n        }));\n      },\n\n      deleteLesson: (id: string) => {\n        set(state => ({\n          lessons: state.lessons.filter(lesson => lesson.id !== id)\n        }));\n      },\n\n      getLessonsForTraining: (trainingId: string) => {\n        return get().lessons\n          .filter(lesson => lesson.trainingId === trainingId)\n          .sort((a, b) => a.order - b.order);\n      },\n\n      getUserProgress: (userId: string, trainingId: string) => {\n        return get().progress.find(p => p.userId === userId && p.trainingId === trainingId);\n      },\n\n      updateProgress: (userId: string, trainingId: string, updates: Partial<TrainingProgress>) => {\n        set(state => ({\n          progress: state.progress.map(progress =>\n            progress.userId === userId && progress.trainingId === trainingId\n              ? { ...progress, ...updates, lastActivityAt: new Date().toISOString() }\n              : progress\n          )\n        }));\n      },\n\n      startTraining: (userId: string, trainingId: string) => {\n        const existingProgress = get().getUserProgress(userId, trainingId);\n        \n        if (!existingProgress) {\n          const newProgress: TrainingProgress = {\n            id: Date.now().toString(),\n            userId,\n            trainingId,\n            status: 'IN_PROGRESS',\n            completedLessons: [],\n            startedAt: new Date().toISOString(),\n            lastActivityAt: new Date().toISOString()\n          };\n          \n          set(state => ({\n            progress: [...state.progress, newProgress]\n          }));\n        } else {\n          get().updateProgress(userId, trainingId, { status: 'IN_PROGRESS' });\n        }\n      },\n\n      completeLesson: (userId: string, trainingId: string, lessonId: string) => {\n        const progress = get().getUserProgress(userId, trainingId);\n        if (!progress) return;\n        \n        const completedLessons = [...progress.completedLessons];\n        if (!completedLessons.includes(lessonId)) {\n          completedLessons.push(lessonId);\n        }\n        \n        get().updateProgress(userId, trainingId, {\n          completedLessons,\n          currentLessonId: lessonId\n        });\n      },\n\n      completeTraining: (userId: string, trainingId: string, finalScore: number) => {\n        get().updateProgress(userId, trainingId, {\n          status: finalScore >= 70 ? 'COMPLETED' : 'FAILED',\n          finalScore,\n          completedAt: new Date().toISOString()\n        });\n      },\n\n      submitQuizAttempt: (attemptData) => {\n        const newAttempt: TrainingAttempt = {\n          ...attemptData,\n          id: Date.now().toString()\n        };\n        \n        set(state => ({\n          attempts: [...state.attempts, newAttempt]\n        }));\n      },\n\n      getUserAttempts: (userId: string, quizId: string) => {\n        return get().attempts.filter(attempt => \n          attempt.userId === userId && attempt.quizId === quizId\n        ).sort((a, b) => b.attemptNumber - a.attemptNumber);\n      },\n\n      generateTrainingContent: async (request: AIGenerationRequest) => {\n        set({ isLoading: true });\n        \n        try {\n          // Import AI service dynamically to avoid circular dependencies\n          const { generateTrainingContent } = await import('../api/training-ai');\n          const generatedContent = await generateTrainingContent(request);\n          \n          set({ isLoading: false });\n          return generatedContent;\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      getTeamProgress: (userIds: string[]) => {\n        return get().progress.filter(progress => userIds.includes(progress.userId));\n      },\n\n      getTrainingStatistics: (trainingId: string) => {\n        const { progress } = get();\n        const trainingProgress = progress.filter(p => p.trainingId === trainingId);\n        \n        const completed = trainingProgress.filter(p => p.status === 'COMPLETED').length;\n        const inProgress = trainingProgress.filter(p => p.status === 'IN_PROGRESS').length;\n        const failed = trainingProgress.filter(p => p.status === 'FAILED').length;\n        const notStarted = trainingProgress.filter(p => p.status === 'NOT_STARTED').length;\n        \n        const scoresSum = trainingProgress\n          .filter(p => p.finalScore !== undefined)\n          .reduce((sum, p) => sum + (p.finalScore || 0), 0);\n        const scoresCount = trainingProgress.filter(p => p.finalScore !== undefined).length;\n        \n        return {\n          totalUsers: trainingProgress.length,\n          completed,\n          inProgress,\n          notStarted: notStarted + failed, // Count failed as not started for simplicity\n          averageScore: scoresCount > 0 ? scoresSum / scoresCount : 0\n        };\n      }\n    }),\n    {\n      name: 'training-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        trainings: state.trainings,\n        lessons: state.lessons,\n        progress: state.progress,\n        attempts: state.attempts,\n        certificates: state.certificates\n      }),\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}