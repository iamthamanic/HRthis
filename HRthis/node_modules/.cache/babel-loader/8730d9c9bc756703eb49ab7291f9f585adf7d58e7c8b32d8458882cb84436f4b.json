{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock notifications\nconst mockNotifications = [{\n  id: '1',\n  userId: '2',\n  // Admin\n  type: 'leave_request',\n  title: 'Neuer Urlaubsantrag',\n  message: 'Max M. hat einen Urlaubsantrag eingereicht',\n  isRead: false,\n  createdAt: '2024-12-20T14:30:00Z',\n  relatedId: '2'\n}, {\n  id: '2',\n  userId: '1',\n  // User\n  type: 'leave_approved',\n  title: 'Urlaubsantrag genehmigt',\n  message: 'Ihr Urlaubsantrag wurde genehmigt',\n  isRead: false,\n  createdAt: '2024-12-19T10:15:00Z',\n  relatedId: '1'\n}, {\n  id: '3',\n  userId: '2',\n  // Admin\n  type: 'training_completed',\n  title: 'Schulung abgeschlossen',\n  message: 'Tom K. hat eine Schulung abgeschlossen',\n  isRead: false,\n  createdAt: '2024-12-18T16:45:00Z',\n  relatedId: 'training-1'\n}];\nexport const useNotificationsStore = create()(persist((set, get) => ({\n  notifications: mockNotifications,\n  addNotification: notification => {\n    const newNotification = {\n      ...notification,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    set(state => ({\n      notifications: [newNotification, ...state.notifications]\n    }));\n  },\n  markAsRead: notificationId => {\n    set(state => ({\n      notifications: state.notifications.map(notification => notification.id === notificationId ? {\n        ...notification,\n        isRead: true\n      } : notification)\n    }));\n  },\n  markAllAsRead: userId => {\n    set(state => ({\n      notifications: state.notifications.map(notification => notification.userId === userId ? {\n        ...notification,\n        isRead: true\n      } : notification)\n    }));\n  },\n  getUnreadCount: userId => {\n    return get().notifications.filter(notification => notification.userId === userId && !notification.isRead).length;\n  },\n  getNotificationsForUser: userId => {\n    return get().notifications.filter(notification => notification.userId === userId).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  },\n  getUnreadNotificationsForUser: userId => {\n    return get().notifications.filter(notification => notification.userId === userId && !notification.isRead).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  },\n  removeNotification: notificationId => {\n    set(state => ({\n      notifications: state.notifications.filter(notification => notification.id !== notificationId)\n    }));\n  }\n}), {\n  name: 'notifications-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    notifications: state.notifications\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockNotifications","id","userId","type","title","message","isRead","createdAt","relatedId","useNotificationsStore","set","get","notifications","addNotification","notification","newNotification","Date","now","toString","toISOString","state","markAsRead","notificationId","map","markAllAsRead","getUnreadCount","filter","length","getNotificationsForUser","sort","a","b","getTime","getUnreadNotificationsForUser","removeNotification","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/notifications.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n\nexport interface Notification {\n  id: string;\n  userId: string;\n  type: 'leave_request' | 'leave_approved' | 'leave_rejected' | 'training_completed' | 'general';\n  title: string;\n  message: string;\n  isRead: boolean;\n  createdAt: string;\n  relatedId?: string; // ID of related entity (leave request, training, etc.)\n}\n\ninterface NotificationsState {\n  notifications: Notification[];\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt'>) => void;\n  markAsRead: (notificationId: string) => void;\n  markAllAsRead: (userId: string) => void;\n  getUnreadCount: (userId: string) => number;\n  getNotificationsForUser: (userId: string) => Notification[];\n  getUnreadNotificationsForUser: (userId: string) => Notification[];\n  removeNotification: (notificationId: string) => void;\n}\n\n// Mock notifications\nconst mockNotifications: Notification[] = [\n  {\n    id: '1',\n    userId: '2', // Admin\n    type: 'leave_request',\n    title: 'Neuer Urlaubsantrag',\n    message: 'Max M. hat einen Urlaubsantrag eingereicht',\n    isRead: false,\n    createdAt: '2024-12-20T14:30:00Z',\n    relatedId: '2'\n  },\n  {\n    id: '2',\n    userId: '1', // User\n    type: 'leave_approved',\n    title: 'Urlaubsantrag genehmigt',\n    message: 'Ihr Urlaubsantrag wurde genehmigt',\n    isRead: false,\n    createdAt: '2024-12-19T10:15:00Z',\n    relatedId: '1'\n  },\n  {\n    id: '3',\n    userId: '2', // Admin\n    type: 'training_completed',\n    title: 'Schulung abgeschlossen',\n    message: 'Tom K. hat eine Schulung abgeschlossen',\n    isRead: false,\n    createdAt: '2024-12-18T16:45:00Z',\n    relatedId: 'training-1'\n  }\n];\n\nexport const useNotificationsStore = create<NotificationsState>()(\n  persist(\n    (set, get) => ({\n      notifications: mockNotifications,\n\n      addNotification: (notification) => {\n        const newNotification: Notification = {\n          ...notification,\n          id: Date.now().toString(),\n          createdAt: new Date().toISOString()\n        };\n        \n        set(state => ({\n          notifications: [newNotification, ...state.notifications]\n        }));\n      },\n\n      markAsRead: (notificationId: string) => {\n        set(state => ({\n          notifications: state.notifications.map(notification =>\n            notification.id === notificationId\n              ? { ...notification, isRead: true }\n              : notification\n          )\n        }));\n      },\n\n      markAllAsRead: (userId: string) => {\n        set(state => ({\n          notifications: state.notifications.map(notification =>\n            notification.userId === userId\n              ? { ...notification, isRead: true }\n              : notification\n          )\n        }));\n      },\n\n      getUnreadCount: (userId: string) => {\n        return get().notifications.filter(\n          notification => notification.userId === userId && !notification.isRead\n        ).length;\n      },\n\n      getNotificationsForUser: (userId: string) => {\n        return get().notifications\n          .filter(notification => notification.userId === userId)\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      },\n\n      getUnreadNotificationsForUser: (userId: string) => {\n        return get().notifications\n          .filter(notification => notification.userId === userId && !notification.isRead)\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      },\n\n      removeNotification: (notificationId: string) => {\n        set(state => ({\n          notifications: state.notifications.filter(\n            notification => notification.id !== notificationId\n          )\n        }));\n      }\n    }),\n    {\n      name: 'notifications-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        notifications: state.notifications\n      }),\n    }\n  )\n);"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;AAwB/D;AACA,MAAMC,iBAAiC,GAAG,CACxC;EACEC,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EAAE;EACbC,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE,qBAAqB;EAC5BC,OAAO,EAAE,4CAA4C;EACrDC,MAAM,EAAE,KAAK;EACbC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EAAE;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE,yBAAyB;EAChCC,OAAO,EAAE,mCAAmC;EAC5CC,MAAM,EAAE,KAAK;EACbC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EAAE;EACbC,IAAI,EAAE,oBAAoB;EAC1BC,KAAK,EAAE,wBAAwB;EAC/BC,OAAO,EAAE,wCAAwC;EACjDC,MAAM,EAAE,KAAK;EACbC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,CACF;AAED,OAAO,MAAMC,qBAAqB,GAAGZ,MAAM,CAAqB,CAAC,CAC/DC,OAAO,CACL,CAACY,GAAG,EAAEC,GAAG,MAAM;EACbC,aAAa,EAAEZ,iBAAiB;EAEhCa,eAAe,EAAGC,YAAY,IAAK;IACjC,MAAMC,eAA6B,GAAG;MACpC,GAAGD,YAAY;MACfb,EAAE,EAAEe,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBX,SAAS,EAAE,IAAIS,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;IACpC,CAAC;IAEDT,GAAG,CAACU,KAAK,KAAK;MACZR,aAAa,EAAE,CAACG,eAAe,EAAE,GAAGK,KAAK,CAACR,aAAa;IACzD,CAAC,CAAC,CAAC;EACL,CAAC;EAEDS,UAAU,EAAGC,cAAsB,IAAK;IACtCZ,GAAG,CAACU,KAAK,KAAK;MACZR,aAAa,EAAEQ,KAAK,CAACR,aAAa,CAACW,GAAG,CAACT,YAAY,IACjDA,YAAY,CAACb,EAAE,KAAKqB,cAAc,GAC9B;QAAE,GAAGR,YAAY;QAAER,MAAM,EAAE;MAAK,CAAC,GACjCQ,YACN;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDU,aAAa,EAAGtB,MAAc,IAAK;IACjCQ,GAAG,CAACU,KAAK,KAAK;MACZR,aAAa,EAAEQ,KAAK,CAACR,aAAa,CAACW,GAAG,CAACT,YAAY,IACjDA,YAAY,CAACZ,MAAM,KAAKA,MAAM,GAC1B;QAAE,GAAGY,YAAY;QAAER,MAAM,EAAE;MAAK,CAAC,GACjCQ,YACN;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAEDW,cAAc,EAAGvB,MAAc,IAAK;IAClC,OAAOS,GAAG,CAAC,CAAC,CAACC,aAAa,CAACc,MAAM,CAC/BZ,YAAY,IAAIA,YAAY,CAACZ,MAAM,KAAKA,MAAM,IAAI,CAACY,YAAY,CAACR,MAClE,CAAC,CAACqB,MAAM;EACV,CAAC;EAEDC,uBAAuB,EAAG1B,MAAc,IAAK;IAC3C,OAAOS,GAAG,CAAC,CAAC,CAACC,aAAa,CACvBc,MAAM,CAACZ,YAAY,IAAIA,YAAY,CAACZ,MAAM,KAAKA,MAAM,CAAC,CACtD2B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIf,IAAI,CAACe,CAAC,CAACxB,SAAS,CAAC,CAACyB,OAAO,CAAC,CAAC,GAAG,IAAIhB,IAAI,CAACc,CAAC,CAACvB,SAAS,CAAC,CAACyB,OAAO,CAAC,CAAC,CAAC;EACtF,CAAC;EAEDC,6BAA6B,EAAG/B,MAAc,IAAK;IACjD,OAAOS,GAAG,CAAC,CAAC,CAACC,aAAa,CACvBc,MAAM,CAACZ,YAAY,IAAIA,YAAY,CAACZ,MAAM,KAAKA,MAAM,IAAI,CAACY,YAAY,CAACR,MAAM,CAAC,CAC9EuB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIf,IAAI,CAACe,CAAC,CAACxB,SAAS,CAAC,CAACyB,OAAO,CAAC,CAAC,GAAG,IAAIhB,IAAI,CAACc,CAAC,CAACvB,SAAS,CAAC,CAACyB,OAAO,CAAC,CAAC,CAAC;EACtF,CAAC;EAEDE,kBAAkB,EAAGZ,cAAsB,IAAK;IAC9CZ,GAAG,CAACU,KAAK,KAAK;MACZR,aAAa,EAAEQ,KAAK,CAACR,aAAa,CAACc,MAAM,CACvCZ,YAAY,IAAIA,YAAY,CAACb,EAAE,KAAKqB,cACtC;IACF,CAAC,CAAC,CAAC;EACL;AACF,CAAC,CAAC,EACF;EACEa,IAAI,EAAE,uBAAuB;EAC7BC,OAAO,EAAErC,iBAAiB,CAAC,MAAMsC,YAAY,CAAC;EAC9CC,UAAU,EAAGlB,KAAK,KAAM;IACtBR,aAAa,EAAEQ,KAAK,CAACR;EACvB,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}