{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock notifications - initially empty, will be populated when actions happen\nconst mockNotifications = [];\nexport const useNotificationsStore = create()(persist((set, get) => ({\n  notifications: mockNotifications,\n  addNotification: notification => {\n    const newNotification = {\n      ...notification,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    set(state => ({\n      notifications: [newNotification, ...state.notifications]\n    }));\n  },\n  markAsRead: notificationId => {\n    set(state => ({\n      notifications: state.notifications.map(notification => notification.id === notificationId ? {\n        ...notification,\n        isRead: true\n      } : notification)\n    }));\n  },\n  markAllAsRead: userId => {\n    set(state => ({\n      notifications: state.notifications.map(notification => notification.userId === userId ? {\n        ...notification,\n        isRead: true\n      } : notification)\n    }));\n  },\n  getUnreadCount: userId => {\n    return get().notifications.filter(notification => notification.userId === userId && !notification.isRead).length;\n  },\n  getNotificationsForUser: userId => {\n    return get().notifications.filter(notification => notification.userId === userId).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  },\n  getUnreadNotificationsForUser: userId => {\n    return get().notifications.filter(notification => notification.userId === userId && !notification.isRead).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  },\n  removeNotification: notificationId => {\n    set(state => ({\n      notifications: state.notifications.filter(notification => notification.id !== notificationId)\n    }));\n  }\n}), {\n  name: 'notifications-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    notifications: state.notifications\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockNotifications","useNotificationsStore","set","get","notifications","addNotification","notification","newNotification","id","Date","now","toString","createdAt","toISOString","state","markAsRead","notificationId","map","isRead","markAllAsRead","userId","getUnreadCount","filter","length","getNotificationsForUser","sort","a","b","getTime","getUnreadNotificationsForUser","removeNotification","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/HRthis/HRthis/src/state/notifications.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n\nexport interface Notification {\n  id: string;\n  userId: string;\n  type: 'leave_request' | 'leave_approved' | 'leave_rejected' | 'training_completed' | 'general';\n  title: string;\n  message: string;\n  isRead: boolean;\n  createdAt: string;\n  relatedId?: string; // ID of related entity (leave request, training, etc.)\n}\n\ninterface NotificationsState {\n  notifications: Notification[];\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt'>) => void;\n  markAsRead: (notificationId: string) => void;\n  markAllAsRead: (userId: string) => void;\n  getUnreadCount: (userId: string) => number;\n  getNotificationsForUser: (userId: string) => Notification[];\n  getUnreadNotificationsForUser: (userId: string) => Notification[];\n  removeNotification: (notificationId: string) => void;\n}\n\n// Mock notifications - initially empty, will be populated when actions happen\nconst mockNotifications: Notification[] = [];\n\nexport const useNotificationsStore = create<NotificationsState>()(\n  persist(\n    (set, get) => ({\n      notifications: mockNotifications,\n\n      addNotification: (notification) => {\n        const newNotification: Notification = {\n          ...notification,\n          id: Date.now().toString(),\n          createdAt: new Date().toISOString()\n        };\n        \n        set(state => ({\n          notifications: [newNotification, ...state.notifications]\n        }));\n      },\n\n      markAsRead: (notificationId: string) => {\n        set(state => ({\n          notifications: state.notifications.map(notification =>\n            notification.id === notificationId\n              ? { ...notification, isRead: true }\n              : notification\n          )\n        }));\n      },\n\n      markAllAsRead: (userId: string) => {\n        set(state => ({\n          notifications: state.notifications.map(notification =>\n            notification.userId === userId\n              ? { ...notification, isRead: true }\n              : notification\n          )\n        }));\n      },\n\n      getUnreadCount: (userId: string) => {\n        return get().notifications.filter(\n          notification => notification.userId === userId && !notification.isRead\n        ).length;\n      },\n\n      getNotificationsForUser: (userId: string) => {\n        return get().notifications\n          .filter(notification => notification.userId === userId)\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      },\n\n      getUnreadNotificationsForUser: (userId: string) => {\n        return get().notifications\n          .filter(notification => notification.userId === userId && !notification.isRead)\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      },\n\n      removeNotification: (notificationId: string) => {\n        set(state => ({\n          notifications: state.notifications.filter(\n            notification => notification.id !== notificationId\n          )\n        }));\n      }\n    }),\n    {\n      name: 'notifications-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        notifications: state.notifications\n      }),\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}