{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock data\nconst mockLeaveRequests = [{\n  id: '1',\n  userId: '1',\n  startDate: '2024-12-23',\n  endDate: '2024-12-30',\n  comment: 'Weihnachtsurlaub',\n  status: 'APPROVED',\n  type: 'VACATION',\n  createdAt: '2024-12-01T10:00:00Z'\n}, {\n  id: '2',\n  userId: '1',\n  startDate: '2024-11-15',\n  endDate: '2024-11-15',\n  comment: 'Arzttermin',\n  status: 'PENDING',\n  type: 'SICK',\n  createdAt: '2024-11-15T08:00:00Z'\n}, {\n  id: '3',\n  userId: '3',\n  startDate: '2025-01-15',\n  endDate: '2025-01-17',\n  comment: 'Verl채ngertes Wochenende',\n  status: 'PENDING',\n  type: 'VACATION',\n  createdAt: '2024-12-20T14:30:00Z'\n}, {\n  id: '4',\n  userId: '4',\n  startDate: '2024-12-28',\n  endDate: '2024-12-28',\n  comment: 'Erk채ltung',\n  status: 'PENDING',\n  type: 'SICK',\n  createdAt: '2024-12-27T07:45:00Z'\n}, {\n  id: '5',\n  userId: '5',\n  startDate: '2025-02-10',\n  endDate: '2025-02-14',\n  comment: 'Skiurlaub',\n  status: 'PENDING',\n  type: 'VACATION',\n  createdAt: '2024-12-15T16:20:00Z'\n}, {\n  id: '6',\n  userId: '2',\n  startDate: '2024-11-20',\n  endDate: '2024-11-22',\n  comment: 'Familienbesuch',\n  status: 'APPROVED',\n  type: 'VACATION',\n  createdAt: '2024-11-10T11:15:00Z'\n}, {\n  id: '7',\n  userId: '6',\n  startDate: '2024-12-19',\n  endDate: '2024-12-19',\n  comment: '',\n  status: 'REJECTED',\n  type: 'SICK',\n  createdAt: '2024-12-18T09:30:00Z'\n}];\nconst mockVacationBalance = {\n  userId: '1',\n  totalDays: 30,\n  usedDays: 8,\n  remainingDays: 22,\n  year: 2024\n};\nexport const useLeavesStore = create()(persist((set, get) => ({\n  leaveRequests: mockLeaveRequests,\n  vacationBalance: mockVacationBalance,\n  isLoading: false,\n  submitLeaveRequest: async request => {\n    set({\n      isLoading: true\n    });\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const newRequest = {\n        ...request,\n        id: Date.now().toString(),\n        createdAt: new Date().toISOString()\n      };\n      set(state => ({\n        leaveRequests: [...state.leaveRequests, newRequest],\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  getLeaveRequests: userId => {\n    return get().leaveRequests.filter(request => request.userId === userId);\n  },\n  getAllLeaveRequests: () => {\n    return get().leaveRequests;\n  },\n  getVacationBalance: userId => {\n    const balance = get().vacationBalance;\n    return (balance === null || balance === void 0 ? void 0 : balance.userId) === userId ? balance : null;\n  },\n  setVacationBalance: balance => {\n    set({\n      vacationBalance: balance\n    });\n  },\n  approveLeaveRequest: async requestId => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 300));\n      set(state => ({\n        leaveRequests: state.leaveRequests.map(request => request.id === requestId ? {\n          ...request,\n          status: 'APPROVED'\n        } : request)\n      }));\n\n      // Trigger automatic reminder creation for vacation requests\n      const approvedRequest = get().leaveRequests.find(r => r.id === requestId);\n      if (approvedRequest && approvedRequest.type === 'VACATION') {\n        // This would integrate with the reminders store\n        // For now, this is handled in the UI layer\n      }\n    } catch (error) {\n      throw error;\n    }\n  },\n  rejectLeaveRequest: async requestId => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 300));\n      set(state => ({\n        leaveRequests: state.leaveRequests.map(request => request.id === requestId ? {\n          ...request,\n          status: 'REJECTED'\n        } : request)\n      }));\n    } catch (error) {\n      throw error;\n    }\n  }\n}), {\n  name: 'leaves-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    leaveRequests: state.leaveRequests,\n    vacationBalance: state.vacationBalance\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockLeaveRequests","id","userId","startDate","endDate","comment","status","type","createdAt","mockVacationBalance","totalDays","usedDays","remainingDays","year","useLeavesStore","set","get","leaveRequests","vacationBalance","isLoading","submitLeaveRequest","request","Promise","resolve","setTimeout","newRequest","Date","now","toString","toISOString","state","error","getLeaveRequests","filter","getAllLeaveRequests","getVacationBalance","balance","setVacationBalance","approveLeaveRequest","requestId","map","approvedRequest","find","r","rejectLeaveRequest","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/leaves.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { LeaveRequest, VacationBalance } from '../types';\n\ninterface LeavesState {\n  leaveRequests: LeaveRequest[];\n  vacationBalance: VacationBalance | null;\n  isLoading: boolean;\n  submitLeaveRequest: (request: Omit<LeaveRequest, 'id' | 'createdAt'>) => Promise<void>;\n  getLeaveRequests: (userId: string) => LeaveRequest[];\n  getAllLeaveRequests: () => LeaveRequest[];\n  getVacationBalance: (userId: string) => VacationBalance | null;\n  setVacationBalance: (balance: VacationBalance) => void;\n  approveLeaveRequest: (requestId: string) => Promise<void>;\n  rejectLeaveRequest: (requestId: string) => Promise<void>;\n}\n\n// Mock data\nconst mockLeaveRequests: LeaveRequest[] = [\n  {\n    id: '1',\n    userId: '1',\n    startDate: '2024-12-23',\n    endDate: '2024-12-30',\n    comment: 'Weihnachtsurlaub',\n    status: 'APPROVED',\n    type: 'VACATION',\n    createdAt: '2024-12-01T10:00:00Z'\n  },\n  {\n    id: '2',\n    userId: '1',\n    startDate: '2024-11-15',\n    endDate: '2024-11-15',\n    comment: 'Arzttermin',\n    status: 'PENDING',\n    type: 'SICK',\n    createdAt: '2024-11-15T08:00:00Z'\n  },\n  {\n    id: '3',\n    userId: '3',\n    startDate: '2025-01-15',\n    endDate: '2025-01-17',\n    comment: 'Verl채ngertes Wochenende',\n    status: 'PENDING',\n    type: 'VACATION',\n    createdAt: '2024-12-20T14:30:00Z'\n  },\n  {\n    id: '4',\n    userId: '4',\n    startDate: '2024-12-28',\n    endDate: '2024-12-28',\n    comment: 'Erk채ltung',\n    status: 'PENDING',\n    type: 'SICK',\n    createdAt: '2024-12-27T07:45:00Z'\n  },\n  {\n    id: '5',\n    userId: '5',\n    startDate: '2025-02-10',\n    endDate: '2025-02-14',\n    comment: 'Skiurlaub',\n    status: 'PENDING',\n    type: 'VACATION',\n    createdAt: '2024-12-15T16:20:00Z'\n  },\n  {\n    id: '6',\n    userId: '2',\n    startDate: '2024-11-20',\n    endDate: '2024-11-22',\n    comment: 'Familienbesuch',\n    status: 'APPROVED',\n    type: 'VACATION',\n    createdAt: '2024-11-10T11:15:00Z'\n  },\n  {\n    id: '7',\n    userId: '6',\n    startDate: '2024-12-19',\n    endDate: '2024-12-19',\n    comment: '',\n    status: 'REJECTED',\n    type: 'SICK',\n    createdAt: '2024-12-18T09:30:00Z'\n  }\n];\n\nconst mockVacationBalance: VacationBalance = {\n  userId: '1',\n  totalDays: 30,\n  usedDays: 8,\n  remainingDays: 22,\n  year: 2024\n};\n\nexport const useLeavesStore = create<LeavesState>()(\n  persist(\n    (set, get) => ({\n      leaveRequests: mockLeaveRequests,\n      vacationBalance: mockVacationBalance,\n      isLoading: false,\n\n      submitLeaveRequest: async (request) => {\n        set({ isLoading: true });\n        \n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          const newRequest: LeaveRequest = {\n            ...request,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString()\n          };\n          \n          set(state => ({\n            leaveRequests: [...state.leaveRequests, newRequest],\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      getLeaveRequests: (userId: string) => {\n        return get().leaveRequests.filter(request => request.userId === userId);\n      },\n\n      getAllLeaveRequests: () => {\n        return get().leaveRequests;\n      },\n\n      getVacationBalance: (userId: string) => {\n        const balance = get().vacationBalance;\n        return balance?.userId === userId ? balance : null;\n      },\n\n      setVacationBalance: (balance: VacationBalance) => {\n        set({ vacationBalance: balance });\n      },\n\n      approveLeaveRequest: async (requestId: string) => {\n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          set(state => ({\n            leaveRequests: state.leaveRequests.map(request =>\n              request.id === requestId\n                ? { ...request, status: 'APPROVED' as const }\n                : request\n            )\n          }));\n          \n          // Trigger automatic reminder creation for vacation requests\n          const approvedRequest = get().leaveRequests.find(r => r.id === requestId);\n          if (approvedRequest && approvedRequest.type === 'VACATION') {\n            // This would integrate with the reminders store\n            // For now, this is handled in the UI layer\n          }\n        } catch (error) {\n          throw error;\n        }\n      },\n\n      rejectLeaveRequest: async (requestId: string) => {\n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          set(state => ({\n            leaveRequests: state.leaveRequests.map(request =>\n              request.id === requestId\n                ? { ...request, status: 'REJECTED' as const }\n                : request\n            )\n          }));\n        } catch (error) {\n          throw error;\n        }\n      }\n    }),\n    {\n      name: 'leaves-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        leaveRequests: state.leaveRequests,\n        vacationBalance: state.vacationBalance \n      }),\n    }\n  )\n);"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;AAgB/D;AACA,MAAMC,iBAAiC,GAAG,CACxC;EACEC,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBC,OAAO,EAAE,kBAAkB;EAC3BC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAE;AACb,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBC,OAAO,EAAE,YAAY;EACrBC,MAAM,EAAE,SAAS;EACjBC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE;AACb,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBC,OAAO,EAAE,yBAAyB;EAClCC,MAAM,EAAE,SAAS;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAE;AACb,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBC,OAAO,EAAE,WAAW;EACpBC,MAAM,EAAE,SAAS;EACjBC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE;AACb,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBC,OAAO,EAAE,WAAW;EACpBC,MAAM,EAAE,SAAS;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAE;AACb,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBC,OAAO,EAAE,gBAAgB;EACzBC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAE;AACb,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBC,OAAO,EAAE,EAAE;EACXC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE;AACb,CAAC,CACF;AAED,MAAMC,mBAAoC,GAAG;EAC3CP,MAAM,EAAE,GAAG;EACXQ,SAAS,EAAE,EAAE;EACbC,QAAQ,EAAE,CAAC;EACXC,aAAa,EAAE,EAAE;EACjBC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGjB,MAAM,CAAc,CAAC,CACjDC,OAAO,CACL,CAACiB,GAAG,EAAEC,GAAG,MAAM;EACbC,aAAa,EAAEjB,iBAAiB;EAChCkB,eAAe,EAAET,mBAAmB;EACpCU,SAAS,EAAE,KAAK;EAEhBC,kBAAkB,EAAE,MAAOC,OAAO,IAAK;IACrCN,GAAG,CAAC;MAAEI,SAAS,EAAE;IAAK,CAAC,CAAC;IAExB,IAAI;MACF;MACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,MAAME,UAAwB,GAAG;QAC/B,GAAGJ,OAAO;QACVpB,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzBpB,SAAS,EAAE,IAAIkB,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MACpC,CAAC;MAEDd,GAAG,CAACe,KAAK,KAAK;QACZb,aAAa,EAAE,CAAC,GAAGa,KAAK,CAACb,aAAa,EAAEQ,UAAU,CAAC;QACnDN,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdhB,GAAG,CAAC;QAAEI,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMY,KAAK;IACb;EACF,CAAC;EAEDC,gBAAgB,EAAG9B,MAAc,IAAK;IACpC,OAAOc,GAAG,CAAC,CAAC,CAACC,aAAa,CAACgB,MAAM,CAACZ,OAAO,IAAIA,OAAO,CAACnB,MAAM,KAAKA,MAAM,CAAC;EACzE,CAAC;EAEDgC,mBAAmB,EAAEA,CAAA,KAAM;IACzB,OAAOlB,GAAG,CAAC,CAAC,CAACC,aAAa;EAC5B,CAAC;EAEDkB,kBAAkB,EAAGjC,MAAc,IAAK;IACtC,MAAMkC,OAAO,GAAGpB,GAAG,CAAC,CAAC,CAACE,eAAe;IACrC,OAAO,CAAAkB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAElC,MAAM,MAAKA,MAAM,GAAGkC,OAAO,GAAG,IAAI;EACpD,CAAC;EAEDC,kBAAkB,EAAGD,OAAwB,IAAK;IAChDrB,GAAG,CAAC;MAAEG,eAAe,EAAEkB;IAAQ,CAAC,CAAC;EACnC,CAAC;EAEDE,mBAAmB,EAAE,MAAOC,SAAiB,IAAK;IAChD,IAAI;MACF;MACA,MAAM,IAAIjB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtDR,GAAG,CAACe,KAAK,KAAK;QACZb,aAAa,EAAEa,KAAK,CAACb,aAAa,CAACuB,GAAG,CAACnB,OAAO,IAC5CA,OAAO,CAACpB,EAAE,KAAKsC,SAAS,GACpB;UAAE,GAAGlB,OAAO;UAAEf,MAAM,EAAE;QAAoB,CAAC,GAC3Ce,OACN;MACF,CAAC,CAAC,CAAC;;MAEH;MACA,MAAMoB,eAAe,GAAGzB,GAAG,CAAC,CAAC,CAACC,aAAa,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC1C,EAAE,KAAKsC,SAAS,CAAC;MACzE,IAAIE,eAAe,IAAIA,eAAe,CAAClC,IAAI,KAAK,UAAU,EAAE;QAC1D;QACA;MAAA;IAEJ,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDa,kBAAkB,EAAE,MAAOL,SAAiB,IAAK;IAC/C,IAAI;MACF;MACA,MAAM,IAAIjB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtDR,GAAG,CAACe,KAAK,KAAK;QACZb,aAAa,EAAEa,KAAK,CAACb,aAAa,CAACuB,GAAG,CAACnB,OAAO,IAC5CA,OAAO,CAACpB,EAAE,KAAKsC,SAAS,GACpB;UAAE,GAAGlB,OAAO;UAAEf,MAAM,EAAE;QAAoB,CAAC,GAC3Ce,OACN;MACF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC,CAAC,EACF;EACEc,IAAI,EAAE,gBAAgB;EACtBC,OAAO,EAAE/C,iBAAiB,CAAC,MAAMgD,YAAY,CAAC;EAC9CC,UAAU,EAAGlB,KAAK,KAAM;IACtBb,aAAa,EAAEa,KAAK,CAACb,aAAa;IAClCC,eAAe,EAAEY,KAAK,CAACZ;EACzB,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}