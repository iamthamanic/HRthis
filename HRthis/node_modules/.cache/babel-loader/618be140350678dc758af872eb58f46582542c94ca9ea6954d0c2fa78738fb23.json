{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as BatchesAPI from \"./batches.mjs\";\nimport { Batches, MessageBatchesPage } from \"./batches.mjs\";\nimport { MessageStream } from \"../../lib/MessageStream.mjs\";\nexport { MessageStream } from \"../../lib/MessageStream.mjs\";\nexport class Messages extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.batches = new BatchesAPI.Batches(this._client);\n  }\n  create(body, options) {\n    if (body.model in DEPRECATED_MODELS) {\n      console.warn(`The model '${body.model}' is deprecated and will reach end-of-life on ${DEPRECATED_MODELS[body.model]}\\nPlease migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`);\n    }\n    return this._client.post('/v1/messages', {\n      body,\n      timeout: this._client._options.timeout ?? (body.stream ? 600000 : this._client._calculateNonstreamingTimeout(body.max_tokens)),\n      ...options,\n      stream: body.stream ?? false\n    });\n  }\n  /**\n   * Create a Message stream\n   */\n  stream(body, options) {\n    return MessageStream.createMessage(this, body, options);\n  }\n  /**\n   * Count the number of tokens in a Message.\n   *\n   * The Token Count API can be used to count the number of tokens in a Message,\n   * including tools, images, and documents, without creating it.\n   *\n   * Learn more about token counting in our\n   * [user guide](/en/docs/build-with-claude/token-counting)\n   */\n  countTokens(body, options) {\n    return this._client.post('/v1/messages/count_tokens', {\n      body,\n      ...options\n    });\n  }\n}\nconst DEPRECATED_MODELS = {\n  'claude-1.3': 'November 6th, 2024',\n  'claude-1.3-100k': 'November 6th, 2024',\n  'claude-instant-1.1': 'November 6th, 2024',\n  'claude-instant-1.1-100k': 'November 6th, 2024',\n  'claude-instant-1.2': 'November 6th, 2024',\n  'claude-3-sonnet-20240229': 'July 21st, 2025',\n  'claude-2.1': 'July 21st, 2025',\n  'claude-2.0': 'July 21st, 2025'\n};\nMessages.Batches = Batches;\nMessages.MessageBatchesPage = MessageBatchesPage;","map":{"version":3,"names":["APIResource","BatchesAPI","Batches","MessageBatchesPage","MessageStream","Messages","constructor","batches","_client","create","body","options","model","DEPRECATED_MODELS","console","warn","post","timeout","_options","stream","_calculateNonstreamingTimeout","max_tokens","createMessage","countTokens"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/node_modules/@anthropic-ai/sdk/src/resources/messages/messages.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from \"../../resource.js\";\nimport { APIPromise } from \"../../core.js\";\nimport * as Core from \"../../core.js\";\nimport * as MessagesAPI from \"./messages.js\";\nimport * as BatchesAPI from \"./batches.js\";\nimport {\n  BatchCreateParams,\n  BatchListParams,\n  Batches,\n  DeletedMessageBatch,\n  MessageBatch,\n  MessageBatchCanceledResult,\n  MessageBatchErroredResult,\n  MessageBatchExpiredResult,\n  MessageBatchIndividualResponse,\n  MessageBatchRequestCounts,\n  MessageBatchResult,\n  MessageBatchSucceededResult,\n  MessageBatchesPage,\n} from \"./batches.js\";\nimport { Stream } from \"../../streaming.js\";\nimport { MessageStream } from \"../../lib/MessageStream.js\";\n\nexport { MessageStream } from \"../../lib/MessageStream.js\";\n\nexport class Messages extends APIResource {\n  batches: BatchesAPI.Batches = new BatchesAPI.Batches(this._client);\n\n  /**\n   * Send a structured list of input messages with text and/or image content, and the\n   * model will generate the next message in the conversation.\n   *\n   * The Messages API can be used for either single queries or stateless multi-turn\n   * conversations.\n   *\n   * Learn more about the Messages API in our [user guide](/en/docs/initial-setup)\n   */\n  create(body: MessageCreateParamsNonStreaming, options?: Core.RequestOptions): APIPromise<Message>;\n  create(\n    body: MessageCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<RawMessageStreamEvent>>;\n  create(\n    body: MessageCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<RawMessageStreamEvent> | Message>;\n  create(\n    body: MessageCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<Message> | APIPromise<Stream<RawMessageStreamEvent>> {\n    if (body.model in DEPRECATED_MODELS) {\n      console.warn(\n        `The model '${body.model}' is deprecated and will reach end-of-life on ${\n          DEPRECATED_MODELS[body.model]\n        }\\nPlease migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`,\n      );\n    }\n    return this._client.post('/v1/messages', {\n      body,\n      timeout:\n        (this._client as any)._options.timeout ??\n        (body.stream ? 600000 : this._client._calculateNonstreamingTimeout(body.max_tokens)),\n      ...options,\n      stream: body.stream ?? false,\n    }) as APIPromise<Message> | APIPromise<Stream<RawMessageStreamEvent>>;\n  }\n\n  /**\n   * Create a Message stream\n   */\n  stream(body: MessageStreamParams, options?: Core.RequestOptions): MessageStream {\n    return MessageStream.createMessage(this, body, options);\n  }\n\n  /**\n   * Count the number of tokens in a Message.\n   *\n   * The Token Count API can be used to count the number of tokens in a Message,\n   * including tools, images, and documents, without creating it.\n   *\n   * Learn more about token counting in our\n   * [user guide](/en/docs/build-with-claude/token-counting)\n   */\n  countTokens(\n    body: MessageCountTokensParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<MessageTokensCount> {\n    return this._client.post('/v1/messages/count_tokens', { body, ...options });\n  }\n}\n\nexport interface Base64ImageSource {\n  data: string;\n\n  media_type: 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';\n\n  type: 'base64';\n}\n\nexport interface Base64PDFSource {\n  data: string;\n\n  media_type: 'application/pdf';\n\n  type: 'base64';\n}\n\nexport interface CacheControlEphemeral {\n  type: 'ephemeral';\n}\n\nexport interface CitationCharLocation {\n  cited_text: string;\n\n  document_index: number;\n\n  document_title: string | null;\n\n  end_char_index: number;\n\n  start_char_index: number;\n\n  type: 'char_location';\n}\n\nexport interface CitationCharLocationParam {\n  cited_text: string;\n\n  document_index: number;\n\n  document_title: string | null;\n\n  end_char_index: number;\n\n  start_char_index: number;\n\n  type: 'char_location';\n}\n\nexport interface CitationContentBlockLocation {\n  cited_text: string;\n\n  document_index: number;\n\n  document_title: string | null;\n\n  end_block_index: number;\n\n  start_block_index: number;\n\n  type: 'content_block_location';\n}\n\nexport interface CitationContentBlockLocationParam {\n  cited_text: string;\n\n  document_index: number;\n\n  document_title: string | null;\n\n  end_block_index: number;\n\n  start_block_index: number;\n\n  type: 'content_block_location';\n}\n\nexport interface CitationPageLocation {\n  cited_text: string;\n\n  document_index: number;\n\n  document_title: string | null;\n\n  end_page_number: number;\n\n  start_page_number: number;\n\n  type: 'page_location';\n}\n\nexport interface CitationPageLocationParam {\n  cited_text: string;\n\n  document_index: number;\n\n  document_title: string | null;\n\n  end_page_number: number;\n\n  start_page_number: number;\n\n  type: 'page_location';\n}\n\nexport interface CitationsConfigParam {\n  enabled?: boolean;\n}\n\nexport interface CitationsDelta {\n  citation: CitationCharLocation | CitationPageLocation | CitationContentBlockLocation;\n\n  type: 'citations_delta';\n}\n\nexport type ContentBlock = TextBlock | ToolUseBlock | ThinkingBlock | RedactedThinkingBlock;\n\nexport type ContentBlockDeltaEvent = RawContentBlockDeltaEvent;\n\nexport type ContentBlockParam =\n  | TextBlockParam\n  | ImageBlockParam\n  | ToolUseBlockParam\n  | ToolResultBlockParam\n  | DocumentBlockParam\n  | ThinkingBlockParam\n  | RedactedThinkingBlockParam;\n\nexport interface ContentBlockSource {\n  content: string | Array<ContentBlockSourceContent>;\n\n  type: 'content';\n}\n\nexport type ContentBlockSourceContent = TextBlockParam | ImageBlockParam;\n\nexport type ContentBlockStartEvent = RawContentBlockStartEvent;\n\nexport type ContentBlockStopEvent = RawContentBlockStopEvent;\n\nexport interface DocumentBlockParam {\n  source: Base64PDFSource | PlainTextSource | ContentBlockSource | URLPDFSource;\n\n  type: 'document';\n\n  cache_control?: CacheControlEphemeral | null;\n\n  citations?: CitationsConfigParam;\n\n  context?: string | null;\n\n  title?: string | null;\n}\n\nexport interface ImageBlockParam {\n  source: Base64ImageSource | URLImageSource;\n\n  type: 'image';\n\n  cache_control?: CacheControlEphemeral | null;\n}\n\nexport type InputJsonDelta = InputJSONDelta;\n\nexport interface InputJSONDelta {\n  partial_json: string;\n\n  type: 'input_json_delta';\n}\n\nexport interface Message {\n  /**\n   * Unique object identifier.\n   *\n   * The format and length of IDs may change over time.\n   */\n  id: string;\n\n  /**\n   * Content generated by the model.\n   *\n   * This is an array of content blocks, each of which has a `type` that determines\n   * its shape.\n   *\n   * Example:\n   *\n   * ```json\n   * [{ \"type\": \"text\", \"text\": \"Hi, I'm Claude.\" }]\n   * ```\n   *\n   * If the request input `messages` ended with an `assistant` turn, then the\n   * response `content` will continue directly from that last turn. You can use this\n   * to constrain the model's output.\n   *\n   * For example, if the input `messages` were:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"role\": \"user\",\n   *     \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"\n   *   },\n   *   { \"role\": \"assistant\", \"content\": \"The best answer is (\" }\n   * ]\n   * ```\n   *\n   * Then the response `content` might be:\n   *\n   * ```json\n   * [{ \"type\": \"text\", \"text\": \"B)\" }]\n   * ```\n   */\n  content: Array<ContentBlock>;\n\n  /**\n   * The model that will complete your prompt.\\n\\nSee\n   * [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n   * details and options.\n   */\n  model: Model;\n\n  /**\n   * Conversational role of the generated message.\n   *\n   * This will always be `\"assistant\"`.\n   */\n  role: 'assistant';\n\n  /**\n   * The reason that we stopped.\n   *\n   * This may be one the following values:\n   *\n   * - `\"end_turn\"`: the model reached a natural stopping point\n   * - `\"max_tokens\"`: we exceeded the requested `max_tokens` or the model's maximum\n   * - `\"stop_sequence\"`: one of your provided custom `stop_sequences` was generated\n   * - `\"tool_use\"`: the model invoked one or more tools\n   *\n   * In non-streaming mode this value is always non-null. In streaming mode, it is\n   * null in the `message_start` event and non-null otherwise.\n   */\n  stop_reason: 'end_turn' | 'max_tokens' | 'stop_sequence' | 'tool_use' | null;\n\n  /**\n   * Which custom stop sequence was generated, if any.\n   *\n   * This value will be a non-null string if one of your custom stop sequences was\n   * generated.\n   */\n  stop_sequence: string | null;\n\n  /**\n   * Object type.\n   *\n   * For Messages, this is always `\"message\"`.\n   */\n  type: 'message';\n\n  /**\n   * Billing and rate-limit usage.\n   *\n   * Anthropic's API bills and rate-limits by token counts, as tokens represent the\n   * underlying cost to our systems.\n   *\n   * Under the hood, the API transforms requests into a format suitable for the\n   * model. The model's output then goes through a parsing stage before becoming an\n   * API response. As a result, the token counts in `usage` will not match one-to-one\n   * with the exact visible content of an API request or response.\n   *\n   * For example, `output_tokens` will be non-zero, even for an empty string response\n   * from Claude.\n   *\n   * Total input tokens in a request is the summation of `input_tokens`,\n   * `cache_creation_input_tokens`, and `cache_read_input_tokens`.\n   */\n  usage: Usage;\n}\n\nexport type MessageCountTokensTool = Tool | ToolBash20250124 | ToolTextEditor20250124;\n\nexport type MessageDeltaEvent = RawMessageDeltaEvent;\n\nexport interface MessageDeltaUsage {\n  /**\n   * The cumulative number of output tokens which were used.\n   */\n  output_tokens: number;\n}\n\nexport interface MessageParam {\n  content: string | Array<ContentBlockParam>;\n\n  role: 'user' | 'assistant';\n}\n\nexport type MessageStartEvent = RawMessageStartEvent;\n\nexport type MessageStopEvent = RawMessageStopEvent;\n\nexport type MessageStreamEvent = RawMessageStreamEvent;\n\nexport interface MessageTokensCount {\n  /**\n   * The total number of tokens across the provided list of messages, system prompt,\n   * and tools.\n   */\n  input_tokens: number;\n}\n\nexport interface Metadata {\n  /**\n   * An external identifier for the user who is associated with the request.\n   *\n   * This should be a uuid, hash value, or other opaque identifier. Anthropic may use\n   * this id to help detect abuse. Do not include any identifying information such as\n   * name, email address, or phone number.\n   */\n  user_id?: string | null;\n}\n\n/**\n * The model that will complete your prompt.\\n\\nSee\n * [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n * details and options.\n */\nexport type Model =\n  | 'claude-3-7-sonnet-latest'\n  | 'claude-3-7-sonnet-20250219'\n  | 'claude-3-5-haiku-latest'\n  | 'claude-3-5-haiku-20241022'\n  | 'claude-3-5-sonnet-latest'\n  | 'claude-3-5-sonnet-20241022'\n  | 'claude-3-5-sonnet-20240620'\n  | 'claude-3-opus-latest'\n  | 'claude-3-opus-20240229'\n  | 'claude-3-sonnet-20240229'\n  | 'claude-3-haiku-20240307'\n  | 'claude-2.1'\n  | 'claude-2.0'\n  | (string & {});\n\nconst DEPRECATED_MODELS: {\n  [K in Model]?: string;\n} = {\n  'claude-1.3': 'November 6th, 2024',\n  'claude-1.3-100k': 'November 6th, 2024',\n  'claude-instant-1.1': 'November 6th, 2024',\n  'claude-instant-1.1-100k': 'November 6th, 2024',\n  'claude-instant-1.2': 'November 6th, 2024',\n  'claude-3-sonnet-20240229': 'July 21st, 2025',\n  'claude-2.1': 'July 21st, 2025',\n  'claude-2.0': 'July 21st, 2025',\n};\n\nexport interface PlainTextSource {\n  data: string;\n\n  media_type: 'text/plain';\n\n  type: 'text';\n}\n\nexport interface RawContentBlockDeltaEvent {\n  delta: TextDelta | InputJSONDelta | CitationsDelta | ThinkingDelta | SignatureDelta;\n\n  index: number;\n\n  type: 'content_block_delta';\n}\n\nexport interface RawContentBlockStartEvent {\n  content_block: TextBlock | ToolUseBlock | ThinkingBlock | RedactedThinkingBlock;\n\n  index: number;\n\n  type: 'content_block_start';\n}\n\nexport interface RawContentBlockStopEvent {\n  index: number;\n\n  type: 'content_block_stop';\n}\n\nexport interface RawMessageDeltaEvent {\n  delta: RawMessageDeltaEvent.Delta;\n\n  type: 'message_delta';\n\n  /**\n   * Billing and rate-limit usage.\n   *\n   * Anthropic's API bills and rate-limits by token counts, as tokens represent the\n   * underlying cost to our systems.\n   *\n   * Under the hood, the API transforms requests into a format suitable for the\n   * model. The model's output then goes through a parsing stage before becoming an\n   * API response. As a result, the token counts in `usage` will not match one-to-one\n   * with the exact visible content of an API request or response.\n   *\n   * For example, `output_tokens` will be non-zero, even for an empty string response\n   * from Claude.\n   *\n   * Total input tokens in a request is the summation of `input_tokens`,\n   * `cache_creation_input_tokens`, and `cache_read_input_tokens`.\n   */\n  usage: MessageDeltaUsage;\n}\n\nexport namespace RawMessageDeltaEvent {\n  export interface Delta {\n    stop_reason: 'end_turn' | 'max_tokens' | 'stop_sequence' | 'tool_use' | null;\n\n    stop_sequence: string | null;\n  }\n}\n\nexport interface RawMessageStartEvent {\n  message: Message;\n\n  type: 'message_start';\n}\n\nexport interface RawMessageStopEvent {\n  type: 'message_stop';\n}\n\nexport type RawMessageStreamEvent =\n  | RawMessageStartEvent\n  | RawMessageDeltaEvent\n  | RawMessageStopEvent\n  | RawContentBlockStartEvent\n  | RawContentBlockDeltaEvent\n  | RawContentBlockStopEvent;\n\nexport interface RedactedThinkingBlock {\n  data: string;\n\n  type: 'redacted_thinking';\n}\n\nexport interface RedactedThinkingBlockParam {\n  data: string;\n\n  type: 'redacted_thinking';\n}\n\nexport interface SignatureDelta {\n  signature: string;\n\n  type: 'signature_delta';\n}\n\nexport interface TextBlock {\n  /**\n   * Citations supporting the text block.\n   *\n   * The type of citation returned will depend on the type of document being cited.\n   * Citing a PDF results in `page_location`, plain text results in `char_location`,\n   * and content document results in `content_block_location`.\n   */\n  citations: Array<TextCitation> | null;\n\n  text: string;\n\n  type: 'text';\n}\n\nexport interface TextBlockParam {\n  text: string;\n\n  type: 'text';\n\n  cache_control?: CacheControlEphemeral | null;\n\n  citations?: Array<TextCitationParam> | null;\n}\n\nexport type TextCitation = CitationCharLocation | CitationPageLocation | CitationContentBlockLocation;\n\nexport type TextCitationParam =\n  | CitationCharLocationParam\n  | CitationPageLocationParam\n  | CitationContentBlockLocationParam;\n\nexport interface TextDelta {\n  text: string;\n\n  type: 'text_delta';\n}\n\nexport interface ThinkingBlock {\n  signature: string;\n\n  thinking: string;\n\n  type: 'thinking';\n}\n\nexport interface ThinkingBlockParam {\n  signature: string;\n\n  thinking: string;\n\n  type: 'thinking';\n}\n\nexport interface ThinkingConfigDisabled {\n  type: 'disabled';\n}\n\nexport interface ThinkingConfigEnabled {\n  /**\n   * Determines how many tokens Claude can use for its internal reasoning process.\n   * Larger budgets can enable more thorough analysis for complex problems, improving\n   * response quality.\n   *\n   * Must be ≥1024 and less than `max_tokens`.\n   *\n   * See\n   * [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking)\n   * for details.\n   */\n  budget_tokens: number;\n\n  type: 'enabled';\n}\n\n/**\n * Configuration for enabling Claude's extended thinking.\n *\n * When enabled, responses include `thinking` content blocks showing Claude's\n * thinking process before the final answer. Requires a minimum budget of 1,024\n * tokens and counts towards your `max_tokens` limit.\n *\n * See\n * [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking)\n * for details.\n */\nexport type ThinkingConfigParam = ThinkingConfigEnabled | ThinkingConfigDisabled;\n\nexport interface ThinkingDelta {\n  thinking: string;\n\n  type: 'thinking_delta';\n}\n\nexport interface Tool {\n  /**\n   * [JSON schema](https://json-schema.org/draft/2020-12) for this tool's input.\n   *\n   * This defines the shape of the `input` that your tool accepts and that the model\n   * will produce.\n   */\n  input_schema: Tool.InputSchema;\n\n  /**\n   * Name of the tool.\n   *\n   * This is how the tool will be called by the model and in tool_use blocks.\n   */\n  name: string;\n\n  cache_control?: CacheControlEphemeral | null;\n\n  /**\n   * Description of what this tool does.\n   *\n   * Tool descriptions should be as detailed as possible. The more information that\n   * the model has about what the tool is and how to use it, the better it will\n   * perform. You can use natural language descriptions to reinforce important\n   * aspects of the tool input JSON schema.\n   */\n  description?: string;\n}\n\nexport namespace Tool {\n  /**\n   * [JSON schema](https://json-schema.org/draft/2020-12) for this tool's input.\n   *\n   * This defines the shape of the `input` that your tool accepts and that the model\n   * will produce.\n   */\n  export interface InputSchema {\n    type: 'object';\n\n    properties?: unknown | null;\n    [k: string]: unknown;\n  }\n}\n\nexport interface ToolBash20250124 {\n  /**\n   * Name of the tool.\n   *\n   * This is how the tool will be called by the model and in tool_use blocks.\n   */\n  name: 'bash';\n\n  type: 'bash_20250124';\n\n  cache_control?: CacheControlEphemeral | null;\n}\n\n/**\n * How the model should use the provided tools. The model can use a specific tool,\n * any available tool, decide by itself, or not use tools at all.\n */\nexport type ToolChoice = ToolChoiceAuto | ToolChoiceAny | ToolChoiceTool | ToolChoiceNone;\n\n/**\n * The model will use any available tools.\n */\nexport interface ToolChoiceAny {\n  type: 'any';\n\n  /**\n   * Whether to disable parallel tool use.\n   *\n   * Defaults to `false`. If set to `true`, the model will output exactly one tool\n   * use.\n   */\n  disable_parallel_tool_use?: boolean;\n}\n\n/**\n * The model will automatically decide whether to use tools.\n */\nexport interface ToolChoiceAuto {\n  type: 'auto';\n\n  /**\n   * Whether to disable parallel tool use.\n   *\n   * Defaults to `false`. If set to `true`, the model will output at most one tool\n   * use.\n   */\n  disable_parallel_tool_use?: boolean;\n}\n\n/**\n * The model will not be allowed to use tools.\n */\nexport interface ToolChoiceNone {\n  type: 'none';\n}\n\n/**\n * The model will use the specified tool with `tool_choice.name`.\n */\nexport interface ToolChoiceTool {\n  /**\n   * The name of the tool to use.\n   */\n  name: string;\n\n  type: 'tool';\n\n  /**\n   * Whether to disable parallel tool use.\n   *\n   * Defaults to `false`. If set to `true`, the model will output exactly one tool\n   * use.\n   */\n  disable_parallel_tool_use?: boolean;\n}\n\nexport interface ToolResultBlockParam {\n  tool_use_id: string;\n\n  type: 'tool_result';\n\n  cache_control?: CacheControlEphemeral | null;\n\n  content?: string | Array<TextBlockParam | ImageBlockParam>;\n\n  is_error?: boolean;\n}\n\nexport interface ToolTextEditor20250124 {\n  /**\n   * Name of the tool.\n   *\n   * This is how the tool will be called by the model and in tool_use blocks.\n   */\n  name: 'str_replace_editor';\n\n  type: 'text_editor_20250124';\n\n  cache_control?: CacheControlEphemeral | null;\n}\n\nexport type ToolUnion = Tool | ToolBash20250124 | ToolTextEditor20250124;\n\nexport interface ToolUseBlock {\n  id: string;\n\n  input: unknown;\n\n  name: string;\n\n  type: 'tool_use';\n}\n\nexport interface ToolUseBlockParam {\n  id: string;\n\n  input: unknown;\n\n  name: string;\n\n  type: 'tool_use';\n\n  cache_control?: CacheControlEphemeral | null;\n}\n\nexport interface URLImageSource {\n  type: 'url';\n\n  url: string;\n}\n\nexport interface URLPDFSource {\n  type: 'url';\n\n  url: string;\n}\n\nexport interface Usage {\n  /**\n   * The number of input tokens used to create the cache entry.\n   */\n  cache_creation_input_tokens: number | null;\n\n  /**\n   * The number of input tokens read from the cache.\n   */\n  cache_read_input_tokens: number | null;\n\n  /**\n   * The number of input tokens which were used.\n   */\n  input_tokens: number;\n\n  /**\n   * The number of output tokens which were used.\n   */\n  output_tokens: number;\n}\n\nexport type MessageCreateParams = MessageCreateParamsNonStreaming | MessageCreateParamsStreaming;\n\nexport interface MessageCreateParamsBase {\n  /**\n   * The maximum number of tokens to generate before stopping.\n   *\n   * Note that our models may stop _before_ reaching this maximum. This parameter\n   * only specifies the absolute maximum number of tokens to generate.\n   *\n   * Different models have different maximum values for this parameter. See\n   * [models](https://docs.anthropic.com/en/docs/models-overview) for details.\n   */\n  max_tokens: number;\n\n  /**\n   * Input messages.\n   *\n   * Our models are trained to operate on alternating `user` and `assistant`\n   * conversational turns. When creating a new `Message`, you specify the prior\n   * conversational turns with the `messages` parameter, and the model then generates\n   * the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n   * in your request will be combined into a single turn.\n   *\n   * Each input message must be an object with a `role` and `content`. You can\n   * specify a single `user`-role message, or you can include multiple `user` and\n   * `assistant` messages.\n   *\n   * If the final message uses the `assistant` role, the response content will\n   * continue immediately from the content in that message. This can be used to\n   * constrain part of the model's response.\n   *\n   * Example with a single `user` message:\n   *\n   * ```json\n   * [{ \"role\": \"user\", \"content\": \"Hello, Claude\" }]\n   * ```\n   *\n   * Example with multiple conversational turns:\n   *\n   * ```json\n   * [\n   *   { \"role\": \"user\", \"content\": \"Hello there.\" },\n   *   { \"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\" },\n   *   { \"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\" }\n   * ]\n   * ```\n   *\n   * Example with a partially-filled response from Claude:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"role\": \"user\",\n   *     \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"\n   *   },\n   *   { \"role\": \"assistant\", \"content\": \"The best answer is (\" }\n   * ]\n   * ```\n   *\n   * Each input message `content` may be either a single `string` or an array of\n   * content blocks, where each block has a specific `type`. Using a `string` for\n   * `content` is shorthand for an array of one content block of type `\"text\"`. The\n   * following input messages are equivalent:\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": \"Hello, Claude\" }\n   * ```\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": [{ \"type\": \"text\", \"text\": \"Hello, Claude\" }] }\n   * ```\n   *\n   * Starting with Claude 3 models, you can also send image content blocks:\n   *\n   * ```json\n   * {\n   *   \"role\": \"user\",\n   *   \"content\": [\n   *     {\n   *       \"type\": \"image\",\n   *       \"source\": {\n   *         \"type\": \"base64\",\n   *         \"media_type\": \"image/jpeg\",\n   *         \"data\": \"/9j/4AAQSkZJRg...\"\n   *       }\n   *     },\n   *     { \"type\": \"text\", \"text\": \"What is in this image?\" }\n   *   ]\n   * }\n   * ```\n   *\n   * We currently support the `base64` source type for images, and the `image/jpeg`,\n   * `image/png`, `image/gif`, and `image/webp` media types.\n   *\n   * See [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for\n   * more input examples.\n   *\n   * Note that if you want to include a\n   * [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n   * the top-level `system` parameter — there is no `\"system\"` role for input\n   * messages in the Messages API.\n   */\n  messages: Array<MessageParam>;\n\n  /**\n   * The model that will complete your prompt.\\n\\nSee\n   * [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n   * details and options.\n   */\n  model: Model;\n\n  /**\n   * An object describing metadata about the request.\n   */\n  metadata?: Metadata;\n\n  /**\n   * Custom text sequences that will cause the model to stop generating.\n   *\n   * Our models will normally stop when they have naturally completed their turn,\n   * which will result in a response `stop_reason` of `\"end_turn\"`.\n   *\n   * If you want the model to stop generating when it encounters custom strings of\n   * text, you can use the `stop_sequences` parameter. If the model encounters one of\n   * the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"`\n   * and the response `stop_sequence` value will contain the matched stop sequence.\n   */\n  stop_sequences?: Array<string>;\n\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n   * details.\n   */\n  stream?: boolean;\n\n  /**\n   * System prompt.\n   *\n   * A system prompt is a way of providing context and instructions to Claude, such\n   * as specifying a particular goal or role. See our\n   * [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n   */\n  system?: string | Array<TextBlockParam>;\n\n  /**\n   * Amount of randomness injected into the response.\n   *\n   * Defaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\n   * for analytical / multiple choice, and closer to `1.0` for creative and\n   * generative tasks.\n   *\n   * Note that even with `temperature` of `0.0`, the results will not be fully\n   * deterministic.\n   */\n  temperature?: number;\n\n  /**\n   * Configuration for enabling Claude's extended thinking.\n   *\n   * When enabled, responses include `thinking` content blocks showing Claude's\n   * thinking process before the final answer. Requires a minimum budget of 1,024\n   * tokens and counts towards your `max_tokens` limit.\n   *\n   * See\n   * [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking)\n   * for details.\n   */\n  thinking?: ThinkingConfigParam;\n\n  /**\n   * How the model should use the provided tools. The model can use a specific tool,\n   * any available tool, decide by itself, or not use tools at all.\n   */\n  tool_choice?: ToolChoice;\n\n  /**\n   * Definitions of tools that the model may use.\n   *\n   * If you include `tools` in your API request, the model may return `tool_use`\n   * content blocks that represent the model's use of those tools. You can then run\n   * those tools using the tool input generated by the model and then optionally\n   * return results back to the model using `tool_result` content blocks.\n   *\n   * Each tool definition includes:\n   *\n   * - `name`: Name of the tool.\n   * - `description`: Optional, but strongly-recommended description of the tool.\n   * - `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the\n   *   tool `input` shape that the model will produce in `tool_use` output content\n   *   blocks.\n   *\n   * For example, if you defined `tools` as:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"name\": \"get_stock_price\",\n   *     \"description\": \"Get the current stock price for a given ticker symbol.\",\n   *     \"input_schema\": {\n   *       \"type\": \"object\",\n   *       \"properties\": {\n   *         \"ticker\": {\n   *           \"type\": \"string\",\n   *           \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n   *         }\n   *       },\n   *       \"required\": [\"ticker\"]\n   *     }\n   *   }\n   * ]\n   * ```\n   *\n   * And then asked the model \"What's the S&P 500 at today?\", the model might produce\n   * `tool_use` content blocks in the response like this:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"type\": \"tool_use\",\n   *     \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n   *     \"name\": \"get_stock_price\",\n   *     \"input\": { \"ticker\": \"^GSPC\" }\n   *   }\n   * ]\n   * ```\n   *\n   * You might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an\n   * input, and return the following back to the model in a subsequent `user`\n   * message:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"type\": \"tool_result\",\n   *     \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n   *     \"content\": \"259.75 USD\"\n   *   }\n   * ]\n   * ```\n   *\n   * Tools can be used for workflows that include running client-side tools and\n   * functions, or more generally whenever you want the model to produce a particular\n   * JSON structure of output.\n   *\n   * See our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.\n   */\n  tools?: Array<ToolUnion>;\n\n  /**\n   * Only sample from the top K options for each subsequent token.\n   *\n   * Used to remove \"long tail\" low probability responses.\n   * [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_k?: number;\n\n  /**\n   * Use nucleus sampling.\n   *\n   * In nucleus sampling, we compute the cumulative distribution over all the options\n   * for each subsequent token in decreasing probability order and cut it off once it\n   * reaches a particular probability specified by `top_p`. You should either alter\n   * `temperature` or `top_p`, but not both.\n   *\n   * Recommended for advanced use cases only. You usually only need to use\n   * `temperature`.\n   */\n  top_p?: number;\n}\n\nexport namespace MessageCreateParams {\n  /**\n   * @deprecated use `Anthropic.Messages.ToolChoiceAuto` instead\n   */\n  export type Metadata = MessagesAPI.Metadata;\n\n  /**\n   * @deprecated use `Anthropic.Messages.ToolChoiceAuto` instead\n   */\n  export type ToolChoiceAuto = MessagesAPI.ToolChoiceAuto;\n\n  /**\n   * @deprecated use `Anthropic.Messages.ToolChoiceAny` instead\n   */\n  export type ToolChoiceAny = MessagesAPI.ToolChoiceAny;\n\n  /**\n   * @deprecated use `Anthropic.Messages.ToolChoiceTool` instead\n   */\n  export type ToolChoiceTool = MessagesAPI.ToolChoiceTool;\n\n  export type MessageCreateParamsNonStreaming = MessagesAPI.MessageCreateParamsNonStreaming;\n  export type MessageCreateParamsStreaming = MessagesAPI.MessageCreateParamsStreaming;\n}\n\nexport interface MessageCreateParamsNonStreaming extends MessageCreateParamsBase {\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n   * details.\n   */\n  stream?: false;\n}\n\nexport interface MessageCreateParamsStreaming extends MessageCreateParamsBase {\n  /**\n   * Whether to incrementally stream the response using server-sent events.\n   *\n   * See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\n   * details.\n   */\n  stream: true;\n}\n\nexport type MessageStreamParams = MessageCreateParamsBase;\n\nexport interface MessageCountTokensParams {\n  /**\n   * Input messages.\n   *\n   * Our models are trained to operate on alternating `user` and `assistant`\n   * conversational turns. When creating a new `Message`, you specify the prior\n   * conversational turns with the `messages` parameter, and the model then generates\n   * the next `Message` in the conversation. Consecutive `user` or `assistant` turns\n   * in your request will be combined into a single turn.\n   *\n   * Each input message must be an object with a `role` and `content`. You can\n   * specify a single `user`-role message, or you can include multiple `user` and\n   * `assistant` messages.\n   *\n   * If the final message uses the `assistant` role, the response content will\n   * continue immediately from the content in that message. This can be used to\n   * constrain part of the model's response.\n   *\n   * Example with a single `user` message:\n   *\n   * ```json\n   * [{ \"role\": \"user\", \"content\": \"Hello, Claude\" }]\n   * ```\n   *\n   * Example with multiple conversational turns:\n   *\n   * ```json\n   * [\n   *   { \"role\": \"user\", \"content\": \"Hello there.\" },\n   *   { \"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\" },\n   *   { \"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\" }\n   * ]\n   * ```\n   *\n   * Example with a partially-filled response from Claude:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"role\": \"user\",\n   *     \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"\n   *   },\n   *   { \"role\": \"assistant\", \"content\": \"The best answer is (\" }\n   * ]\n   * ```\n   *\n   * Each input message `content` may be either a single `string` or an array of\n   * content blocks, where each block has a specific `type`. Using a `string` for\n   * `content` is shorthand for an array of one content block of type `\"text\"`. The\n   * following input messages are equivalent:\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": \"Hello, Claude\" }\n   * ```\n   *\n   * ```json\n   * { \"role\": \"user\", \"content\": [{ \"type\": \"text\", \"text\": \"Hello, Claude\" }] }\n   * ```\n   *\n   * Starting with Claude 3 models, you can also send image content blocks:\n   *\n   * ```json\n   * {\n   *   \"role\": \"user\",\n   *   \"content\": [\n   *     {\n   *       \"type\": \"image\",\n   *       \"source\": {\n   *         \"type\": \"base64\",\n   *         \"media_type\": \"image/jpeg\",\n   *         \"data\": \"/9j/4AAQSkZJRg...\"\n   *       }\n   *     },\n   *     { \"type\": \"text\", \"text\": \"What is in this image?\" }\n   *   ]\n   * }\n   * ```\n   *\n   * We currently support the `base64` source type for images, and the `image/jpeg`,\n   * `image/png`, `image/gif`, and `image/webp` media types.\n   *\n   * See [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for\n   * more input examples.\n   *\n   * Note that if you want to include a\n   * [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\n   * the top-level `system` parameter — there is no `\"system\"` role for input\n   * messages in the Messages API.\n   */\n  messages: Array<MessageParam>;\n\n  /**\n   * The model that will complete your prompt.\\n\\nSee\n   * [models](https://docs.anthropic.com/en/docs/models-overview) for additional\n   * details and options.\n   */\n  model: Model;\n\n  /**\n   * System prompt.\n   *\n   * A system prompt is a way of providing context and instructions to Claude, such\n   * as specifying a particular goal or role. See our\n   * [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n   */\n  system?: string | Array<TextBlockParam>;\n\n  /**\n   * Configuration for enabling Claude's extended thinking.\n   *\n   * When enabled, responses include `thinking` content blocks showing Claude's\n   * thinking process before the final answer. Requires a minimum budget of 1,024\n   * tokens and counts towards your `max_tokens` limit.\n   *\n   * See\n   * [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking)\n   * for details.\n   */\n  thinking?: ThinkingConfigParam;\n\n  /**\n   * How the model should use the provided tools. The model can use a specific tool,\n   * any available tool, decide by itself, or not use tools at all.\n   */\n  tool_choice?: ToolChoice;\n\n  /**\n   * Definitions of tools that the model may use.\n   *\n   * If you include `tools` in your API request, the model may return `tool_use`\n   * content blocks that represent the model's use of those tools. You can then run\n   * those tools using the tool input generated by the model and then optionally\n   * return results back to the model using `tool_result` content blocks.\n   *\n   * Each tool definition includes:\n   *\n   * - `name`: Name of the tool.\n   * - `description`: Optional, but strongly-recommended description of the tool.\n   * - `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the\n   *   tool `input` shape that the model will produce in `tool_use` output content\n   *   blocks.\n   *\n   * For example, if you defined `tools` as:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"name\": \"get_stock_price\",\n   *     \"description\": \"Get the current stock price for a given ticker symbol.\",\n   *     \"input_schema\": {\n   *       \"type\": \"object\",\n   *       \"properties\": {\n   *         \"ticker\": {\n   *           \"type\": \"string\",\n   *           \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n   *         }\n   *       },\n   *       \"required\": [\"ticker\"]\n   *     }\n   *   }\n   * ]\n   * ```\n   *\n   * And then asked the model \"What's the S&P 500 at today?\", the model might produce\n   * `tool_use` content blocks in the response like this:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"type\": \"tool_use\",\n   *     \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n   *     \"name\": \"get_stock_price\",\n   *     \"input\": { \"ticker\": \"^GSPC\" }\n   *   }\n   * ]\n   * ```\n   *\n   * You might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an\n   * input, and return the following back to the model in a subsequent `user`\n   * message:\n   *\n   * ```json\n   * [\n   *   {\n   *     \"type\": \"tool_result\",\n   *     \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n   *     \"content\": \"259.75 USD\"\n   *   }\n   * ]\n   * ```\n   *\n   * Tools can be used for workflows that include running client-side tools and\n   * functions, or more generally whenever you want the model to produce a particular\n   * JSON structure of output.\n   *\n   * See our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.\n   */\n  tools?: Array<MessageCountTokensTool>;\n}\n\nMessages.Batches = Batches;\nMessages.MessageBatchesPage = MessageBatchesPage;\n\nexport declare namespace Messages {\n  export {\n    type Base64ImageSource as Base64ImageSource,\n    type Base64PDFSource as Base64PDFSource,\n    type CacheControlEphemeral as CacheControlEphemeral,\n    type CitationCharLocation as CitationCharLocation,\n    type CitationCharLocationParam as CitationCharLocationParam,\n    type CitationContentBlockLocation as CitationContentBlockLocation,\n    type CitationContentBlockLocationParam as CitationContentBlockLocationParam,\n    type CitationPageLocation as CitationPageLocation,\n    type CitationPageLocationParam as CitationPageLocationParam,\n    type CitationsConfigParam as CitationsConfigParam,\n    type CitationsDelta as CitationsDelta,\n    type ContentBlock as ContentBlock,\n    type ContentBlockDeltaEvent as ContentBlockDeltaEvent,\n    type ContentBlockParam as ContentBlockParam,\n    type ContentBlockSource as ContentBlockSource,\n    type ContentBlockSourceContent as ContentBlockSourceContent,\n    type ContentBlockStartEvent as ContentBlockStartEvent,\n    type ContentBlockStopEvent as ContentBlockStopEvent,\n    type DocumentBlockParam as DocumentBlockParam,\n    type ImageBlockParam as ImageBlockParam,\n    type InputJsonDelta as InputJsonDelta,\n    type InputJSONDelta as InputJSONDelta,\n    type Message as Message,\n    type MessageCountTokensTool as MessageCountTokensTool,\n    type MessageDeltaEvent as MessageDeltaEvent,\n    type MessageDeltaUsage as MessageDeltaUsage,\n    type MessageParam as MessageParam,\n    type MessageStartEvent as MessageStartEvent,\n    type MessageStopEvent as MessageStopEvent,\n    type MessageStreamEvent as MessageStreamEvent,\n    type MessageTokensCount as MessageTokensCount,\n    type Metadata as Metadata,\n    type Model as Model,\n    type PlainTextSource as PlainTextSource,\n    type RawContentBlockDeltaEvent as RawContentBlockDeltaEvent,\n    type RawContentBlockStartEvent as RawContentBlockStartEvent,\n    type RawContentBlockStopEvent as RawContentBlockStopEvent,\n    type RawMessageDeltaEvent as RawMessageDeltaEvent,\n    type RawMessageStartEvent as RawMessageStartEvent,\n    type RawMessageStopEvent as RawMessageStopEvent,\n    type RawMessageStreamEvent as RawMessageStreamEvent,\n    type RedactedThinkingBlock as RedactedThinkingBlock,\n    type RedactedThinkingBlockParam as RedactedThinkingBlockParam,\n    type SignatureDelta as SignatureDelta,\n    type TextBlock as TextBlock,\n    type TextBlockParam as TextBlockParam,\n    type TextCitation as TextCitation,\n    type TextCitationParam as TextCitationParam,\n    type TextDelta as TextDelta,\n    type ThinkingBlock as ThinkingBlock,\n    type ThinkingBlockParam as ThinkingBlockParam,\n    type ThinkingConfigDisabled as ThinkingConfigDisabled,\n    type ThinkingConfigEnabled as ThinkingConfigEnabled,\n    type ThinkingConfigParam as ThinkingConfigParam,\n    type ThinkingDelta as ThinkingDelta,\n    type Tool as Tool,\n    type ToolBash20250124 as ToolBash20250124,\n    type ToolChoice as ToolChoice,\n    type ToolChoiceAny as ToolChoiceAny,\n    type ToolChoiceAuto as ToolChoiceAuto,\n    type ToolChoiceNone as ToolChoiceNone,\n    type ToolChoiceTool as ToolChoiceTool,\n    type ToolResultBlockParam as ToolResultBlockParam,\n    type ToolTextEditor20250124 as ToolTextEditor20250124,\n    type ToolUnion as ToolUnion,\n    type ToolUseBlock as ToolUseBlock,\n    type ToolUseBlockParam as ToolUseBlockParam,\n    type URLImageSource as URLImageSource,\n    type URLPDFSource as URLPDFSource,\n    type Usage as Usage,\n    type MessageCreateParams as MessageCreateParams,\n    type MessageCreateParamsNonStreaming as MessageCreateParamsNonStreaming,\n    type MessageCreateParamsStreaming as MessageCreateParamsStreaming,\n    type MessageStreamParams as MessageStreamParams,\n    type MessageCountTokensParams as MessageCountTokensParams,\n  };\n\n  export {\n    Batches as Batches,\n    type DeletedMessageBatch as DeletedMessageBatch,\n    type MessageBatch as MessageBatch,\n    type MessageBatchCanceledResult as MessageBatchCanceledResult,\n    type MessageBatchErroredResult as MessageBatchErroredResult,\n    type MessageBatchExpiredResult as MessageBatchExpiredResult,\n    type MessageBatchIndividualResponse as MessageBatchIndividualResponse,\n    type MessageBatchRequestCounts as MessageBatchRequestCounts,\n    type MessageBatchResult as MessageBatchResult,\n    type MessageBatchSucceededResult as MessageBatchSucceededResult,\n    MessageBatchesPage as MessageBatchesPage,\n    type BatchCreateParams as BatchCreateParams,\n    type BatchListParams as BatchListParams,\n  };\n}\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;OAIf,KAAKC,UAAU;SAIpBC,OAAO,EAUPC,kBAAkB,QACnB;SAEQC,aAAa,QAAE;SAEfA,aAAa,QAAE;AAExB,OAAM,MAAOC,QAAS,SAAQL,WAAW;EAAzCM,YAAA;;IACE,KAAAC,OAAO,GAAuB,IAAIN,UAAU,CAACC,OAAO,CAAC,IAAI,CAACM,OAAO,CAAC;EA+DpE;EA3CEC,MAAMA,CACJC,IAAyB,EACzBC,OAA6B;IAE7B,IAAID,IAAI,CAACE,KAAK,IAAIC,iBAAiB,EAAE;MACnCC,OAAO,CAACC,IAAI,CACV,cAAcL,IAAI,CAACE,KAAK,iDACtBC,iBAAiB,CAACH,IAAI,CAACE,KAAK,CAC9B,gIAAgI,CACjI;;IAEH,OAAO,IAAI,CAACJ,OAAO,CAACQ,IAAI,CAAC,cAAc,EAAE;MACvCN,IAAI;MACJO,OAAO,EACJ,IAAI,CAACT,OAAe,CAACU,QAAQ,CAACD,OAAO,KACrCP,IAAI,CAACS,MAAM,GAAG,MAAM,GAAG,IAAI,CAACX,OAAO,CAACY,6BAA6B,CAACV,IAAI,CAACW,UAAU,CAAC,CAAC;MACtF,GAAGV,OAAO;MACVQ,MAAM,EAAET,IAAI,CAACS,MAAM,IAAI;KACxB,CAAoE;EACvE;EAEA;;;EAGAA,MAAMA,CAACT,IAAyB,EAAEC,OAA6B;IAC7D,OAAOP,aAAa,CAACkB,aAAa,CAAC,IAAI,EAAEZ,IAAI,EAAEC,OAAO,CAAC;EACzD;EAEA;;;;;;;;;EASAY,WAAWA,CACTb,IAA8B,EAC9BC,OAA6B;IAE7B,OAAO,IAAI,CAACH,OAAO,CAACQ,IAAI,CAAC,2BAA2B,EAAE;MAAEN,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EAC7E;;AAuVF,MAAME,iBAAiB,GAEnB;EACF,YAAY,EAAE,oBAAoB;EAClC,iBAAiB,EAAE,oBAAoB;EACvC,oBAAoB,EAAE,oBAAoB;EAC1C,yBAAyB,EAAE,oBAAoB;EAC/C,oBAAoB,EAAE,oBAAoB;EAC1C,0BAA0B,EAAE,iBAAiB;EAC7C,YAAY,EAAE,iBAAiB;EAC/B,YAAY,EAAE;CACf;AAw5BDR,QAAQ,CAACH,OAAO,GAAGA,OAAO;AAC1BG,QAAQ,CAACF,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}