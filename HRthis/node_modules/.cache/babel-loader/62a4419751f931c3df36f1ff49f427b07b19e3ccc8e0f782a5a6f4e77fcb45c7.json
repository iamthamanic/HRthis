{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock authentication data\nconst mockUsers = [{\n  id: '1',\n  email: 'max.mustermann@workytime.de',\n  name: 'Max Mustermann',\n  role: 'EMPLOYEE',\n  organizationId: 'org1',\n  firstName: 'Max',\n  lastName: 'Mustermann',\n  privateEmail: 'max.privat@gmail.com',\n  position: 'Senior Developer',\n  department: 'IT',\n  weeklyHours: 40,\n  employmentType: 'FULL_TIME',\n  joinDate: '2022-01-15',\n  employmentStatus: 'ACTIVE',\n  vacationDays: 30,\n  address: {\n    street: 'Musterstraße 123',\n    postalCode: '12345',\n    city: 'Berlin'\n  },\n  phone: '+49 30 12345678',\n  bankDetails: {\n    iban: 'DE89 3704 0044 0532 0130 00',\n    bic: 'COBADEFFXXX'\n  }\n}, {\n  id: '2',\n  email: 'anna.admin@workytime.de',\n  name: 'Anna Admin',\n  role: 'ADMIN',\n  organizationId: 'org1',\n  firstName: 'Anna',\n  lastName: 'Admin',\n  privateEmail: 'anna.privat@gmail.com',\n  position: 'HR Manager',\n  department: 'Human Resources',\n  weeklyHours: 40,\n  employmentType: 'FULL_TIME',\n  joinDate: '2021-03-01',\n  employmentStatus: 'ACTIVE',\n  vacationDays: 30\n}, {\n  id: '3',\n  email: 'tom.teilzeit@workytime.de',\n  name: 'Tom Teilzeit',\n  role: 'EMPLOYEE',\n  organizationId: 'org1',\n  firstName: 'Tom',\n  lastName: 'Teilzeit',\n  privateEmail: 'tom.privat@gmail.com',\n  position: 'Designer',\n  department: 'Marketing',\n  weeklyHours: 20,\n  employmentType: 'PART_TIME',\n  joinDate: '2023-06-01',\n  employmentStatus: 'ACTIVE',\n  vacationDays: 15\n}];\nconst mockOrganizations = [{\n  id: 'org1',\n  name: 'WorkyTime GmbH',\n  slug: 'workytime-gmbh'\n}];\nexport const useAuthStore = create()(persist((set, get) => ({\n  user: null,\n  organization: null,\n  isAuthenticated: false,\n  isLoading: false,\n  login: async (email, password) => {\n    set({\n      isLoading: true\n    });\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock authentication - in real app, this would be API call\n      const user = mockUsers.find(u => u.email === email);\n      if (!user || password !== 'password') {\n        throw new Error('Ungültige Anmeldedaten');\n      }\n      const organization = mockOrganizations.find(org => org.id === user.organizationId);\n      set({\n        user,\n        organization,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  logout: () => {\n    set({\n      user: null,\n      organization: null,\n      isAuthenticated: false\n    });\n  },\n  setUser: user => {\n    set({\n      user\n    });\n  },\n  setOrganization: organization => {\n    set({\n      organization\n    });\n  },\n  updateUser: async (userId, updates) => {\n    set({\n      isLoading: true\n    });\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Update mock data\n      const userIndex = mockUsers.findIndex(u => u.id === userId);\n      if (userIndex !== -1) {\n        mockUsers[userIndex] = {\n          ...mockUsers[userIndex],\n          ...updates\n        };\n      }\n\n      // Update current user if it's the same\n      const currentUser = get().user;\n      if (currentUser && currentUser.id === userId) {\n        set({\n          user: {\n            ...currentUser,\n            ...updates\n          }\n        });\n      }\n      set({\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  getAllUsers: () => {\n    return mockUsers;\n  }\n}), {\n  name: 'auth-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    user: state.user,\n    organization: state.organization,\n    isAuthenticated: state.isAuthenticated\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockUsers","id","email","name","role","organizationId","firstName","lastName","privateEmail","position","department","weeklyHours","employmentType","joinDate","employmentStatus","vacationDays","address","street","postalCode","city","phone","bankDetails","iban","bic","mockOrganizations","slug","useAuthStore","set","get","user","organization","isAuthenticated","isLoading","login","password","Promise","resolve","setTimeout","find","u","Error","org","error","logout","setUser","setOrganization","updateUser","userId","updates","userIndex","findIndex","currentUser","getAllUsers","storage","localStorage","partialize","state"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/auth.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { User, Organization } from '../types';\n\ninterface AuthState {\n  user: User | null;\n  organization: Organization | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  setUser: (user: User) => void;\n  setOrganization: (org: Organization) => void;\n  updateUser: (userId: string, updates: Partial<User>) => Promise<void>;\n  getAllUsers: () => User[];\n}\n\n// Mock authentication data\nconst mockUsers: User[] = [\n  {\n    id: '1',\n    email: 'max.mustermann@workytime.de',\n    name: 'Max Mustermann',\n    role: 'EMPLOYEE',\n    organizationId: 'org1',\n    firstName: 'Max',\n    lastName: 'Mustermann',\n    privateEmail: 'max.privat@gmail.com',\n    position: 'Senior Developer',\n    department: 'IT',\n    weeklyHours: 40,\n    employmentType: 'FULL_TIME',\n    joinDate: '2022-01-15',\n    employmentStatus: 'ACTIVE',\n    vacationDays: 30,\n    address: {\n      street: 'Musterstraße 123',\n      postalCode: '12345',\n      city: 'Berlin'\n    },\n    phone: '+49 30 12345678',\n    bankDetails: {\n      iban: 'DE89 3704 0044 0532 0130 00',\n      bic: 'COBADEFFXXX'\n    }\n  },\n  {\n    id: '2',\n    email: 'anna.admin@workytime.de',\n    name: 'Anna Admin',\n    role: 'ADMIN',\n    organizationId: 'org1',\n    firstName: 'Anna',\n    lastName: 'Admin',\n    privateEmail: 'anna.privat@gmail.com',\n    position: 'HR Manager',\n    department: 'Human Resources',\n    weeklyHours: 40,\n    employmentType: 'FULL_TIME',\n    joinDate: '2021-03-01',\n    employmentStatus: 'ACTIVE',\n    vacationDays: 30\n  },\n  {\n    id: '3',\n    email: 'tom.teilzeit@workytime.de',\n    name: 'Tom Teilzeit',\n    role: 'EMPLOYEE',\n    organizationId: 'org1',\n    firstName: 'Tom',\n    lastName: 'Teilzeit',\n    privateEmail: 'tom.privat@gmail.com',\n    position: 'Designer',\n    department: 'Marketing',\n    weeklyHours: 20,\n    employmentType: 'PART_TIME',\n    joinDate: '2023-06-01',\n    employmentStatus: 'ACTIVE',\n    vacationDays: 15\n  }\n];\n\nconst mockOrganizations: Organization[] = [\n  {\n    id: 'org1',\n    name: 'WorkyTime GmbH',\n    slug: 'workytime-gmbh'\n  }\n];\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      organization: null,\n      isAuthenticated: false,\n      isLoading: false,\n\n      login: async (email: string, password: string) => {\n        set({ isLoading: true });\n        \n        try {\n          // Simulate API call delay\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Mock authentication - in real app, this would be API call\n          const user = mockUsers.find(u => u.email === email);\n          \n          if (!user || password !== 'password') {\n            throw new Error('Ungültige Anmeldedaten');\n          }\n          \n          const organization = mockOrganizations.find(org => org.id === user.organizationId);\n          \n          set({ \n            user, \n            organization, \n            isAuthenticated: true, \n            isLoading: false \n          });\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      logout: () => {\n        set({ \n          user: null, \n          organization: null, \n          isAuthenticated: false \n        });\n      },\n\n      setUser: (user: User) => {\n        set({ user });\n      },\n\n      setOrganization: (organization: Organization) => {\n        set({ organization });\n      },\n\n      updateUser: async (userId: string, updates: Partial<User>) => {\n        set({ isLoading: true });\n        \n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          // Update mock data\n          const userIndex = mockUsers.findIndex(u => u.id === userId);\n          if (userIndex !== -1) {\n            mockUsers[userIndex] = { ...mockUsers[userIndex], ...updates };\n          }\n          \n          // Update current user if it's the same\n          const currentUser = get().user;\n          if (currentUser && currentUser.id === userId) {\n            set({ user: { ...currentUser, ...updates } });\n          }\n          \n          set({ isLoading: false });\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      getAllUsers: () => {\n        return mockUsers;\n      }\n    }),\n    {\n      name: 'auth-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        user: state.user, \n        organization: state.organization,\n        isAuthenticated: state.isAuthenticated \n      }),\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}