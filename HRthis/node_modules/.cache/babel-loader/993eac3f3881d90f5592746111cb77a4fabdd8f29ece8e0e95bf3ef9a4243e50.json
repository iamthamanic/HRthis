{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n// Mock data\nconst mockTransactions = [{\n  id: '1',\n  userId: '1',\n  amount: 50,\n  reason: 'Willkommensbonus',\n  type: 'ADMIN_GRANT',\n  adminId: '2',\n  createdAt: '2024-12-01T10:00:00Z'\n}, {\n  id: '2',\n  userId: '1',\n  amount: 25,\n  reason: 'Überstunden geleistet',\n  type: 'ADMIN_GRANT',\n  adminId: '2',\n  createdAt: '2024-12-15T14:30:00Z'\n}, {\n  id: '3',\n  userId: '3',\n  amount: 30,\n  reason: 'Projektabschluss erfolgreich',\n  type: 'ADMIN_GRANT',\n  adminId: '2',\n  createdAt: '2024-12-10T09:15:00Z'\n}];\nconst mockRules = [{\n  id: '1',\n  title: 'Schulung abgeschlossen',\n  description: 'Für jede erfolgreich abgeschlossene Schulung',\n  coinAmount: 20,\n  isActive: true,\n  createdAt: '2024-11-01T10:00:00Z'\n}, {\n  id: '2',\n  title: 'Keine Krankheitstage im Monat',\n  description: 'Bonus für komplette Anwesenheit im Monat',\n  coinAmount: 15,\n  isActive: true,\n  createdAt: '2024-11-01T10:00:00Z'\n}, {\n  id: '3',\n  title: 'Überstunden (>5h/Monat)',\n  description: 'Zusätzliche Coins für Flexibilität',\n  coinAmount: 10,\n  isActive: true,\n  createdAt: '2024-11-01T10:00:00Z'\n}];\nexport const useCoinsStore = create()(persist((set, get) => ({\n  transactions: mockTransactions,\n  rules: mockRules,\n  balances: [],\n  isLoading: false,\n  grantCoins: async (userId, amount, reason, adminId) => {\n    set({\n      isLoading: true\n    });\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const newTransaction = {\n        id: Date.now().toString(),\n        userId,\n        amount,\n        reason,\n        type: 'ADMIN_GRANT',\n        adminId,\n        createdAt: new Date().toISOString()\n      };\n      set(state => ({\n        transactions: [newTransaction, ...state.transactions],\n        isLoading: false\n      }));\n\n      // Update user balance\n      get().updateUserBalance(userId);\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  getUserBalance: userId => {\n    const transactions = get().transactions.filter(t => t.userId === userId);\n    const totalEarned = transactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);\n    const totalSpent = Math.abs(transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amount, 0));\n    const currentBalance = totalEarned - totalSpent;\n    const existingBalance = get().balances.find(b => b.userId === userId);\n    if (existingBalance) {\n      return {\n        ...existingBalance,\n        totalEarned,\n        totalSpent,\n        currentBalance,\n        lastUpdated: new Date().toISOString()\n      };\n    }\n    return {\n      userId,\n      totalEarned,\n      totalSpent,\n      currentBalance,\n      lastUpdated: new Date().toISOString()\n    };\n  },\n  getUserTransactions: userId => {\n    return get().transactions.filter(t => t.userId === userId).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  },\n  getCoinRules: () => {\n    return get().rules.filter(rule => rule.isActive).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  },\n  addCoinRule: async rule => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const newRule = {\n        ...rule,\n        id: Date.now().toString(),\n        createdAt: new Date().toISOString()\n      };\n      set(state => ({\n        rules: [newRule, ...state.rules],\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  updateCoinRule: async (ruleId, updates) => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      set(state => ({\n        rules: state.rules.map(rule => rule.id === ruleId ? {\n          ...rule,\n          ...updates\n        } : rule),\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  deleteCoinRule: async ruleId => {\n    set({\n      isLoading: true\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      set(state => ({\n        rules: state.rules.filter(rule => rule.id !== ruleId),\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  updateUserBalance: userId => {\n    const balance = get().getUserBalance(userId);\n    set(state => ({\n      balances: [...state.balances.filter(b => b.userId !== userId), balance]\n    }));\n  }\n}), {\n  name: 'coins-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    transactions: state.transactions,\n    rules: state.rules,\n    balances: state.balances\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","mockTransactions","id","userId","amount","reason","type","adminId","createdAt","mockRules","title","description","coinAmount","isActive","useCoinsStore","set","get","transactions","rules","balances","isLoading","grantCoins","Promise","resolve","setTimeout","newTransaction","Date","now","toString","toISOString","state","updateUserBalance","error","getUserBalance","filter","t","totalEarned","reduce","sum","totalSpent","Math","abs","currentBalance","existingBalance","find","b","lastUpdated","getUserTransactions","sort","a","getTime","getCoinRules","rule","addCoinRule","newRule","updateCoinRule","ruleId","updates","map","deleteCoinRule","balance","name","storage","localStorage","partialize"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/src/state/coins.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n\nexport interface CoinTransaction {\n  id: string;\n  userId: string;\n  amount: number; // positive for earning, negative for spending\n  reason: string;\n  type: 'ADMIN_GRANT' | 'RULE_EARNED' | 'BENEFIT_PURCHASE';\n  adminId?: string; // Who granted the coins (for ADMIN_GRANT)\n  benefitId?: string; // Which benefit was purchased (for BENEFIT_PURCHASE)\n  ruleId?: string; // Which rule was fulfilled (for RULE_EARNED)\n  createdAt: string;\n}\n\nexport interface CoinRule {\n  id: string;\n  title: string;\n  description: string;\n  coinAmount: number;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport interface UserCoinBalance {\n  userId: string;\n  totalEarned: number;\n  totalSpent: number;\n  currentBalance: number;\n  lastUpdated: string;\n}\n\ninterface CoinsState {\n  transactions: CoinTransaction[];\n  rules: CoinRule[];\n  balances: UserCoinBalance[];\n  isLoading: boolean;\n  \n  // Coin distribution by admin\n  grantCoins: (userId: string, amount: number, reason: string, adminId: string) => Promise<void>;\n  \n  // User coin management\n  getUserBalance: (userId: string) => UserCoinBalance;\n  getUserTransactions: (userId: string) => CoinTransaction[];\n  \n  // Rules management\n  getCoinRules: () => CoinRule[];\n  addCoinRule: (rule: Omit<CoinRule, 'id' | 'createdAt'>) => Promise<void>;\n  updateCoinRule: (ruleId: string, updates: Partial<CoinRule>) => Promise<void>;\n  deleteCoinRule: (ruleId: string) => Promise<void>;\n  \n  // Internal methods\n  updateUserBalance: (userId: string) => void;\n}\n\n// Mock data\nconst mockTransactions: CoinTransaction[] = [\n  {\n    id: '1',\n    userId: '1',\n    amount: 50,\n    reason: 'Willkommensbonus',\n    type: 'ADMIN_GRANT',\n    adminId: '2',\n    createdAt: '2024-12-01T10:00:00Z'\n  },\n  {\n    id: '2',\n    userId: '1',\n    amount: 25,\n    reason: 'Überstunden geleistet',\n    type: 'ADMIN_GRANT',\n    adminId: '2',\n    createdAt: '2024-12-15T14:30:00Z'\n  },\n  {\n    id: '3',\n    userId: '3',\n    amount: 30,\n    reason: 'Projektabschluss erfolgreich',\n    type: 'ADMIN_GRANT',\n    adminId: '2',\n    createdAt: '2024-12-10T09:15:00Z'\n  }\n];\n\nconst mockRules: CoinRule[] = [\n  {\n    id: '1',\n    title: 'Schulung abgeschlossen',\n    description: 'Für jede erfolgreich abgeschlossene Schulung',\n    coinAmount: 20,\n    isActive: true,\n    createdAt: '2024-11-01T10:00:00Z'\n  },\n  {\n    id: '2',\n    title: 'Keine Krankheitstage im Monat',\n    description: 'Bonus für komplette Anwesenheit im Monat',\n    coinAmount: 15,\n    isActive: true,\n    createdAt: '2024-11-01T10:00:00Z'\n  },\n  {\n    id: '3',\n    title: 'Überstunden (>5h/Monat)',\n    description: 'Zusätzliche Coins für Flexibilität',\n    coinAmount: 10,\n    isActive: true,\n    createdAt: '2024-11-01T10:00:00Z'\n  }\n];\n\nexport const useCoinsStore = create<CoinsState>()(\n  persist(\n    (set, get) => ({\n      transactions: mockTransactions,\n      rules: mockRules,\n      balances: [],\n      isLoading: false,\n\n      grantCoins: async (userId: string, amount: number, reason: string, adminId: string) => {\n        set({ isLoading: true });\n        \n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          const newTransaction: CoinTransaction = {\n            id: Date.now().toString(),\n            userId,\n            amount,\n            reason,\n            type: 'ADMIN_GRANT',\n            adminId,\n            createdAt: new Date().toISOString()\n          };\n          \n          set(state => ({\n            transactions: [newTransaction, ...state.transactions],\n            isLoading: false\n          }));\n\n          // Update user balance\n          get().updateUserBalance(userId);\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      getUserBalance: (userId: string) => {\n        const transactions = get().transactions.filter(t => t.userId === userId);\n        const totalEarned = transactions\n          .filter(t => t.amount > 0)\n          .reduce((sum, t) => sum + t.amount, 0);\n        const totalSpent = Math.abs(transactions\n          .filter(t => t.amount < 0)\n          .reduce((sum, t) => sum + t.amount, 0));\n        const currentBalance = totalEarned - totalSpent;\n\n        const existingBalance = get().balances.find(b => b.userId === userId);\n        if (existingBalance) {\n          return {\n            ...existingBalance,\n            totalEarned,\n            totalSpent,\n            currentBalance,\n            lastUpdated: new Date().toISOString()\n          };\n        }\n\n        return {\n          userId,\n          totalEarned,\n          totalSpent,\n          currentBalance,\n          lastUpdated: new Date().toISOString()\n        };\n      },\n\n      getUserTransactions: (userId: string) => {\n        return get().transactions\n          .filter(t => t.userId === userId)\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      },\n\n      getCoinRules: () => {\n        return get().rules.filter(rule => rule.isActive)\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      },\n\n      addCoinRule: async (rule) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          const newRule: CoinRule = {\n            ...rule,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString()\n          };\n          \n          set(state => ({\n            rules: [newRule, ...state.rules],\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      updateCoinRule: async (ruleId: string, updates: Partial<CoinRule>) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          set(state => ({\n            rules: state.rules.map(rule =>\n              rule.id === ruleId ? { ...rule, ...updates } : rule\n            ),\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      deleteCoinRule: async (ruleId: string) => {\n        set({ isLoading: true });\n        \n        try {\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          set(state => ({\n            rules: state.rules.filter(rule => rule.id !== ruleId),\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      updateUserBalance: (userId: string) => {\n        const balance = get().getUserBalance(userId);\n        \n        set(state => ({\n          balances: [\n            ...state.balances.filter(b => b.userId !== userId),\n            balance\n          ]\n        }));\n      }\n    }),\n    {\n      name: 'coins-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ \n        transactions: state.transactions,\n        rules: state.rules,\n        balances: state.balances\n      }),\n    }\n  )\n);"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;AAsD/D;AACA,MAAMC,gBAAmC,GAAG,CAC1C;EACEC,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,kBAAkB;EAC1BC,IAAI,EAAE,aAAa;EACnBC,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE;AACb,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,uBAAuB;EAC/BC,IAAI,EAAE,aAAa;EACnBC,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE;AACb,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACPC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,8BAA8B;EACtCC,IAAI,EAAE,aAAa;EACnBC,OAAO,EAAE,GAAG;EACZC,SAAS,EAAE;AACb,CAAC,CACF;AAED,MAAMC,SAAqB,GAAG,CAC5B;EACEP,EAAE,EAAE,GAAG;EACPQ,KAAK,EAAE,wBAAwB;EAC/BC,WAAW,EAAE,8CAA8C;EAC3DC,UAAU,EAAE,EAAE;EACdC,QAAQ,EAAE,IAAI;EACdL,SAAS,EAAE;AACb,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACPQ,KAAK,EAAE,+BAA+B;EACtCC,WAAW,EAAE,0CAA0C;EACvDC,UAAU,EAAE,EAAE;EACdC,QAAQ,EAAE,IAAI;EACdL,SAAS,EAAE;AACb,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACPQ,KAAK,EAAE,yBAAyB;EAChCC,WAAW,EAAE,oCAAoC;EACjDC,UAAU,EAAE,EAAE;EACdC,QAAQ,EAAE,IAAI;EACdL,SAAS,EAAE;AACb,CAAC,CACF;AAED,OAAO,MAAMM,aAAa,GAAGhB,MAAM,CAAa,CAAC,CAC/CC,OAAO,CACL,CAACgB,GAAG,EAAEC,GAAG,MAAM;EACbC,YAAY,EAAEhB,gBAAgB;EAC9BiB,KAAK,EAAET,SAAS;EAChBU,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,KAAK;EAEhBC,UAAU,EAAE,MAAAA,CAAOlB,MAAc,EAAEC,MAAc,EAAEC,MAAc,EAAEE,OAAe,KAAK;IACrFQ,GAAG,CAAC;MAAEK,SAAS,EAAE;IAAK,CAAC,CAAC;IAExB,IAAI;MACF;MACA,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,MAAME,cAA+B,GAAG;QACtCvB,EAAE,EAAEwB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzBzB,MAAM;QACNC,MAAM;QACNC,MAAM;QACNC,IAAI,EAAE,aAAa;QACnBC,OAAO;QACPC,SAAS,EAAE,IAAIkB,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MACpC,CAAC;MAEDd,GAAG,CAACe,KAAK,KAAK;QACZb,YAAY,EAAE,CAACQ,cAAc,EAAE,GAAGK,KAAK,CAACb,YAAY,CAAC;QACrDG,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;;MAEH;MACAJ,GAAG,CAAC,CAAC,CAACe,iBAAiB,CAAC5B,MAAM,CAAC;IACjC,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACdjB,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMY,KAAK;IACb;EACF,CAAC;EAEDC,cAAc,EAAG9B,MAAc,IAAK;IAClC,MAAMc,YAAY,GAAGD,GAAG,CAAC,CAAC,CAACC,YAAY,CAACiB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChC,MAAM,KAAKA,MAAM,CAAC;IACxE,MAAMiC,WAAW,GAAGnB,YAAY,CAC7BiB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC/B,MAAM,GAAG,CAAC,CAAC,CACzBiC,MAAM,CAAC,CAACC,GAAG,EAAEH,CAAC,KAAKG,GAAG,GAAGH,CAAC,CAAC/B,MAAM,EAAE,CAAC,CAAC;IACxC,MAAMmC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACxB,YAAY,CACrCiB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC/B,MAAM,GAAG,CAAC,CAAC,CACzBiC,MAAM,CAAC,CAACC,GAAG,EAAEH,CAAC,KAAKG,GAAG,GAAGH,CAAC,CAAC/B,MAAM,EAAE,CAAC,CAAC,CAAC;IACzC,MAAMsC,cAAc,GAAGN,WAAW,GAAGG,UAAU;IAE/C,MAAMI,eAAe,GAAG3B,GAAG,CAAC,CAAC,CAACG,QAAQ,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC1C,MAAM,KAAKA,MAAM,CAAC;IACrE,IAAIwC,eAAe,EAAE;MACnB,OAAO;QACL,GAAGA,eAAe;QAClBP,WAAW;QACXG,UAAU;QACVG,cAAc;QACdI,WAAW,EAAE,IAAIpB,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MACtC,CAAC;IACH;IAEA,OAAO;MACL1B,MAAM;MACNiC,WAAW;MACXG,UAAU;MACVG,cAAc;MACdI,WAAW,EAAE,IAAIpB,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;IACtC,CAAC;EACH,CAAC;EAEDkB,mBAAmB,EAAG5C,MAAc,IAAK;IACvC,OAAOa,GAAG,CAAC,CAAC,CAACC,YAAY,CACtBiB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChC,MAAM,KAAKA,MAAM,CAAC,CAChC6C,IAAI,CAAC,CAACC,CAAC,EAAEJ,CAAC,KAAK,IAAInB,IAAI,CAACmB,CAAC,CAACrC,SAAS,CAAC,CAAC0C,OAAO,CAAC,CAAC,GAAG,IAAIxB,IAAI,CAACuB,CAAC,CAACzC,SAAS,CAAC,CAAC0C,OAAO,CAAC,CAAC,CAAC;EACtF,CAAC;EAEDC,YAAY,EAAEA,CAAA,KAAM;IAClB,OAAOnC,GAAG,CAAC,CAAC,CAACE,KAAK,CAACgB,MAAM,CAACkB,IAAI,IAAIA,IAAI,CAACvC,QAAQ,CAAC,CAC7CmC,IAAI,CAAC,CAACC,CAAC,EAAEJ,CAAC,KAAK,IAAInB,IAAI,CAACmB,CAAC,CAACrC,SAAS,CAAC,CAAC0C,OAAO,CAAC,CAAC,GAAG,IAAIxB,IAAI,CAACuB,CAAC,CAACzC,SAAS,CAAC,CAAC0C,OAAO,CAAC,CAAC,CAAC;EACtF,CAAC;EAEDG,WAAW,EAAE,MAAOD,IAAI,IAAK;IAC3BrC,GAAG,CAAC;MAAEK,SAAS,EAAE;IAAK,CAAC,CAAC;IAExB,IAAI;MACF,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,MAAM+B,OAAiB,GAAG;QACxB,GAAGF,IAAI;QACPlD,EAAE,EAAEwB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzBpB,SAAS,EAAE,IAAIkB,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MACpC,CAAC;MAEDd,GAAG,CAACe,KAAK,KAAK;QACZZ,KAAK,EAAE,CAACoC,OAAO,EAAE,GAAGxB,KAAK,CAACZ,KAAK,CAAC;QAChCE,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdjB,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMY,KAAK;IACb;EACF,CAAC;EAEDuB,cAAc,EAAE,MAAAA,CAAOC,MAAc,EAAEC,OAA0B,KAAK;IACpE1C,GAAG,CAAC;MAAEK,SAAS,EAAE;IAAK,CAAC,CAAC;IAExB,IAAI;MACF,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtDR,GAAG,CAACe,KAAK,KAAK;QACZZ,KAAK,EAAEY,KAAK,CAACZ,KAAK,CAACwC,GAAG,CAACN,IAAI,IACzBA,IAAI,CAAClD,EAAE,KAAKsD,MAAM,GAAG;UAAE,GAAGJ,IAAI;UAAE,GAAGK;QAAQ,CAAC,GAAGL,IACjD,CAAC;QACDhC,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdjB,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMY,KAAK;IACb;EACF,CAAC;EAED2B,cAAc,EAAE,MAAOH,MAAc,IAAK;IACxCzC,GAAG,CAAC;MAAEK,SAAS,EAAE;IAAK,CAAC,CAAC;IAExB,IAAI;MACF,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtDR,GAAG,CAACe,KAAK,KAAK;QACZZ,KAAK,EAAEY,KAAK,CAACZ,KAAK,CAACgB,MAAM,CAACkB,IAAI,IAAIA,IAAI,CAAClD,EAAE,KAAKsD,MAAM,CAAC;QACrDpC,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdjB,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMY,KAAK;IACb;EACF,CAAC;EAEDD,iBAAiB,EAAG5B,MAAc,IAAK;IACrC,MAAMyD,OAAO,GAAG5C,GAAG,CAAC,CAAC,CAACiB,cAAc,CAAC9B,MAAM,CAAC;IAE5CY,GAAG,CAACe,KAAK,KAAK;MACZX,QAAQ,EAAE,CACR,GAAGW,KAAK,CAACX,QAAQ,CAACe,MAAM,CAACW,CAAC,IAAIA,CAAC,CAAC1C,MAAM,KAAKA,MAAM,CAAC,EAClDyD,OAAO;IAEX,CAAC,CAAC,CAAC;EACL;AACF,CAAC,CAAC,EACF;EACEC,IAAI,EAAE,eAAe;EACrBC,OAAO,EAAE9D,iBAAiB,CAAC,MAAM+D,YAAY,CAAC;EAC9CC,UAAU,EAAGlC,KAAK,KAAM;IACtBb,YAAY,EAAEa,KAAK,CAACb,YAAY;IAChCC,KAAK,EAAEY,KAAK,CAACZ,KAAK;IAClBC,QAAQ,EAAEW,KAAK,CAACX;EAClB,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}