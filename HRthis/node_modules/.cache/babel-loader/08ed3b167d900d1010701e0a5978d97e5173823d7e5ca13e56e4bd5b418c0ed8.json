{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { AnthropicError } from \"../../error.mjs\";\nimport { ReadableStreamToAsyncIterable } from \"../stream-utils.mjs\";\nimport { LineDecoder } from \"./line.mjs\";\nexport class JSONLDecoder {\n  constructor(iterator, controller) {\n    this.iterator = iterator;\n    this.controller = controller;\n  }\n  decoder() {\n    var _this = this;\n    return _wrapAsyncGenerator(function* () {\n      const lineDecoder = new LineDecoder();\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(_this.iterator), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const chunk = _step.value;\n          {\n            for (const line of lineDecoder.decode(chunk)) {\n              yield JSON.parse(line);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      for (const line of lineDecoder.flush()) {\n        yield JSON.parse(line);\n      }\n    })();\n  }\n  [Symbol.asyncIterator]() {\n    return this.decoder();\n  }\n  static fromResponse(response, controller) {\n    if (!response.body) {\n      controller.abort();\n      throw new AnthropicError(\"Attempted to iterate over a response with no body\");\n    }\n    return new JSONLDecoder(ReadableStreamToAsyncIterable(response.body), controller);\n  }\n}","map":{"version":3,"names":["AnthropicError","ReadableStreamToAsyncIterable","LineDecoder","JSONLDecoder","constructor","iterator","controller","decoder","_this","_wrapAsyncGenerator","lineDecoder","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_asyncIterator","_step","_awaitAsyncGenerator","next","done","chunk","value","line","decode","JSON","parse","err","return","flush","Symbol","asyncIterator","fromResponse","response","body","abort"],"sources":["/Users/halteverbotsocialmacpro/Desktop/ars vivai/Worky Time/worky-time-web/node_modules/@anthropic-ai/sdk/src/internal/decoders/jsonl.ts"],"sourcesContent":["import { AnthropicError } from \"../../error.js\";\nimport { ReadableStreamToAsyncIterable } from \"../stream-utils.js\";\nimport { type Response } from \"../../_shims/index.js\";\nimport { LineDecoder, type Bytes } from \"./line.js\";\n\nexport class JSONLDecoder<T> {\n  controller: AbortController;\n\n  constructor(\n    private iterator: AsyncIterableIterator<Bytes>,\n    controller: AbortController,\n  ) {\n    this.controller = controller;\n  }\n\n  private async *decoder(): AsyncIterator<T, any, undefined> {\n    const lineDecoder = new LineDecoder();\n    for await (const chunk of this.iterator) {\n      for (const line of lineDecoder.decode(chunk)) {\n        yield JSON.parse(line);\n      }\n    }\n\n    for (const line of lineDecoder.flush()) {\n      yield JSON.parse(line);\n    }\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this.decoder();\n  }\n\n  static fromResponse<T>(response: Response, controller: AbortController): JSONLDecoder<T> {\n    if (!response.body) {\n      controller.abort();\n      throw new AnthropicError(`Attempted to iterate over a response with no body`);\n    }\n\n    return new JSONLDecoder(ReadableStreamToAsyncIterable<Bytes>(response.body), controller);\n  }\n}\n"],"mappings":";;;SAASA,cAAc,QAAE;SAChBC,6BAA6B,QAAE;SAE/BC,WAAW,QAAc;AAElC,OAAM,MAAOC,YAAY;EAGvBC,YACUC,QAAsC,EAC9CC,UAA2B;IADnB,KAAAD,QAAQ,GAARA,QAAQ;IAGhB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAEeC,OAAOA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,mBAAA;MACpB,MAAMC,WAAW,GAAG,IAAIR,WAAW,EAAE;MAAC,IAAAS,yBAAA;MAAA,IAAAC,iBAAA;MAAA,IAAAC,cAAA;MAAA;QACtC,SAAAC,SAAA,GAAAC,cAAA,CAA0BP,KAAI,CAACH,QAAQ,GAAAW,KAAA,EAAAL,yBAAA,KAAAK,KAAA,SAAAC,oBAAA,CAAAH,SAAA,CAAAI,IAAA,KAAAC,IAAA,EAAAR,yBAAA,UAAE;UAAA,MAAxBS,KAAK,GAAAJ,KAAA,CAAAK,KAAA;UAAA;YACpB,KAAK,MAAMC,IAAI,IAAIZ,WAAW,CAACa,MAAM,CAACH,KAAK,CAAC,EAAE;cAC5C,MAAMI,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;;UACvB;;MACF,SAAAI,GAAA;QAAAd,iBAAA;QAAAC,cAAA,GAAAa,GAAA;MAAA;QAAA;UAAA,IAAAf,yBAAA,IAAAG,SAAA,CAAAa,MAAA;YAAA,MAAAV,oBAAA,CAAAH,SAAA,CAAAa,MAAA;UAAA;QAAA;UAAA,IAAAf,iBAAA;YAAA,MAAAC,cAAA;UAAA;QAAA;MAAA;MAED,KAAK,MAAMS,IAAI,IAAIZ,WAAW,CAACkB,KAAK,EAAE,EAAE;QACtC,MAAMJ,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;;IACvB;EACH;EAEA,CAACO,MAAM,CAACC,aAAa,IAAC;IACpB,OAAO,IAAI,CAACvB,OAAO,EAAE;EACvB;EAEA,OAAOwB,YAAYA,CAAIC,QAAkB,EAAE1B,UAA2B;IACpE,IAAI,CAAC0B,QAAQ,CAACC,IAAI,EAAE;MAClB3B,UAAU,CAAC4B,KAAK,EAAE;MAClB,MAAM,IAAIlC,cAAc,oDAAoD,CAAC;;IAG/E,OAAO,IAAIG,YAAY,CAACF,6BAA6B,CAAQ+B,QAAQ,CAACC,IAAI,CAAC,EAAE3B,UAAU,CAAC;EAC1F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}